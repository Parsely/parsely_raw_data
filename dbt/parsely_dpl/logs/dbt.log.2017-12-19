2017-12-19 18:08:54,204: Tracking: tracking
2017-12-19 18:08:54,204: Sending event: {'category': 'dbt', 'action': 'invocation', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f04510a1250>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f04510a14d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f04510a1310>], 'label': 'start'}
2017-12-19 18:08:54,278: Loading dependency project from /data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/include
2017-12-19 18:08:54,294: Loading dependency project from /home/annelise/parsely_raw_data/dbt/parsely_dpl/dbt_modules
2017-12-19 18:08:54,295: Parsing core.sql
2017-12-19 18:08:54,306: Parsing etc/get_custom_schema.sql
2017-12-19 18:08:54,314: Parsing schema_tests/relationships.sql
2017-12-19 18:08:54,318: Parsing schema_tests/accepted_values.sql
2017-12-19 18:08:54,320: Parsing schema_tests/not_null.sql
2017-12-19 18:08:54,322: Parsing schema_tests/unique.sql
2017-12-19 18:08:54,324: Parsing materializations/wrapper.sql
2017-12-19 18:08:54,327: Parsing materializations/archive.sql
2017-12-19 18:08:54,354: Parsing materializations/table.sql
2017-12-19 18:08:54,371: Parsing materializations/helpers.sql
2017-12-19 18:08:54,388: Parsing materializations/bigquery.sql
2017-12-19 18:08:54,401: Parsing materializations/view.sql
2017-12-19 18:08:54,414: Parsing materializations/incremental.sql
2017-12-19 18:08:54,438: Parsing adapters/redshift.sql
2017-12-19 18:08:54,455: Parsing adapters/bigquery.sql
2017-12-19 18:08:54,459: Parsing adapters/postgres.sql
2017-12-19 18:08:54,462: Parsing adapters/common.sql
2017-12-19 18:08:54,480: Parsing model.parsely.parsely_audit
2017-12-19 18:08:54,481: Parsing model.parsely.parsely_video_content
2017-12-19 18:08:54,484: Parsing model.parsely.parsely_post_content
2017-12-19 18:08:54,487: Parsing model.parsely.parsely_parent_videostart_keys
2017-12-19 18:08:54,490: Parsing model.parsely.calendar
2017-12-19 18:08:54,491: Parsing model.parsely.parsely_all_events
2017-12-19 18:08:54,496: Acquiring new redshift connection "parsely_all_events".
2017-12-19 18:08:54,496: Opening a new connection (0 currently allocated)
2017-12-19 18:08:54,539: Using redshift connection "parsely_all_events".
2017-12-19 18:08:54,539: On parsely_all_events: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:08:54,564: SQL status: SELECT in 0.03 seconds
2017-12-19 18:08:54,566: Parsing model.parsely.parsely_event_ids
2017-12-19 18:08:54,568: Parsing model.parsely.parsely_parent_pageview_keys
2017-12-19 18:08:54,570: Parsing model.parsely.parsely_base_events
2017-12-19 18:08:54,574: Acquiring new redshift connection "parsely_base_events".
2017-12-19 18:08:54,574: Re-using an available connection from the pool.
2017-12-19 18:08:54,574: Using redshift connection "parsely_base_events".
2017-12-19 18:08:54,574: On parsely_base_events: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:08:54,595: SQL status: SELECT in 0.02 seconds
2017-12-19 18:08:54,596: Parsing model.parsely.parsely_pageview_behavior_workflow
2017-12-19 18:08:54,602: Parsing model.parsely.parsely_pageview_engagedtime
2017-12-19 18:08:54,605: Parsing model.parsely.parsely_videoview_hanging_engagedtime
2017-12-19 18:08:54,607: Parsing model.parsely.parsely_pageview_hanging_engagedtime
2017-12-19 18:08:54,610: Parsing model.parsely.parsely_videoview_engagedtime
2017-12-19 18:08:54,613: Parsing model.parsely.parsely_videoview_behavior_workflow
2017-12-19 18:08:54,618: Parsing model.parsely.parsely_incoming_pageviews
2017-12-19 18:08:54,625: Parsing model.parsely.parsely_pageviews_sessionized
2017-12-19 18:08:54,631: Acquiring new redshift connection "parsely_pageviews_sessionized".
2017-12-19 18:08:54,631: Re-using an available connection from the pool.
2017-12-19 18:08:54,631: Using redshift connection "parsely_pageviews_sessionized".
2017-12-19 18:08:54,631: On parsely_pageviews_sessionized: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:08:54,652: SQL status: SELECT in 0.02 seconds
2017-12-19 18:08:54,654: Parsing model.parsely.parsely_incoming_videoviews
2017-12-19 18:08:54,661: Parsing model.parsely.parsely_videoviews_sessionized
2017-12-19 18:08:54,666: Acquiring new redshift connection "parsely_videoviews_sessionized".
2017-12-19 18:08:54,666: Re-using an available connection from the pool.
2017-12-19 18:08:54,666: Using redshift connection "parsely_videoviews_sessionized".
2017-12-19 18:08:54,666: On parsely_videoviews_sessionized: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:08:54,688: SQL status: SELECT in 0.02 seconds
2017-12-19 18:08:54,690: Parsing model.parsely.parsely_incoming_users
2017-12-19 18:08:54,692: Parsing model.parsely.parsely_users
2017-12-19 18:08:54,697: Acquiring new redshift connection "parsely_users".
2017-12-19 18:08:54,697: Re-using an available connection from the pool.
2017-12-19 18:08:54,697: Using redshift connection "parsely_users".
2017-12-19 18:08:54,697: On parsely_users: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:08:54,719: SQL status: SELECT in 0.02 seconds
2017-12-19 18:08:54,719: Parsing model.parsely.parsely_errors
2017-12-19 18:08:54,723: Parsing model.parsely.parsely_bot_traffic
2017-12-19 18:08:54,727: Parsing model.parsely.parsely_custom_events
2017-12-19 18:08:54,732: Parsing model.parsely.parsely_incoming_sessions
2017-12-19 18:08:54,735: Parsing model.parsely.parsely_entry_exit_urls
2017-12-19 18:08:54,738: Parsing model.parsely.parsely_sessions
2017-12-19 18:08:54,744: Acquiring new redshift connection "parsely_sessions".
2017-12-19 18:08:54,744: Re-using an available connection from the pool.
2017-12-19 18:08:54,744: Using redshift connection "parsely_sessions".
2017-12-19 18:08:54,744: On parsely_sessions: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:08:54,766: SQL status: SELECT in 0.02 seconds
2017-12-19 18:08:54,766: Parsing model.parsely.parsely_campaigns
2017-12-19 18:08:54,770: Acquiring new redshift connection "parsely_campaigns".
2017-12-19 18:08:54,770: Re-using an available connection from the pool.
2017-12-19 18:08:54,770: Using redshift connection "parsely_campaigns".
2017-12-19 18:08:54,770: On parsely_campaigns: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:08:54,791: SQL status: SELECT in 0.02 seconds
2017-12-19 18:08:54,796: Parsing operation.parsely.parsely-on-run-end-0
2017-12-19 18:08:54,799: Sending event: {'category': 'dbt', 'action': 'invocation', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f045e158910>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f04510889d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f045109a690>], 'label': 'end'}
2017-12-19 18:08:54,827: Encountered an error:
2017-12-19 18:08:54,827: Compilation Error in model parsely_all_events (models/base/parsely_all_events.sql)
  Model 'model.parsely.parsely_all_events' depends on model 'parsely_rawdata' which was not found.
2017-12-19 18:08:54,854: Traceback (most recent call last):
  File "/data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/main.py", line 40, in main
    results, succeeded = handle_and_check(args)
  File "/data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/main.py", line 84, in handle_and_check
    task, res = run_from_args(parsed)
  File "/data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/main.py", line 138, in run_from_args
    results = run_from_task(task, proj, parsed)
  File "/data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/main.py", line 146, in run_from_task
    result = task.run()
  File "/data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/task/run.py", line 26, in run
    results = runner.run(query, ModelRunner)
  File "/data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/runner.py", line 221, in run
    return self.run_from_graph(Selector, Runner, query)
  File "/data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/runner.py", line 183, in run_from_graph
    flat_graph, linker = self.compile(self.project)
  File "/data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/runner.py", line 179, in compile
    (flat_graph, linker) = compiler.compile()
  File "/data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/compilation.py", line 281, in compile
    root_project.get('name'))
  File "/data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/parser.py", line 97, in process_refs
    target_model_package)
  File "/data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/exceptions.py", line 160, in ref_target_not_found
    model)
  File "/data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/exceptions.py", line 115, in raise_compiler_error
    raise CompilationException(msg, node)
CompilationException: Compilation Error in model parsely_all_events (models/base/parsely_all_events.sql)
  Model 'model.parsely.parsely_all_events' depends on model 'parsely_rawdata' which was not found.

2017-12-19 18:10:47,991: Tracking: tracking
2017-12-19 18:10:47,991: Sending event: {'category': 'dbt', 'action': 'invocation', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe62413b250>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe62413b4d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe62413b310>], 'label': 'start'}
2017-12-19 18:10:48,088: Loading dependency project from /data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/include
2017-12-19 18:10:48,104: Loading dependency project from /home/annelise/parsely_raw_data/dbt/parsely_dpl/dbt_modules
2017-12-19 18:10:48,105: Parsing core.sql
2017-12-19 18:10:48,117: Parsing etc/get_custom_schema.sql
2017-12-19 18:10:48,122: Parsing schema_tests/relationships.sql
2017-12-19 18:10:48,124: Parsing schema_tests/accepted_values.sql
2017-12-19 18:10:48,127: Parsing schema_tests/not_null.sql
2017-12-19 18:10:48,129: Parsing schema_tests/unique.sql
2017-12-19 18:10:48,130: Parsing materializations/wrapper.sql
2017-12-19 18:10:48,133: Parsing materializations/archive.sql
2017-12-19 18:10:48,161: Parsing materializations/table.sql
2017-12-19 18:10:48,178: Parsing materializations/helpers.sql
2017-12-19 18:10:48,192: Parsing materializations/bigquery.sql
2017-12-19 18:10:48,205: Parsing materializations/view.sql
2017-12-19 18:10:48,219: Parsing materializations/incremental.sql
2017-12-19 18:10:48,243: Parsing adapters/redshift.sql
2017-12-19 18:10:48,260: Parsing adapters/bigquery.sql
2017-12-19 18:10:48,264: Parsing adapters/postgres.sql
2017-12-19 18:10:48,267: Parsing adapters/common.sql
2017-12-19 18:10:48,285: Parsing model.parsely.parsely_audit
2017-12-19 18:10:48,286: Parsing model.parsely.parsely_video_content
2017-12-19 18:10:48,289: Parsing model.parsely.parsely_post_content
2017-12-19 18:10:48,292: Parsing model.parsely.parsely_parent_videostart_keys
2017-12-19 18:10:48,295: Parsing model.parsely.calendar
2017-12-19 18:10:48,296: Parsing model.parsely.parsely_all_events
2017-12-19 18:10:48,301: Acquiring new redshift connection "parsely_all_events".
2017-12-19 18:10:48,301: Opening a new connection (0 currently allocated)
2017-12-19 18:10:48,337: Using redshift connection "parsely_all_events".
2017-12-19 18:10:48,337: On parsely_all_events: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:10:48,364: SQL status: SELECT in 0.03 seconds
2017-12-19 18:10:48,366: Parsing model.parsely.parsely_event_ids
2017-12-19 18:10:48,368: Parsing model.parsely.parsely_parent_pageview_keys
2017-12-19 18:10:48,370: Parsing model.parsely.parsely_base_events
2017-12-19 18:10:48,374: Acquiring new redshift connection "parsely_base_events".
2017-12-19 18:10:48,374: Re-using an available connection from the pool.
2017-12-19 18:10:48,374: Using redshift connection "parsely_base_events".
2017-12-19 18:10:48,374: On parsely_base_events: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:10:48,396: SQL status: SELECT in 0.02 seconds
2017-12-19 18:10:48,397: Parsing model.parsely.parsely_pageview_behavior_workflow
2017-12-19 18:10:48,403: Parsing model.parsely.parsely_pageview_engagedtime
2017-12-19 18:10:48,406: Parsing model.parsely.parsely_videoview_hanging_engagedtime
2017-12-19 18:10:48,408: Parsing model.parsely.parsely_pageview_hanging_engagedtime
2017-12-19 18:10:48,411: Parsing model.parsely.parsely_videoview_engagedtime
2017-12-19 18:10:48,414: Parsing model.parsely.parsely_videoview_behavior_workflow
2017-12-19 18:10:48,419: Parsing model.parsely.parsely_incoming_pageviews
2017-12-19 18:10:48,426: Parsing model.parsely.parsely_pageviews_sessionized
2017-12-19 18:10:48,432: Acquiring new redshift connection "parsely_pageviews_sessionized".
2017-12-19 18:10:48,432: Re-using an available connection from the pool.
2017-12-19 18:10:48,432: Using redshift connection "parsely_pageviews_sessionized".
2017-12-19 18:10:48,432: On parsely_pageviews_sessionized: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:10:48,455: SQL status: SELECT in 0.02 seconds
2017-12-19 18:10:48,456: Parsing model.parsely.parsely_incoming_videoviews
2017-12-19 18:10:48,463: Parsing model.parsely.parsely_videoviews_sessionized
2017-12-19 18:10:48,469: Acquiring new redshift connection "parsely_videoviews_sessionized".
2017-12-19 18:10:48,469: Re-using an available connection from the pool.
2017-12-19 18:10:48,469: Using redshift connection "parsely_videoviews_sessionized".
2017-12-19 18:10:48,469: On parsely_videoviews_sessionized: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:10:48,492: SQL status: SELECT in 0.02 seconds
2017-12-19 18:10:48,493: Parsing model.parsely.parsely_incoming_users
2017-12-19 18:10:48,496: Parsing model.parsely.parsely_users
2017-12-19 18:10:48,501: Acquiring new redshift connection "parsely_users".
2017-12-19 18:10:48,501: Re-using an available connection from the pool.
2017-12-19 18:10:48,501: Using redshift connection "parsely_users".
2017-12-19 18:10:48,501: On parsely_users: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:10:48,523: SQL status: SELECT in 0.02 seconds
2017-12-19 18:10:48,524: Parsing model.parsely.parsely_errors
2017-12-19 18:10:48,528: Parsing model.parsely.parsely_bot_traffic
2017-12-19 18:10:48,532: Parsing model.parsely.parsely_custom_events
2017-12-19 18:10:48,537: Parsing model.parsely.parsely_incoming_sessions
2017-12-19 18:10:48,540: Parsing model.parsely.parsely_entry_exit_urls
2017-12-19 18:10:48,543: Parsing model.parsely.parsely_sessions
2017-12-19 18:10:48,548: Acquiring new redshift connection "parsely_sessions".
2017-12-19 18:10:48,548: Re-using an available connection from the pool.
2017-12-19 18:10:48,548: Using redshift connection "parsely_sessions".
2017-12-19 18:10:48,549: On parsely_sessions: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:10:48,571: SQL status: SELECT in 0.02 seconds
2017-12-19 18:10:48,571: Parsing model.parsely.parsely_campaigns
2017-12-19 18:10:48,575: Acquiring new redshift connection "parsely_campaigns".
2017-12-19 18:10:48,575: Re-using an available connection from the pool.
2017-12-19 18:10:48,575: Using redshift connection "parsely_campaigns".
2017-12-19 18:10:48,575: On parsely_campaigns: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:10:48,598: SQL status: SELECT in 0.02 seconds
2017-12-19 18:10:48,603: Parsing operation.parsely.parsely-on-run-end-0
2017-12-19 18:10:48,607: Sending event: {'category': 'dbt', 'action': 'invocation', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe6311f2910>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe6241229d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe624134690>], 'label': 'end'}
2017-12-19 18:10:48,667: Encountered an error:
2017-12-19 18:10:48,668: Compilation Error in model parsely_all_events (models/base/parsely_all_events.sql)
  Model 'model.parsely.parsely_all_events' depends on model 'parsely_rawdata' which was not found.
2017-12-19 18:10:48,669: Traceback (most recent call last):
  File "/data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/main.py", line 40, in main
    results, succeeded = handle_and_check(args)
  File "/data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/main.py", line 84, in handle_and_check
    task, res = run_from_args(parsed)
  File "/data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/main.py", line 138, in run_from_args
    results = run_from_task(task, proj, parsed)
  File "/data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/main.py", line 146, in run_from_task
    result = task.run()
  File "/data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/task/run.py", line 26, in run
    results = runner.run(query, ModelRunner)
  File "/data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/runner.py", line 221, in run
    return self.run_from_graph(Selector, Runner, query)
  File "/data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/runner.py", line 183, in run_from_graph
    flat_graph, linker = self.compile(self.project)
  File "/data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/runner.py", line 179, in compile
    (flat_graph, linker) = compiler.compile()
  File "/data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/compilation.py", line 281, in compile
    root_project.get('name'))
  File "/data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/parser.py", line 97, in process_refs
    target_model_package)
  File "/data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/exceptions.py", line 160, in ref_target_not_found
    model)
  File "/data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/exceptions.py", line 115, in raise_compiler_error
    raise CompilationException(msg, node)
CompilationException: Compilation Error in model parsely_all_events (models/base/parsely_all_events.sql)
  Model 'model.parsely.parsely_all_events' depends on model 'parsely_rawdata' which was not found.

2017-12-19 18:11:43,255: Tracking: tracking
2017-12-19 18:11:43,256: Sending event: {'category': 'dbt', 'action': 'invocation', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbd9fee6250>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbd9fee64d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbd9fee6310>], 'label': 'start'}
2017-12-19 18:11:43,292: Loading dependency project from /data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/include
2017-12-19 18:11:43,308: Loading dependency project from /home/annelise/parsely_raw_data/dbt/parsely_dpl/dbt_modules
2017-12-19 18:11:43,309: Parsing core.sql
2017-12-19 18:11:43,321: Parsing etc/get_custom_schema.sql
2017-12-19 18:11:43,326: Parsing schema_tests/relationships.sql
2017-12-19 18:11:43,328: Parsing schema_tests/accepted_values.sql
2017-12-19 18:11:43,331: Parsing schema_tests/not_null.sql
2017-12-19 18:11:43,332: Parsing schema_tests/unique.sql
2017-12-19 18:11:43,334: Parsing materializations/wrapper.sql
2017-12-19 18:11:43,337: Parsing materializations/archive.sql
2017-12-19 18:11:43,364: Parsing materializations/table.sql
2017-12-19 18:11:43,381: Parsing materializations/helpers.sql
2017-12-19 18:11:43,396: Parsing materializations/bigquery.sql
2017-12-19 18:11:43,409: Parsing materializations/view.sql
2017-12-19 18:11:43,422: Parsing materializations/incremental.sql
2017-12-19 18:11:43,446: Parsing adapters/redshift.sql
2017-12-19 18:11:43,462: Parsing adapters/bigquery.sql
2017-12-19 18:11:43,467: Parsing adapters/postgres.sql
2017-12-19 18:11:43,470: Parsing adapters/common.sql
2017-12-19 18:11:43,488: Parsing model.parsely.parsely_audit
2017-12-19 18:11:43,489: Parsing model.parsely.parsely_video_content
2017-12-19 18:11:43,492: Parsing model.parsely.parsely_post_content
2017-12-19 18:11:43,495: Parsing model.parsely.parsely_parent_videostart_keys
2017-12-19 18:11:43,498: Parsing model.parsely.calendar
2017-12-19 18:11:43,499: Parsing model.parsely.parsely_all_events
2017-12-19 18:11:43,504: Acquiring new redshift connection "parsely_all_events".
2017-12-19 18:11:43,504: Opening a new connection (0 currently allocated)
2017-12-19 18:11:43,518: Using redshift connection "parsely_all_events".
2017-12-19 18:11:43,518: On parsely_all_events: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:11:43,548: SQL status: SELECT in 0.03 seconds
2017-12-19 18:11:43,549: Parsing model.parsely.parsely_event_ids
2017-12-19 18:11:43,551: Parsing model.parsely.parsely_parent_pageview_keys
2017-12-19 18:11:43,553: Parsing model.parsely.parsely_base_events
2017-12-19 18:11:43,557: Acquiring new redshift connection "parsely_base_events".
2017-12-19 18:11:43,557: Re-using an available connection from the pool.
2017-12-19 18:11:43,557: Using redshift connection "parsely_base_events".
2017-12-19 18:11:43,557: On parsely_base_events: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:11:43,580: SQL status: SELECT in 0.02 seconds
2017-12-19 18:11:43,581: Parsing model.parsely.parsely_pageview_behavior_workflow
2017-12-19 18:11:43,587: Parsing model.parsely.parsely_pageview_engagedtime
2017-12-19 18:11:43,590: Parsing model.parsely.parsely_videoview_hanging_engagedtime
2017-12-19 18:11:43,592: Parsing model.parsely.parsely_pageview_hanging_engagedtime
2017-12-19 18:11:43,595: Parsing model.parsely.parsely_videoview_engagedtime
2017-12-19 18:11:43,598: Parsing model.parsely.parsely_videoview_behavior_workflow
2017-12-19 18:11:43,603: Parsing model.parsely.parsely_incoming_pageviews
2017-12-19 18:11:43,611: Parsing model.parsely.parsely_pageviews_sessionized
2017-12-19 18:11:43,616: Acquiring new redshift connection "parsely_pageviews_sessionized".
2017-12-19 18:11:43,616: Re-using an available connection from the pool.
2017-12-19 18:11:43,616: Using redshift connection "parsely_pageviews_sessionized".
2017-12-19 18:11:43,616: On parsely_pageviews_sessionized: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:11:43,639: SQL status: SELECT in 0.02 seconds
2017-12-19 18:11:43,641: Parsing model.parsely.parsely_incoming_videoviews
2017-12-19 18:11:43,649: Parsing model.parsely.parsely_videoviews_sessionized
2017-12-19 18:11:43,656: Acquiring new redshift connection "parsely_videoviews_sessionized".
2017-12-19 18:11:43,656: Re-using an available connection from the pool.
2017-12-19 18:11:43,656: Using redshift connection "parsely_videoviews_sessionized".
2017-12-19 18:11:43,656: On parsely_videoviews_sessionized: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:11:43,679: SQL status: SELECT in 0.02 seconds
2017-12-19 18:11:43,681: Parsing model.parsely.parsely_incoming_users
2017-12-19 18:11:43,683: Parsing model.parsely.parsely_users
2017-12-19 18:11:43,688: Acquiring new redshift connection "parsely_users".
2017-12-19 18:11:43,688: Re-using an available connection from the pool.
2017-12-19 18:11:43,688: Using redshift connection "parsely_users".
2017-12-19 18:11:43,689: On parsely_users: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:11:43,711: SQL status: SELECT in 0.02 seconds
2017-12-19 18:11:43,711: Parsing model.parsely.parsely_errors
2017-12-19 18:11:43,715: Parsing model.parsely.parsely_bot_traffic
2017-12-19 18:11:43,719: Parsing model.parsely.parsely_custom_events
2017-12-19 18:11:43,724: Parsing model.parsely.parsely_incoming_sessions
2017-12-19 18:11:43,728: Parsing model.parsely.parsely_entry_exit_urls
2017-12-19 18:11:43,731: Parsing model.parsely.parsely_sessions
2017-12-19 18:11:43,736: Acquiring new redshift connection "parsely_sessions".
2017-12-19 18:11:43,737: Re-using an available connection from the pool.
2017-12-19 18:11:43,737: Using redshift connection "parsely_sessions".
2017-12-19 18:11:43,737: On parsely_sessions: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:11:43,757: SQL status: SELECT in 0.02 seconds
2017-12-19 18:11:43,757: Parsing model.parsely.parsely_campaigns
2017-12-19 18:11:43,761: Acquiring new redshift connection "parsely_campaigns".
2017-12-19 18:11:43,761: Re-using an available connection from the pool.
2017-12-19 18:11:43,761: Using redshift connection "parsely_campaigns".
2017-12-19 18:11:43,761: On parsely_campaigns: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:11:43,781: SQL status: SELECT in 0.02 seconds
2017-12-19 18:11:43,786: Parsing operation.parsely.parsely-on-run-end-0
2017-12-19 18:11:43,789: Sending event: {'category': 'dbt', 'action': 'invocation', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbdacf9c910>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbd9fecd9d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbd9fedf690>], 'label': 'end'}
2017-12-19 18:11:43,819: Encountered an error:
2017-12-19 18:11:43,820: Compilation Error in model parsely_all_events (models/base/parsely_all_events.sql)
  Model 'model.parsely.parsely_all_events' depends on model 'parsely_rawdata' which was not found.
2017-12-19 18:11:43,822: Traceback (most recent call last):
  File "/data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/main.py", line 40, in main
    results, succeeded = handle_and_check(args)
  File "/data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/main.py", line 84, in handle_and_check
    task, res = run_from_args(parsed)
  File "/data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/main.py", line 138, in run_from_args
    results = run_from_task(task, proj, parsed)
  File "/data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/main.py", line 146, in run_from_task
    result = task.run()
  File "/data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/task/compile.py", line 25, in run
    results = runner.run(query, CompileRunner)
  File "/data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/runner.py", line 221, in run
    return self.run_from_graph(Selector, Runner, query)
  File "/data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/runner.py", line 183, in run_from_graph
    flat_graph, linker = self.compile(self.project)
  File "/data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/runner.py", line 179, in compile
    (flat_graph, linker) = compiler.compile()
  File "/data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/compilation.py", line 281, in compile
    root_project.get('name'))
  File "/data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/parser.py", line 97, in process_refs
    target_model_package)
  File "/data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/exceptions.py", line 160, in ref_target_not_found
    model)
  File "/data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/exceptions.py", line 115, in raise_compiler_error
    raise CompilationException(msg, node)
CompilationException: Compilation Error in model parsely_all_events (models/base/parsely_all_events.sql)
  Model 'model.parsely.parsely_all_events' depends on model 'parsely_rawdata' which was not found.

2017-12-19 18:26:11,376: Tracking: tracking
2017-12-19 18:26:11,376: Sending event: {'category': 'dbt', 'action': 'invocation', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc9a288250>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc9a2884d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc9a288310>], 'label': 'start'}
2017-12-19 18:26:11,428: Loading dependency project from /data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/include
2017-12-19 18:26:11,444: Loading dependency project from /home/annelise/parsely_raw_data/dbt/parsely_dpl/dbt_modules
2017-12-19 18:26:11,445: Parsing core.sql
2017-12-19 18:26:11,456: Parsing etc/get_custom_schema.sql
2017-12-19 18:26:11,461: Parsing schema_tests/relationships.sql
2017-12-19 18:26:11,464: Parsing schema_tests/accepted_values.sql
2017-12-19 18:26:11,467: Parsing schema_tests/not_null.sql
2017-12-19 18:26:11,468: Parsing schema_tests/unique.sql
2017-12-19 18:26:11,470: Parsing materializations/wrapper.sql
2017-12-19 18:26:11,473: Parsing materializations/archive.sql
2017-12-19 18:26:11,500: Parsing materializations/table.sql
2017-12-19 18:26:11,517: Parsing materializations/helpers.sql
2017-12-19 18:26:11,532: Parsing materializations/bigquery.sql
2017-12-19 18:26:11,545: Parsing materializations/view.sql
2017-12-19 18:26:11,558: Parsing materializations/incremental.sql
2017-12-19 18:26:11,583: Parsing adapters/redshift.sql
2017-12-19 18:26:11,599: Parsing adapters/bigquery.sql
2017-12-19 18:26:11,604: Parsing adapters/postgres.sql
2017-12-19 18:26:11,606: Parsing adapters/common.sql
2017-12-19 18:26:11,625: Parsing model.parsely.parsely_audit
2017-12-19 18:26:11,626: Parsing model.parsely.parsely_video_content
2017-12-19 18:26:11,629: Parsing model.parsely.parsely_post_content
2017-12-19 18:26:11,632: Parsing model.parsely.parsely_parent_videostart_keys
2017-12-19 18:26:11,634: Parsing model.parsely.parsely_rawdata
2017-12-19 18:26:11,637: Parsing model.parsely.calendar
2017-12-19 18:26:11,638: Parsing model.parsely.parsely_all_events
2017-12-19 18:26:11,643: Acquiring new redshift connection "parsely_all_events".
2017-12-19 18:26:11,643: Opening a new connection (0 currently allocated)
2017-12-19 18:26:11,674: Using redshift connection "parsely_all_events".
2017-12-19 18:26:11,674: On parsely_all_events: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:26:11,698: SQL status: SELECT in 0.02 seconds
2017-12-19 18:26:11,699: Parsing model.parsely.parsely_event_ids
2017-12-19 18:26:11,701: Parsing model.parsely.parsely_parent_pageview_keys
2017-12-19 18:26:11,703: Parsing model.parsely.parsely_base_events
2017-12-19 18:26:11,707: Acquiring new redshift connection "parsely_base_events".
2017-12-19 18:26:11,707: Re-using an available connection from the pool.
2017-12-19 18:26:11,707: Using redshift connection "parsely_base_events".
2017-12-19 18:26:11,707: On parsely_base_events: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:26:11,725: SQL status: SELECT in 0.02 seconds
2017-12-19 18:26:11,726: Parsing model.parsely.parsely_pageview_behavior_workflow
2017-12-19 18:26:11,731: Parsing model.parsely.parsely_pageview_engagedtime
2017-12-19 18:26:11,735: Parsing model.parsely.parsely_videoview_hanging_engagedtime
2017-12-19 18:26:11,737: Parsing model.parsely.parsely_pageview_hanging_engagedtime
2017-12-19 18:26:11,739: Parsing model.parsely.parsely_videoview_engagedtime
2017-12-19 18:26:11,742: Parsing model.parsely.parsely_videoview_behavior_workflow
2017-12-19 18:26:11,748: Parsing model.parsely.parsely_incoming_pageviews
2017-12-19 18:26:11,755: Parsing model.parsely.parsely_pageviews_sessionized
2017-12-19 18:26:11,760: Acquiring new redshift connection "parsely_pageviews_sessionized".
2017-12-19 18:26:11,760: Re-using an available connection from the pool.
2017-12-19 18:26:11,760: Using redshift connection "parsely_pageviews_sessionized".
2017-12-19 18:26:11,760: On parsely_pageviews_sessionized: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:26:11,779: SQL status: SELECT in 0.02 seconds
2017-12-19 18:26:11,781: Parsing model.parsely.parsely_incoming_videoviews
2017-12-19 18:26:11,788: Parsing model.parsely.parsely_videoviews_sessionized
2017-12-19 18:26:11,793: Acquiring new redshift connection "parsely_videoviews_sessionized".
2017-12-19 18:26:11,793: Re-using an available connection from the pool.
2017-12-19 18:26:11,793: Using redshift connection "parsely_videoviews_sessionized".
2017-12-19 18:26:11,793: On parsely_videoviews_sessionized: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:26:11,812: SQL status: SELECT in 0.02 seconds
2017-12-19 18:26:11,813: Parsing model.parsely.parsely_incoming_users
2017-12-19 18:26:11,816: Parsing model.parsely.parsely_users
2017-12-19 18:26:11,821: Acquiring new redshift connection "parsely_users".
2017-12-19 18:26:11,821: Re-using an available connection from the pool.
2017-12-19 18:26:11,821: Using redshift connection "parsely_users".
2017-12-19 18:26:11,821: On parsely_users: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:26:11,841: SQL status: SELECT in 0.02 seconds
2017-12-19 18:26:11,841: Parsing model.parsely.parsely_errors
2017-12-19 18:26:11,845: Parsing model.parsely.parsely_bot_traffic
2017-12-19 18:26:11,849: Parsing model.parsely.parsely_custom_events
2017-12-19 18:26:11,854: Parsing model.parsely.parsely_incoming_sessions
2017-12-19 18:26:11,857: Parsing model.parsely.parsely_entry_exit_urls
2017-12-19 18:26:11,860: Parsing model.parsely.parsely_sessions
2017-12-19 18:26:11,865: Acquiring new redshift connection "parsely_sessions".
2017-12-19 18:26:11,865: Re-using an available connection from the pool.
2017-12-19 18:26:11,865: Using redshift connection "parsely_sessions".
2017-12-19 18:26:11,866: On parsely_sessions: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:26:11,885: SQL status: SELECT in 0.02 seconds
2017-12-19 18:26:11,886: Parsing model.parsely.parsely_campaigns
2017-12-19 18:26:11,889: Acquiring new redshift connection "parsely_campaigns".
2017-12-19 18:26:11,890: Re-using an available connection from the pool.
2017-12-19 18:26:11,890: Using redshift connection "parsely_campaigns".
2017-12-19 18:26:11,890: On parsely_campaigns: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:26:11,910: SQL status: SELECT in 0.02 seconds
2017-12-19 18:26:11,915: Parsing operation.parsely.parsely-on-run-end-0
2017-12-19 18:26:11,920: Found 40 macros, 0 analyses, 0 archives, 0 tests, 29 models, 1 operations
2017-12-19 18:26:11,927: 
2017-12-19 18:26:11,930: Acquiring new redshift connection "master".
2017-12-19 18:26:11,930: Re-using an available connection from the pool.
2017-12-19 18:26:11,930: Using redshift connection "master".
2017-12-19 18:26:11,930: On master: select distinct nspname from pg_namespace
2017-12-19 18:26:11,932: SQL status: SELECT in 0.00 seconds
2017-12-19 18:26:11,935: Using redshift connection "master".
2017-12-19 18:26:11,935: On master: BEGIN
2017-12-19 18:26:11,937: SQL status: BEGIN in 0.00 seconds
2017-12-19 18:26:11,937: On master: COMMIT
2017-12-19 18:26:11,937: Using redshift connection "master".
2017-12-19 18:26:11,937: On master: COMMIT
2017-12-19 18:26:11,938: SQL status: COMMIT in 0.00 seconds
2017-12-19 18:26:11,944: 18:26:11 | Concurrency: 1 threads (target='dev')
2017-12-19 18:26:11,944: 18:26:11 | 
2017-12-19 18:26:11,944: Using redshift connection "master".
2017-12-19 18:26:11,944: On master: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:26:11,965: SQL status: SELECT in 0.02 seconds
2017-12-19 18:26:12,040: 18:26:12 | 1 of 25 START view model blog_dbt_dev.calendar....................... [RUN]
2017-12-19 18:26:12,040: Compiling model.parsely.calendar
2017-12-19 18:26:12,044: Writing injected SQL for node "model.parsely.calendar"
2017-12-19 18:26:12,045: Acquiring new redshift connection "calendar".
2017-12-19 18:26:12,046: Opening a new connection (1 currently allocated)
2017-12-19 18:26:12,057: Using redshift connection "calendar".
2017-12-19 18:26:12,057: On calendar: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:26:12,082: SQL status: SELECT in 0.03 seconds
2017-12-19 18:26:12,084: Writing runtime SQL for node "model.parsely.calendar"
2017-12-19 18:26:12,085: Using redshift connection "calendar".
2017-12-19 18:26:12,085: On calendar: BEGIN
2017-12-19 18:26:12,087: SQL status: BEGIN in 0.00 seconds
2017-12-19 18:26:12,087: Using redshift connection "calendar".
2017-12-19 18:26:12,087: On calendar: create view "blog_dbt_dev"."calendar__dbt_tmp" as (
    SELECT
    (DATE_PART('y', date_gen.dt)*10000+DATE_PART('mon', date_gen.dt)*100+DATE_PART('day', date_gen.dt))::int AS "id",
    date_gen.dt AS "date",
    DATE_PART('y', date_gen.dt)::smallint AS "year",
    DATE_PART('mon', date_gen.dt)::smallint AS "month",
    DATE_PART('day', date_gen.dt)::smallint AS "day",
    DATE_PART('qtr', date_gen.dt)::smallint AS "quarter",
    DATE_PART('w', date_gen.dt)::smallint AS "week",
    CASE DATE_PART('dow', date_gen.dt)
      WHEN 0 THEN 'Sunday'
      WHEN 1 THEN 'Monday'
      WHEN 2 THEN 'Tuesday'
      WHEN 3 THEN 'Wednesday'
      WHEN 4 THEN 'Thursday'
      WHEN 5 THEN 'Friday'
      WHEN 6 THEN 'Saturday'
      END::VARCHAR(9) AS "day_name",
    CASE DATE_PART('mon', date_gen.dt)::smallint
      WHEN 1 THEN 'January'
      WHEN 2 THEN 'February'
      WHEN 3 THEN 'March'
      WHEN 4 THEN 'April'
      WHEN 5 THEN 'May'
      WHEN 6 THEN 'June'
      WHEN 7 THEN 'July'
      WHEN 8 THEN 'August'
      WHEN 9 THEN 'September'
      WHEN 10 THEN 'October'
      WHEN 11 THEN 'November'
      WHEN 12 THEN 'December'
      END::VARCHAR(9) AS "month_name",
    CASE
      WHEN DATE_PART('dow', date_gen.dt)::smallint IN (0,6) THEN TRUE
      ELSE FALSE
      END::boolean AS "weekend_flag"
    FROM
    (SELECT
      ('2050-01-01' - n)::date AS dt FROM (SELECT row_number() over () AS n FROM stl_scan LIMIT 54787)) date_gen
  );
2017-12-19 18:26:12,341: SQL status: CREATE VIEW in 0.25 seconds
2017-12-19 18:26:12,341: On calendar: COMMIT
2017-12-19 18:26:12,341: Using redshift connection "calendar".
2017-12-19 18:26:12,341: On calendar: COMMIT
2017-12-19 18:26:12,643: SQL status: COMMIT in 0.30 seconds
2017-12-19 18:26:12,643: Using redshift connection "calendar".
2017-12-19 18:26:12,643: On calendar: BEGIN
2017-12-19 18:26:12,645: SQL status: BEGIN in 0.00 seconds
2017-12-19 18:26:12,645: Using redshift connection "calendar".
2017-12-19 18:26:12,645: On calendar: drop view if exists "blog_dbt_dev"."calendar" cascade
2017-12-19 18:26:12,661: SQL status: DROP VIEW in 0.02 seconds
2017-12-19 18:26:12,661: On calendar: COMMIT
2017-12-19 18:26:12,661: Using redshift connection "calendar".
2017-12-19 18:26:12,661: On calendar: COMMIT
2017-12-19 18:26:13,358: SQL status: COMMIT in 0.70 seconds
2017-12-19 18:26:13,358: Using redshift connection "calendar".
2017-12-19 18:26:13,358: On calendar: BEGIN
2017-12-19 18:26:13,360: SQL status: BEGIN in 0.00 seconds
2017-12-19 18:26:13,360: Using redshift connection "calendar".
2017-12-19 18:26:13,360: On calendar: alter table "blog_dbt_dev"."calendar__dbt_tmp" rename to "calendar"
2017-12-19 18:26:13,548: SQL status: ALTER TABLE in 0.19 seconds
2017-12-19 18:26:13,548: On calendar: COMMIT
2017-12-19 18:26:13,548: Using redshift connection "calendar".
2017-12-19 18:26:13,548: On calendar: COMMIT
2017-12-19 18:26:14,746: SQL status: COMMIT in 1.20 seconds
2017-12-19 18:26:14,747: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc9a17b990>], 'label': '38baff82-f50c-4aaf-95f2-3319ac6c0773'}
2017-12-19 18:26:14,775: 18:26:14 | 1 of 25 OK created view model blog_dbt_dev.calendar.................. [CREATE VIEW in 2.71s]
2017-12-19 18:26:14,775: 18:26:14 | 2 of 25 START incremental model blog_dbt_dev.parsely_rawdata......... [RUN]
2017-12-19 18:26:14,775: Compiling model.parsely.parsely_rawdata
2017-12-19 18:26:14,781: Writing injected SQL for node "model.parsely.parsely_rawdata"
2017-12-19 18:26:14,782: Acquiring new redshift connection "parsely_rawdata".
2017-12-19 18:26:14,782: Re-using an available connection from the pool.
2017-12-19 18:26:14,782: Using redshift connection "parsely_rawdata".
2017-12-19 18:26:14,782: On parsely_rawdata: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:26:14,803: SQL status: SELECT in 0.02 seconds
2017-12-19 18:26:14,803: Using redshift connection "parsely_rawdata".
2017-12-19 18:26:14,803: On parsely_rawdata: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:26:14,823: SQL status: SELECT in 0.02 seconds
2017-12-19 18:26:14,824: Using redshift connection "parsely_rawdata".
2017-12-19 18:26:14,824: On parsely_rawdata: BEGIN
2017-12-19 18:26:14,826: SQL status: BEGIN in 0.00 seconds
2017-12-19 18:26:14,826: Using redshift connection "parsely_rawdata".
2017-12-19 18:26:14,826: On parsely_rawdata: create temporary table "parsely_rawdata__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          

-- created to track event_ids for duplicate event_ids that do not need to be processed twice
-- how often should this truncate?
select
  *,
  CURRENT_TIMESTAMP as insert_timestamp
from parsely_blog_rawdata
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-19 18:26:43,564: SQL status: SELECT in 28.74 seconds
2017-12-19 18:26:43,564: Using redshift connection "parsely_rawdata".
2017-12-19 18:26:43,564: On parsely_rawdata: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_rawdata__dbt_incremental_tmp'
2017-12-19 18:26:43,734: SQL status: SELECT in 0.17 seconds
2017-12-19 18:26:43,735: Using redshift connection "parsely_rawdata".
2017-12-19 18:26:43,735: On parsely_rawdata: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_rawdata' AND table_schema = 'blog_dbt_dev'
2017-12-19 18:26:43,847: SQL status: SELECT in 0.11 seconds
2017-12-19 18:26:43,848: Using redshift connection "parsely_rawdata".
2017-12-19 18:26:43,848: On parsely_rawdata: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_rawdata' AND table_schema = 'blog_dbt_dev'
2017-12-19 18:26:43,958: SQL status: SELECT in 0.11 seconds
2017-12-19 18:26:43,961: Writing runtime SQL for node "model.parsely.parsely_rawdata"
2017-12-19 18:26:43,961: Using redshift connection "parsely_rawdata".
2017-12-19 18:26:43,962: On parsely_rawdata: 
       

       delete
  from "blog_dbt_dev"."parsely_rawdata"
  where (event_id) in (
    select (event_id)
    from "parsely_rawdata__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_rawdata" ("visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "ip_lon", "ip_lat", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "ts_session_last", "ts_session_current", "ts_action", "insert_timestamp")
       (
         select "visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "ip_lon", "ip_lat", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "ts_session_last", "ts_session_current", "ts_action", "insert_timestamp"
         from "parsely_rawdata__dbt_incremental_tmp"
       );
     
2017-12-19 18:27:13,524: SQL status: INSERT 0 996095 in 29.56 seconds
2017-12-19 18:27:13,524: On parsely_rawdata: COMMIT
2017-12-19 18:27:13,524: Using redshift connection "parsely_rawdata".
2017-12-19 18:27:13,524: On parsely_rawdata: COMMIT
2017-12-19 18:27:15,485: SQL status: COMMIT in 1.96 seconds
2017-12-19 18:27:15,486: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc9a17b9d0>], 'label': '38baff82-f50c-4aaf-95f2-3319ac6c0773'}
2017-12-19 18:27:15,552: 18:27:15 | 2 of 25 OK created incremental model blog_dbt_dev.parsely_rawdata.... [INSERT 0 996095 in 60.71s]
2017-12-19 18:27:15,552: 18:27:15 | 3 of 25 START incremental model blog_dbt_dev.parsely_all_events...... [RUN]
2017-12-19 18:27:15,553: Compiling model.parsely.parsely_all_events
2017-12-19 18:27:15,558: Acquiring new redshift connection "parsely_all_events".
2017-12-19 18:27:15,558: Re-using an available connection from the pool.
2017-12-19 18:27:15,558: Using redshift connection "parsely_all_events".
2017-12-19 18:27:15,558: On parsely_all_events: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:27:15,577: SQL status: SELECT in 0.02 seconds
2017-12-19 18:27:15,581: Writing injected SQL for node "model.parsely.parsely_all_events"
2017-12-19 18:27:15,583: Using redshift connection "parsely_all_events".
2017-12-19 18:27:15,583: On parsely_all_events: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:27:15,603: SQL status: SELECT in 0.02 seconds
2017-12-19 18:27:15,603: Using redshift connection "parsely_all_events".
2017-12-19 18:27:15,603: On parsely_all_events: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:27:15,622: SQL status: SELECT in 0.02 seconds
2017-12-19 18:27:15,624: Using redshift connection "parsely_all_events".
2017-12-19 18:27:15,624: On parsely_all_events: BEGIN
2017-12-19 18:27:15,626: SQL status: BEGIN in 0.00 seconds
2017-12-19 18:27:15,626: Using redshift connection "parsely_all_events".
2017-12-19 18:27:15,626: On parsely_all_events: create temporary table "parsely_all_events__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          

with new_events as (

    select *
    from "blog_dbt_dev"."parsely_rawdata"

    
    where insert_timestamp > (
        select coalesce(max(t.insert_timestamp), '0001-01-01') from "blog_dbt_dev"."parsely_all_events" as t
    )
    

),


dedupe as (
  select
      *,
  --  event action dates and times
      DATE_PART('day',ts_action) as day,
      DATE_PART('quarter',ts_action) as quarter,
      DATE_PART('month',ts_action) as month,
      DATE_PART('year',ts_action) as year,
      DATE_PART('week',ts_action) as week,
      (DATE_PART('y', ts_action)*10000+DATE_PART('mon', ts_action)*100+DATE_PART('day', ts_action))::int AS date_id,
      (DATE_PART('y', ts_session_current)*10000+DATE_PART('mon', ts_session_current)*100+DATE_PART('day', ts_session_current))::int AS session_date_id,
  --  transformed fields
      coalesce(metadata_canonical_url,url) as pageview_post_id,
      json_extract_path_text(
          extra_data,
          '_customer_apikey')     as customer_apikey,
  --  dedupe field as we can receive duplicate event_ids that can be excluded
      row_number() over (partition by event_id order by ts_action) as n,
  --  counter fields
      case when action = 'pageview' then 1 else 0 end as pageview_counter,
      case when action = 'videostart' then 1 else 0 end as videostart_counter,
  --  hash identifier fields
      md5(
        coalesce(apikey,'') || '_' ||
        coalesce(session_id::text,'') || '_' ||
        coalesce(visitor_site_id,'') || '_' ||
        coalesce(url,'') || '_' ||
        coalesce(metadata_canonical_url,'') || '_' ||
        coalesce(referrer,'') || '_' ||
        coalesce(ts_session_current::text,''))         as videostart_key,
     md5(
        coalesce(apikey,'') || '_' ||
        coalesce(session_id::text,'') || '_' ||
        coalesce(visitor_site_id,'') || '_' ||
        coalesce(metadata_canonical_url,url) || '_' ||
        coalesce(referrer,'') || '_' ||
        coalesce(ts_session_current::text,''))         as pageview_key,
      md5(
        coalesce(apikey,'') || '_' ||
        coalesce(utm_campaign,'') || '_' ||
        coalesce(utm_medium,'') || '_' ||
        coalesce(utm_source ,'') || '_' ||
        coalesce(utm_term,'') || '_' ||
        coalesce(utm_content,'') )               as utm_id,
      md5(
        coalesce(apikey,'') || '_' ||
        coalesce(session_id::text,'') || '_' ||
        coalesce(visitor_site_id,'') || '_' ||
        coalesce(session_timestamp::text,''))            as parsely_session_id,
      md5(
        coalesce(apikey,'') || '_' ||
        coalesce(visitor_ip,'') || '_' ||
        coalesce(visitor_site_id,''))           as apikey_visitor_id
  from new_events
)

select
  *
from dedupe
where n = 1
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-19 18:28:41,917: SQL status: SELECT in 86.29 seconds
2017-12-19 18:28:41,918: Using redshift connection "parsely_all_events".
2017-12-19 18:28:41,918: On parsely_all_events: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_all_events__dbt_incremental_tmp'
2017-12-19 18:28:42,154: SQL status: SELECT in 0.24 seconds
2017-12-19 18:28:42,155: Using redshift connection "parsely_all_events".
2017-12-19 18:28:42,155: On parsely_all_events: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_all_events' AND table_schema = 'blog_dbt_dev'
2017-12-19 18:28:42,261: SQL status: SELECT in 0.11 seconds
2017-12-19 18:28:42,261: Using redshift connection "parsely_all_events".
2017-12-19 18:28:42,261: On parsely_all_events: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_all_events' AND table_schema = 'blog_dbt_dev'
2017-12-19 18:28:42,367: SQL status: SELECT in 0.11 seconds
2017-12-19 18:28:42,370: Writing runtime SQL for node "model.parsely.parsely_all_events"
2017-12-19 18:28:42,371: Using redshift connection "parsely_all_events".
2017-12-19 18:28:42,371: On parsely_all_events: 
       

       delete
  from "blog_dbt_dev"."parsely_all_events"
  where (event_id) in (
    select (event_id)
    from "parsely_all_events__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_all_events" ("visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "n", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "videostart_counter", "pageview_counter", "session_date_id", "date_id", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "week", "year", "month", "quarter", "day", "ip_lon", "ip_lat", "apikey_visitor_id", "parsely_session_id", "utm_id", "pageview_key", "videostart_key", "customer_apikey", "pageview_post_id", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "ts_session_last", "ts_session_current", "ts_action", "insert_timestamp")
       (
         select "visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "n", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "videostart_counter", "pageview_counter", "session_date_id", "date_id", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "week", "year", "month", "quarter", "day", "ip_lon", "ip_lat", "apikey_visitor_id", "parsely_session_id", "utm_id", "pageview_key", "videostart_key", "customer_apikey", "pageview_post_id", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "ts_session_last", "ts_session_current", "ts_action", "insert_timestamp"
         from "parsely_all_events__dbt_incremental_tmp"
       );
     
2017-12-19 18:28:59,951: SQL status: INSERT 0 881776 in 17.58 seconds
2017-12-19 18:28:59,951: On parsely_all_events: COMMIT
2017-12-19 18:28:59,951: Using redshift connection "parsely_all_events".
2017-12-19 18:28:59,952: On parsely_all_events: COMMIT
2017-12-19 18:29:02,806: SQL status: COMMIT in 2.85 seconds
2017-12-19 18:29:02,806: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc9a23ddd0>], 'label': '38baff82-f50c-4aaf-95f2-3319ac6c0773'}
2017-12-19 18:29:02,854: 18:29:02 | 3 of 25 OK created incremental model blog_dbt_dev.parsely_all_events. [INSERT 0 881776 in 107.25s]
2017-12-19 18:29:02,855: 18:29:02 | 4 of 25 START incremental model blog_dbt_dev.parsely_bot_traffic..... [RUN]
2017-12-19 18:29:02,855: Compiling model.parsely.parsely_bot_traffic
2017-12-19 18:29:02,862: Writing injected SQL for node "model.parsely.parsely_bot_traffic"
2017-12-19 18:29:02,863: Acquiring new redshift connection "parsely_bot_traffic".
2017-12-19 18:29:02,863: Re-using an available connection from the pool.
2017-12-19 18:29:02,863: Using redshift connection "parsely_bot_traffic".
2017-12-19 18:29:02,863: On parsely_bot_traffic: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:29:02,884: SQL status: SELECT in 0.02 seconds
2017-12-19 18:29:02,884: Using redshift connection "parsely_bot_traffic".
2017-12-19 18:29:02,884: On parsely_bot_traffic: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:29:02,904: SQL status: SELECT in 0.02 seconds
2017-12-19 18:29:02,906: Using redshift connection "parsely_bot_traffic".
2017-12-19 18:29:02,906: On parsely_bot_traffic: BEGIN
2017-12-19 18:29:02,908: SQL status: BEGIN in 0.00 seconds
2017-12-19 18:29:02,908: Using redshift connection "parsely_bot_traffic".
2017-12-19 18:29:02,908: On parsely_bot_traffic: create temporary table "parsely_bot_traffic__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          --
-- 1 row per null action event



with bot_traffic as (

    select * from "blog_dbt_dev"."parsely_all_events"
    where ua_browser = 'Googlebot' --to be updated to flag_is_bot_traffic

)


select

    -- metrics and counter fields
    1 as bot_traffic_counter,
    -- derived fields
    customer_apikey,
    pageview_post_id,
    -- standard fields
    action	,
    apikey	,
    campaign_id	,
    display,
    display_avail_height	,
    display_avail_width	,
    display_pixel_depth	,
    display_total_height	,
    display_total_width	,
    engaged_time_inc,
    event_id	,
    extra_data,
    flags_is_amp	,
    ip_city	,
    ip_continent	,
    ip_country	,
    ip_lat::FLOAT8	,
    ip_lon	,
    ip_postal	,
    ip_subdivision	,
    ip_timezone	,
    ip_market_name	,
    ip_market_nielsen	,
    ip_market_doubleclick	,
    metadata	,
    metadata_authors	,
    metadata_canonical_url	,
    metadata_custom_metadata	,
    metadata_duration	,
    metadata_data_source	,
    metadata_full_content_word_count	,
    metadata_image_url	,
    metadata_page_type	,
    metadata_post_id	,
    metadata_pub_date_tmsp	,
    metadata_save_date_tmsp	,
    metadata_section	,
    metadata_share_urls	,
    metadata_tags	,
    metadata_thumb_url	,
    metadata_title	,
    metadata_urls	,
    ref_category	,
    ref_clean	,
    ref_domain	,
    ref_fragment	,
    ref_netloc	,
    ref_params	,
    ref_path	,
    ref_query	,
    ref_scheme	,
    referrer	,
    session	,
    session_id	,
    session_initial_referrer	,
    session_initial_url	,
    session_last_session_timestamp	,
    session_timestamp	,
    slot	,
    sref_category	,
    sref_clean	,
    sref_domain	,
    sref_fragment	,
    sref_netloc	,
    sref_params	,
    sref_path	,
    sref_query	,
    sref_scheme	,
    surl_clean	,
    surl_domain	,
    surl_fragment	,
    surl_netloc	,
    surl_params	,
    surl_path	,
    surl_query	,
    surl_scheme	,
    timestamp_info	,
    timestamp_info_nginx_ms	,
    timestamp_info_override_ms	,
    timestamp_info_pixel_ms	,
    ts_action	,
    ts_session_current	,
    ts_session_last	,
    ua_browser	,
    ua_browserversion	,
    ua_device	,
    ua_devicebrand	,
    ua_devicemodel	,
    ua_devicetouchcapable	,
    ua_devicetype	,
    ua_os	,
    ua_osversion	,
    url	,
    url_clean	,
    url_domain	,
    url_fragment	,
    url_netloc	,
    url_params	,
    url_path	,
    url_query	,
    url_scheme	,
    utm_campaign	,
    utm_medium	,
    utm_source	,
    utm_term	,
    utm_content	,
    user_agent	,
    version	,
    visitor	,
    visitor_ip	,
    visitor_network_id	,
    visitor_site_id
  from bot_traffic
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-19 18:29:07,477: SQL status: SELECT in 4.57 seconds
2017-12-19 18:29:07,478: Using redshift connection "parsely_bot_traffic".
2017-12-19 18:29:07,478: On parsely_bot_traffic: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_bot_traffic__dbt_incremental_tmp'
2017-12-19 18:29:07,694: SQL status: SELECT in 0.22 seconds
2017-12-19 18:29:07,694: Using redshift connection "parsely_bot_traffic".
2017-12-19 18:29:07,694: On parsely_bot_traffic: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_bot_traffic' AND table_schema = 'blog_dbt_dev'
2017-12-19 18:29:07,806: SQL status: SELECT in 0.11 seconds
2017-12-19 18:29:07,807: Using redshift connection "parsely_bot_traffic".
2017-12-19 18:29:07,807: On parsely_bot_traffic: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_bot_traffic' AND table_schema = 'blog_dbt_dev'
2017-12-19 18:29:07,917: SQL status: SELECT in 0.11 seconds
2017-12-19 18:29:07,920: Writing runtime SQL for node "model.parsely.parsely_bot_traffic"
2017-12-19 18:29:07,921: Using redshift connection "parsely_bot_traffic".
2017-12-19 18:29:07,921: On parsely_bot_traffic: 
       

       delete
  from "blog_dbt_dev"."parsely_bot_traffic"
  where (event_id) in (
    select (event_id)
    from "parsely_bot_traffic__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_bot_traffic" ("visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "bot_traffic_counter", "ip_lon", "ip_lat", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "pageview_post_id", "customer_apikey", "ts_session_last", "ts_session_current", "ts_action")
       (
         select "visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "bot_traffic_counter", "ip_lon", "ip_lat", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "pageview_post_id", "customer_apikey", "ts_session_last", "ts_session_current", "ts_action"
         from "parsely_bot_traffic__dbt_incremental_tmp"
       );
     
2017-12-19 18:29:08,242: SQL status: INSERT 0 4 in 0.32 seconds
2017-12-19 18:29:08,243: On parsely_bot_traffic: COMMIT
2017-12-19 18:29:08,243: Using redshift connection "parsely_bot_traffic".
2017-12-19 18:29:08,243: On parsely_bot_traffic: COMMIT
2017-12-19 18:29:09,974: SQL status: COMMIT in 1.73 seconds
2017-12-19 18:29:09,974: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc9a281190>], 'label': '38baff82-f50c-4aaf-95f2-3319ac6c0773'}
2017-12-19 18:29:10,000: 18:29:09 | 4 of 25 OK created incremental model blog_dbt_dev.parsely_bot_traffic [INSERT 0 4 in 7.12s]
2017-12-19 18:29:10,000: 18:29:09 | 5 of 25 START incremental model blog_dbt_dev.parsely_custom_events... [RUN]
2017-12-19 18:29:10,000: Compiling model.parsely.parsely_custom_events
2017-12-19 18:29:10,008: Writing injected SQL for node "model.parsely.parsely_custom_events"
2017-12-19 18:29:10,009: Acquiring new redshift connection "parsely_custom_events".
2017-12-19 18:29:10,010: Re-using an available connection from the pool.
2017-12-19 18:29:10,010: Using redshift connection "parsely_custom_events".
2017-12-19 18:29:10,010: On parsely_custom_events: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:29:10,031: SQL status: SELECT in 0.02 seconds
2017-12-19 18:29:10,031: Using redshift connection "parsely_custom_events".
2017-12-19 18:29:10,031: On parsely_custom_events: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:29:10,052: SQL status: SELECT in 0.02 seconds
2017-12-19 18:29:10,054: Using redshift connection "parsely_custom_events".
2017-12-19 18:29:10,054: On parsely_custom_events: BEGIN
2017-12-19 18:29:10,056: SQL status: BEGIN in 0.00 seconds
2017-12-19 18:29:10,056: Using redshift connection "parsely_custom_events".
2017-12-19 18:29:10,056: On parsely_custom_events: create temporary table "parsely_custom_events__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          -- 1 row per custom event

-- 1 row per pageview
-- sum engaged time for all heartbeats
-- metrics: pageviews, engaged time



with custom_events as (

    select * from "blog_dbt_dev"."parsely_all_events"
    where action not in ('pageview','heartbeat','videostart','vheartbeat') and action is not null

),

-- derived fields
custom_publish_read_time_xf as (
    select
        event_id,
        (TIMESTAMP 'epoch'
          + left(metadata_pub_date_tmsp,10)::bigint
          * INTERVAL '1 Second ') as publish_time,
        (TIMESTAMP 'epoch'
          + left(timestamp_info_nginx_ms,10)::bigint
          * INTERVAL '1 Second ') as event_time

    from custom_events

)


select

    -- metrics and counter fields
    1 as custom_event_counter,
    -- derived fields
    datediff(hour, publish_time, event_time) as hours_since_publish,
    datediff(day, publish_time, event_time) as days_since_publish,
    datediff(week, publish_time, event_time) as weeks_since_publish,
    publish_time,
    event_time,
    customer_apikey,
    pageview_post_id,
    -- standard fields
    action	,
    apikey	,
    campaign_id	,
    display,
    display_avail_height	,
    display_avail_width	,
    display_pixel_depth	,
    display_total_height	,
    display_total_width	,
    engaged_time_inc,
    event_id	,
    extra_data,
    flags_is_amp	,
    ip_city	,
    ip_continent	,
    ip_country	,
    ip_lat::FLOAT8	,
    ip_lon	,
    ip_postal	,
    ip_subdivision	,
    ip_timezone	,
    ip_market_name	,
    ip_market_nielsen	,
    ip_market_doubleclick	,
    metadata	,
    metadata_authors	,
    metadata_canonical_url	,
    metadata_custom_metadata	,
    metadata_duration	,
    metadata_data_source	,
    metadata_full_content_word_count	,
    metadata_image_url	,
    metadata_page_type	,
    metadata_post_id	,
    metadata_pub_date_tmsp	,
    metadata_save_date_tmsp	,
    metadata_section	,
    metadata_share_urls	,
    metadata_tags	,
    metadata_thumb_url	,
    metadata_title	,
    metadata_urls	,
    ref_category	,
    ref_clean	,
    ref_domain	,
    ref_fragment	,
    ref_netloc	,
    ref_params	,
    ref_path	,
    ref_query	,
    ref_scheme	,
    referrer	,
    session	,
    session_id	,
    session_initial_referrer	,
    session_initial_url	,
    session_last_session_timestamp	,
    session_timestamp	,
    slot	,
    sref_category	,
    sref_clean	,
    sref_domain	,
    sref_fragment	,
    sref_netloc	,
    sref_params	,
    sref_path	,
    sref_query	,
    sref_scheme	,
    surl_clean	,
    surl_domain	,
    surl_fragment	,
    surl_netloc	,
    surl_params	,
    surl_path	,
    surl_query	,
    surl_scheme	,
    timestamp_info	,
    timestamp_info_nginx_ms	,
    timestamp_info_override_ms	,
    timestamp_info_pixel_ms	,
    ts_action	,
    ts_session_current	,
    ts_session_last	,
    ua_browser	,
    ua_browserversion	,
    ua_device	,
    ua_devicebrand	,
    ua_devicemodel	,
    ua_devicetouchcapable	,
    ua_devicetype	,
    ua_os	,
    ua_osversion	,
    url	,
    url_clean	,
    url_domain	,
    url_fragment	,
    url_netloc	,
    url_params	,
    url_path	,
    url_query	,
    url_scheme	,
    utm_campaign	,
    utm_medium	,
    utm_source	,
    utm_term	,
    utm_content	,
    user_agent	,
    version	,
    visitor	,
    visitor_ip	,
    visitor_network_id	,
    visitor_site_id
  from custom_events
  left join custom_publish_read_time_xf using (event_id)
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-19 18:29:14,726: SQL status: SELECT in 4.67 seconds
2017-12-19 18:29:14,726: Using redshift connection "parsely_custom_events".
2017-12-19 18:29:14,726: On parsely_custom_events: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_custom_events__dbt_incremental_tmp'
2017-12-19 18:29:14,886: SQL status: SELECT in 0.16 seconds
2017-12-19 18:29:14,886: Using redshift connection "parsely_custom_events".
2017-12-19 18:29:14,886: On parsely_custom_events: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_custom_events' AND table_schema = 'blog_dbt_dev'
2017-12-19 18:29:14,993: SQL status: SELECT in 0.11 seconds
2017-12-19 18:29:14,994: Using redshift connection "parsely_custom_events".
2017-12-19 18:29:14,994: On parsely_custom_events: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_custom_events' AND table_schema = 'blog_dbt_dev'
2017-12-19 18:29:15,099: SQL status: SELECT in 0.11 seconds
2017-12-19 18:29:15,102: Writing runtime SQL for node "model.parsely.parsely_custom_events"
2017-12-19 18:29:15,103: Using redshift connection "parsely_custom_events".
2017-12-19 18:29:15,103: On parsely_custom_events: 
       

       delete
  from "blog_dbt_dev"."parsely_custom_events"
  where (event_id) in (
    select (event_id)
    from "parsely_custom_events__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_custom_events" ("visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "weeks_since_publish", "days_since_publish", "hours_since_publish", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "custom_event_counter", "ip_lon", "ip_lat", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "pageview_post_id", "customer_apikey", "ts_session_last", "ts_session_current", "ts_action", "event_time", "publish_time")
       (
         select "visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "weeks_since_publish", "days_since_publish", "hours_since_publish", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "custom_event_counter", "ip_lon", "ip_lat", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "pageview_post_id", "customer_apikey", "ts_session_last", "ts_session_current", "ts_action", "event_time", "publish_time"
         from "parsely_custom_events__dbt_incremental_tmp"
       );
     
2017-12-19 18:29:15,345: SQL status: INSERT 0 0 in 0.24 seconds
2017-12-19 18:29:15,345: On parsely_custom_events: COMMIT
2017-12-19 18:29:15,346: Using redshift connection "parsely_custom_events".
2017-12-19 18:29:15,346: On parsely_custom_events: COMMIT
2017-12-19 18:29:15,583: SQL status: COMMIT in 0.24 seconds
2017-12-19 18:29:15,584: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc9a281190>], 'label': '38baff82-f50c-4aaf-95f2-3319ac6c0773'}
2017-12-19 18:29:15,621: 18:29:15 | 5 of 25 OK created incremental model blog_dbt_dev.parsely_custom_events [INSERT 0 0 in 5.58s]
2017-12-19 18:29:15,622: 18:29:15 | 6 of 25 START incremental model blog_dbt_dev.parsely_errors.......... [RUN]
2017-12-19 18:29:15,622: Compiling model.parsely.parsely_errors
2017-12-19 18:29:15,629: Writing injected SQL for node "model.parsely.parsely_errors"
2017-12-19 18:29:15,630: Acquiring new redshift connection "parsely_errors".
2017-12-19 18:29:15,630: Re-using an available connection from the pool.
2017-12-19 18:29:15,630: Using redshift connection "parsely_errors".
2017-12-19 18:29:15,630: On parsely_errors: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:29:15,651: SQL status: SELECT in 0.02 seconds
2017-12-19 18:29:15,652: Using redshift connection "parsely_errors".
2017-12-19 18:29:15,652: On parsely_errors: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:29:15,671: SQL status: SELECT in 0.02 seconds
2017-12-19 18:29:15,672: Using redshift connection "parsely_errors".
2017-12-19 18:29:15,672: On parsely_errors: BEGIN
2017-12-19 18:29:15,674: SQL status: BEGIN in 0.00 seconds
2017-12-19 18:29:15,674: Using redshift connection "parsely_errors".
2017-12-19 18:29:15,674: On parsely_errors: create temporary table "parsely_errors__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          -- 1 row per null action event



with error_events as (

    select * from "blog_dbt_dev"."parsely_all_events"
    where action is null

)


select

    -- metrics and counter fields
    1 as error_event_counter,
    -- derived fields
    customer_apikey,
    pageview_post_id,
    -- standard fields
    action	,
    apikey	,
    campaign_id	,
    display,
    display_avail_height	,
    display_avail_width	,
    display_pixel_depth	,
    display_total_height	,
    display_total_width	,
    engaged_time_inc,
    event_id	,
    extra_data,
    flags_is_amp	,
    ip_city	,
    ip_continent	,
    ip_country	,
    ip_lat::FLOAT8	,
    ip_lon	,
    ip_postal	,
    ip_subdivision	,
    ip_timezone	,
    ip_market_name	,
    ip_market_nielsen	,
    ip_market_doubleclick	,
    metadata	,
    metadata_authors	,
    metadata_canonical_url	,
    metadata_custom_metadata	,
    metadata_duration	,
    metadata_data_source	,
    metadata_full_content_word_count	,
    metadata_image_url	,
    metadata_page_type	,
    metadata_post_id	,
    metadata_pub_date_tmsp	,
    metadata_save_date_tmsp	,
    metadata_section	,
    metadata_share_urls	,
    metadata_tags	,
    metadata_thumb_url	,
    metadata_title	,
    metadata_urls	,
    ref_category	,
    ref_clean	,
    ref_domain	,
    ref_fragment	,
    ref_netloc	,
    ref_params	,
    ref_path	,
    ref_query	,
    ref_scheme	,
    referrer	,
    session	,
    session_id	,
    session_initial_referrer	,
    session_initial_url	,
    session_last_session_timestamp	,
    session_timestamp	,
    slot	,
    sref_category	,
    sref_clean	,
    sref_domain	,
    sref_fragment	,
    sref_netloc	,
    sref_params	,
    sref_path	,
    sref_query	,
    sref_scheme	,
    surl_clean	,
    surl_domain	,
    surl_fragment	,
    surl_netloc	,
    surl_params	,
    surl_path	,
    surl_query	,
    surl_scheme	,
    timestamp_info	,
    timestamp_info_nginx_ms	,
    timestamp_info_override_ms	,
    timestamp_info_pixel_ms	,
    ts_action	,
    ts_session_current	,
    ts_session_last	,
    ua_browser	,
    ua_browserversion	,
    ua_device	,
    ua_devicebrand	,
    ua_devicemodel	,
    ua_devicetouchcapable	,
    ua_devicetype	,
    ua_os	,
    ua_osversion	,
    url	,
    url_clean	,
    url_domain	,
    url_fragment	,
    url_netloc	,
    url_params	,
    url_path	,
    url_query	,
    url_scheme	,
    utm_campaign	,
    utm_medium	,
    utm_source	,
    utm_term	,
    utm_content	,
    user_agent	,
    version	,
    visitor	,
    visitor_ip	,
    visitor_network_id	,
    visitor_site_id
  from error_events
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-19 18:29:20,978: SQL status: SELECT in 5.30 seconds
2017-12-19 18:29:20,978: Using redshift connection "parsely_errors".
2017-12-19 18:29:20,978: On parsely_errors: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_errors__dbt_incremental_tmp'
2017-12-19 18:29:21,176: SQL status: SELECT in 0.20 seconds
2017-12-19 18:29:21,176: Using redshift connection "parsely_errors".
2017-12-19 18:29:21,176: On parsely_errors: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_errors' AND table_schema = 'blog_dbt_dev'
2017-12-19 18:29:21,282: SQL status: SELECT in 0.11 seconds
2017-12-19 18:29:21,283: Using redshift connection "parsely_errors".
2017-12-19 18:29:21,283: On parsely_errors: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_errors' AND table_schema = 'blog_dbt_dev'
2017-12-19 18:29:21,390: SQL status: SELECT in 0.11 seconds
2017-12-19 18:29:21,393: Writing runtime SQL for node "model.parsely.parsely_errors"
2017-12-19 18:29:21,394: Using redshift connection "parsely_errors".
2017-12-19 18:29:21,394: On parsely_errors: 
       

       delete
  from "blog_dbt_dev"."parsely_errors"
  where (event_id) in (
    select (event_id)
    from "parsely_errors__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_errors" ("visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "error_event_counter", "ip_lon", "ip_lat", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "pageview_post_id", "customer_apikey", "ts_session_last", "ts_session_current", "ts_action")
       (
         select "visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "error_event_counter", "ip_lon", "ip_lat", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "pageview_post_id", "customer_apikey", "ts_session_last", "ts_session_current", "ts_action"
         from "parsely_errors__dbt_incremental_tmp"
       );
     
2017-12-19 18:29:21,638: SQL status: INSERT 0 2 in 0.24 seconds
2017-12-19 18:29:21,639: On parsely_errors: COMMIT
2017-12-19 18:29:21,639: Using redshift connection "parsely_errors".
2017-12-19 18:29:21,639: On parsely_errors: COMMIT
2017-12-19 18:29:22,678: SQL status: COMMIT in 1.04 seconds
2017-12-19 18:29:22,678: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc9a281190>], 'label': '38baff82-f50c-4aaf-95f2-3319ac6c0773'}
2017-12-19 18:29:22,707: 18:29:22 | 6 of 25 OK created incremental model blog_dbt_dev.parsely_errors..... [INSERT 0 2 in 7.06s]
2017-12-19 18:29:22,708: 18:29:22 | 7 of 25 START view model blog_dbt_dev.parsely_base_events............ [RUN]
2017-12-19 18:29:22,708: Compiling model.parsely.parsely_base_events
2017-12-19 18:29:22,712: Acquiring new redshift connection "parsely_base_events".
2017-12-19 18:29:22,712: Re-using an available connection from the pool.
2017-12-19 18:29:22,712: Using redshift connection "parsely_base_events".
2017-12-19 18:29:22,712: On parsely_base_events: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:29:22,732: SQL status: SELECT in 0.02 seconds
2017-12-19 18:29:22,736: Writing injected SQL for node "model.parsely.parsely_base_events"
2017-12-19 18:29:22,737: Using redshift connection "parsely_base_events".
2017-12-19 18:29:22,737: On parsely_base_events: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:29:22,757: SQL status: SELECT in 0.02 seconds
2017-12-19 18:29:22,759: Writing runtime SQL for node "model.parsely.parsely_base_events"
2017-12-19 18:29:22,759: Using redshift connection "parsely_base_events".
2017-12-19 18:29:22,759: On parsely_base_events: BEGIN
2017-12-19 18:29:22,761: SQL status: BEGIN in 0.00 seconds
2017-12-19 18:29:22,761: Using redshift connection "parsely_base_events".
2017-12-19 18:29:22,761: On parsely_base_events: create view "blog_dbt_dev"."parsely_base_events__dbt_tmp" as (
    
  select
      *
  from "blog_dbt_dev"."parsely_all_events"
  where action in ('pageview','heartbeat','videostart','vheartbeat')
--  and event_id not in
--    (select event_id from "blog_dbt_dev"."parsely_event_ids")
  and ua_browser <> 'Googlebot'
  --add in logic for custom:excludebottraffic== 'Yes'

  );
2017-12-19 18:29:23,566: SQL status: CREATE VIEW in 0.80 seconds
2017-12-19 18:29:23,567: On parsely_base_events: COMMIT
2017-12-19 18:29:23,567: Using redshift connection "parsely_base_events".
2017-12-19 18:29:23,567: On parsely_base_events: COMMIT
2017-12-19 18:29:24,019: SQL status: COMMIT in 0.45 seconds
2017-12-19 18:29:24,019: Using redshift connection "parsely_base_events".
2017-12-19 18:29:24,019: On parsely_base_events: BEGIN
2017-12-19 18:29:24,021: SQL status: BEGIN in 0.00 seconds
2017-12-19 18:29:24,021: Using redshift connection "parsely_base_events".
2017-12-19 18:29:24,021: On parsely_base_events: drop view if exists "blog_dbt_dev"."parsely_base_events" cascade
2017-12-19 18:29:25,164: SQL status: DROP VIEW in 1.14 seconds
2017-12-19 18:29:25,165: On parsely_base_events: COMMIT
2017-12-19 18:29:25,165: Using redshift connection "parsely_base_events".
2017-12-19 18:29:25,165: On parsely_base_events: COMMIT
2017-12-19 18:29:25,425: SQL status: COMMIT in 0.26 seconds
2017-12-19 18:29:25,425: Using redshift connection "parsely_base_events".
2017-12-19 18:29:25,425: On parsely_base_events: BEGIN
2017-12-19 18:29:25,427: SQL status: BEGIN in 0.00 seconds
2017-12-19 18:29:25,427: Using redshift connection "parsely_base_events".
2017-12-19 18:29:25,427: On parsely_base_events: alter table "blog_dbt_dev"."parsely_base_events__dbt_tmp" rename to "parsely_base_events"
2017-12-19 18:29:25,446: SQL status: ALTER TABLE in 0.02 seconds
2017-12-19 18:29:25,446: On parsely_base_events: COMMIT
2017-12-19 18:29:25,446: Using redshift connection "parsely_base_events".
2017-12-19 18:29:25,446: On parsely_base_events: COMMIT
2017-12-19 18:29:25,733: SQL status: COMMIT in 0.29 seconds
2017-12-19 18:29:25,734: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc9a1f0d90>], 'label': '38baff82-f50c-4aaf-95f2-3319ac6c0773'}
2017-12-19 18:29:25,765: 18:29:25 | 7 of 25 OK created view model blog_dbt_dev.parsely_base_events....... [CREATE VIEW in 3.03s]
2017-12-19 18:29:25,766: 18:29:25 | 8 of 25 START incremental model blog_dbt_dev.parsely_event_ids....... [RUN]
2017-12-19 18:29:25,766: Compiling model.parsely.parsely_event_ids
2017-12-19 18:29:25,771: Writing injected SQL for node "model.parsely.parsely_event_ids"
2017-12-19 18:29:25,772: Acquiring new redshift connection "parsely_event_ids".
2017-12-19 18:29:25,772: Re-using an available connection from the pool.
2017-12-19 18:29:25,773: Using redshift connection "parsely_event_ids".
2017-12-19 18:29:25,773: On parsely_event_ids: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:29:25,793: SQL status: SELECT in 0.02 seconds
2017-12-19 18:29:25,793: Using redshift connection "parsely_event_ids".
2017-12-19 18:29:25,793: On parsely_event_ids: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:29:25,813: SQL status: SELECT in 0.02 seconds
2017-12-19 18:29:25,814: Using redshift connection "parsely_event_ids".
2017-12-19 18:29:25,814: On parsely_event_ids: BEGIN
2017-12-19 18:29:25,816: SQL status: BEGIN in 0.00 seconds
2017-12-19 18:29:25,816: Using redshift connection "parsely_event_ids".
2017-12-19 18:29:25,816: On parsely_event_ids: create temporary table "parsely_event_ids__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          

-- created to track event_ids for duplicate event_ids that do not need to be processed twice
-- how often should this truncate?
select distinct
  event_id
from "blog_dbt_dev"."parsely_base_events"
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-19 18:29:26,340: SQL status: SELECT in 0.52 seconds
2017-12-19 18:29:26,340: Using redshift connection "parsely_event_ids".
2017-12-19 18:29:26,342: On parsely_event_ids: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_event_ids__dbt_incremental_tmp'
2017-12-19 18:29:26,500: SQL status: SELECT in 0.16 seconds
2017-12-19 18:29:26,501: Using redshift connection "parsely_event_ids".
2017-12-19 18:29:26,501: On parsely_event_ids: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_event_ids' AND table_schema = 'blog_dbt_dev'
2017-12-19 18:29:26,603: SQL status: SELECT in 0.10 seconds
2017-12-19 18:29:26,604: Using redshift connection "parsely_event_ids".
2017-12-19 18:29:26,604: On parsely_event_ids: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_event_ids' AND table_schema = 'blog_dbt_dev'
2017-12-19 18:29:26,706: SQL status: SELECT in 0.10 seconds
2017-12-19 18:29:26,707: Writing runtime SQL for node "model.parsely.parsely_event_ids"
2017-12-19 18:29:26,708: Using redshift connection "parsely_event_ids".
2017-12-19 18:29:26,708: On parsely_event_ids: 
       

       delete
  from "blog_dbt_dev"."parsely_event_ids"
  where (event_id) in (
    select (event_id)
    from "parsely_event_ids__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_event_ids" ("event_id")
       (
         select "event_id"
         from "parsely_event_ids__dbt_incremental_tmp"
       );
     
2017-12-19 18:29:28,583: SQL status: INSERT 0 881772 in 1.87 seconds
2017-12-19 18:29:28,583: On parsely_event_ids: COMMIT
2017-12-19 18:29:28,583: Using redshift connection "parsely_event_ids".
2017-12-19 18:29:28,583: On parsely_event_ids: COMMIT
2017-12-19 18:29:29,066: SQL status: COMMIT in 0.48 seconds
2017-12-19 18:29:29,066: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc9a1f0d90>], 'label': '38baff82-f50c-4aaf-95f2-3319ac6c0773'}
2017-12-19 18:29:29,093: 18:29:29 | 8 of 25 OK created incremental model blog_dbt_dev.parsely_event_ids.. [INSERT 0 881772 in 3.30s]
2017-12-19 18:29:29,093: Compiling model.parsely.parsely_parent_pageview_keys
2017-12-19 18:29:29,098: Writing injected SQL for node "model.parsely.parsely_parent_pageview_keys"
2017-12-19 18:29:29,099: 18:29:29 | 9 of 25 START incremental model blog_dbt_dev.parsely_post_content.... [RUN]
2017-12-19 18:29:29,099: Compiling model.parsely.parsely_post_content
2017-12-19 18:29:29,106: Writing injected SQL for node "model.parsely.parsely_post_content"
2017-12-19 18:29:29,107: Acquiring new redshift connection "parsely_post_content".
2017-12-19 18:29:29,107: Re-using an available connection from the pool.
2017-12-19 18:29:29,107: Using redshift connection "parsely_post_content".
2017-12-19 18:29:29,107: On parsely_post_content: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:29:29,128: SQL status: SELECT in 0.02 seconds
2017-12-19 18:29:29,128: Using redshift connection "parsely_post_content".
2017-12-19 18:29:29,128: On parsely_post_content: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:29:29,147: SQL status: SELECT in 0.02 seconds
2017-12-19 18:29:29,149: Using redshift connection "parsely_post_content".
2017-12-19 18:29:29,149: On parsely_post_content: BEGIN
2017-12-19 18:29:29,151: SQL status: BEGIN in 0.00 seconds
2017-12-19 18:29:29,151: Using redshift connection "parsely_post_content".
2017-12-19 18:29:29,151: On parsely_post_content: create temporary table "parsely_post_content__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          -- 1 row per content with most recent metdata



with most_recent_incoming_posts as (
  select
    pageview_post_id,
    max(ts_action) as ts_action
  from "blog_dbt_dev"."parsely_base_events"
  group by pageview_post_id
),

dedupe as (
  select
    pageview_post_id,
    metadata	,
    metadata_authors	,
    metadata_canonical_url	,
    metadata_custom_metadata	,
    metadata_duration	,
    metadata_data_source	,
    metadata_full_content_word_count	,
    metadata_image_url	,
    metadata_page_type	,
    metadata_post_id	,
    metadata_pub_date_tmsp	,
    metadata_save_date_tmsp	,
    metadata_section	,
    metadata_share_urls	,
    metadata_tags	,
    metadata_thumb_url	,
    metadata_title	,
    metadata_urls	,
    url,
    case
     when metadata_full_content_word_count >= 4000 then '4,000 or Above'
     when metadata_full_content_word_count >= 3000 then '3,000 - 3,999'
     when metadata_full_content_word_count >= 2000 then '2,000 - 2,999'
     when metadata_full_content_word_count >= 1000 then '1,000 - 1,999'
     when metadata_full_content_word_count >= 500 then '500 - 999'
     when metadata_full_content_word_count >= 100 then '100 - 499'
     else '< 100' end as word_count_buckets,
    row_number() over (partition by pageview_post_id order by ts_action) as n
  from "blog_dbt_dev"."parsely_base_events"
  inner join most_recent_incoming_posts using (pageview_post_id, ts_action)
)

select
  *
from dedupe
where n=1
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-19 18:29:30,738: SQL status: SELECT in 1.59 seconds
2017-12-19 18:29:30,738: Using redshift connection "parsely_post_content".
2017-12-19 18:29:30,738: On parsely_post_content: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_post_content__dbt_incremental_tmp'
2017-12-19 18:29:30,959: SQL status: SELECT in 0.22 seconds
2017-12-19 18:29:30,959: Using redshift connection "parsely_post_content".
2017-12-19 18:29:30,959: On parsely_post_content: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_post_content' AND table_schema = 'blog_dbt_dev'
2017-12-19 18:29:31,062: SQL status: SELECT in 0.10 seconds
2017-12-19 18:29:31,062: Using redshift connection "parsely_post_content".
2017-12-19 18:29:31,062: On parsely_post_content: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_post_content' AND table_schema = 'blog_dbt_dev'
2017-12-19 18:29:31,164: SQL status: SELECT in 0.10 seconds
2017-12-19 18:29:31,166: Writing runtime SQL for node "model.parsely.parsely_post_content"
2017-12-19 18:29:31,166: Using redshift connection "parsely_post_content".
2017-12-19 18:29:31,166: On parsely_post_content: 
       

       delete
  from "blog_dbt_dev"."parsely_post_content"
  where (pageview_post_id) in (
    select (pageview_post_id)
    from "parsely_post_content__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_post_content" ("metadata", "n", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "metadata_full_content_word_count", "metadata_duration", "word_count_buckets", "url", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "pageview_post_id")
       (
         select "metadata", "n", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "metadata_full_content_word_count", "metadata_duration", "word_count_buckets", "url", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "pageview_post_id"
         from "parsely_post_content__dbt_incremental_tmp"
       );
     
2017-12-19 18:29:35,286: SQL status: INSERT 0 870 in 4.12 seconds
2017-12-19 18:29:35,286: On parsely_post_content: COMMIT
2017-12-19 18:29:35,286: Using redshift connection "parsely_post_content".
2017-12-19 18:29:35,286: On parsely_post_content: COMMIT
2017-12-19 18:29:35,854: SQL status: COMMIT in 0.57 seconds
2017-12-19 18:29:35,855: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc9a1e2610>], 'label': '38baff82-f50c-4aaf-95f2-3319ac6c0773'}
2017-12-19 18:29:35,885: 18:29:35 | 9 of 25 OK created incremental model blog_dbt_dev.parsely_post_content [INSERT 0 870 in 6.76s]
2017-12-19 18:29:35,885: 18:29:35 | 10 of 25 START incremental model blog_dbt_dev.parsely_video_content.. [RUN]
2017-12-19 18:29:35,886: Compiling model.parsely.parsely_video_content
2017-12-19 18:29:35,891: Writing injected SQL for node "model.parsely.parsely_video_content"
2017-12-19 18:29:35,893: Acquiring new redshift connection "parsely_video_content".
2017-12-19 18:29:35,893: Re-using an available connection from the pool.
2017-12-19 18:29:35,893: Using redshift connection "parsely_video_content".
2017-12-19 18:29:35,893: On parsely_video_content: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:29:35,914: SQL status: SELECT in 0.02 seconds
2017-12-19 18:29:35,914: Using redshift connection "parsely_video_content".
2017-12-19 18:29:35,914: On parsely_video_content: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:29:35,933: SQL status: SELECT in 0.02 seconds
2017-12-19 18:29:35,934: Using redshift connection "parsely_video_content".
2017-12-19 18:29:35,934: On parsely_video_content: BEGIN
2017-12-19 18:29:35,936: SQL status: BEGIN in 0.00 seconds
2017-12-19 18:29:35,936: Using redshift connection "parsely_video_content".
2017-12-19 18:29:35,936: On parsely_video_content: create temporary table "parsely_video_content__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          -- 1 row per content with most recent metdata



with most_recent_incoming_videos as (
  select
    metadata_canonical_url,
    max(ts_action) as ts_action
  from "blog_dbt_dev"."parsely_base_events"
  group by metadata_canonical_url
),

dedupe as (
  select
    metadata_canonical_url,
    metadata	,
    metadata_authors	,
    metadata_custom_metadata	,
    metadata_duration	,
    metadata_data_source	,
    metadata_full_content_word_count	,
    metadata_image_url	,
    metadata_page_type	,
    metadata_post_id	,
    metadata_pub_date_tmsp	,
    metadata_save_date_tmsp	,
    metadata_section	,
    metadata_share_urls	,
    metadata_tags	,
    metadata_thumb_url	,
    metadata_title	,
    metadata_urls	,
    url,
    row_number() over (partition by metadata_canonical_url order by ts_action) as n
  from "blog_dbt_dev"."parsely_base_events"
  inner join most_recent_incoming_videos using (metadata_canonical_url, ts_action)
)

select
  *
from dedupe
where n  = 1
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-19 18:29:37,694: SQL status: SELECT in 1.76 seconds
2017-12-19 18:29:37,694: Using redshift connection "parsely_video_content".
2017-12-19 18:29:37,694: On parsely_video_content: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_video_content__dbt_incremental_tmp'
2017-12-19 18:29:37,896: SQL status: SELECT in 0.20 seconds
2017-12-19 18:29:37,896: Using redshift connection "parsely_video_content".
2017-12-19 18:29:37,896: On parsely_video_content: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_video_content' AND table_schema = 'blog_dbt_dev'
2017-12-19 18:29:38,004: SQL status: SELECT in 0.11 seconds
2017-12-19 18:29:38,005: Using redshift connection "parsely_video_content".
2017-12-19 18:29:38,005: On parsely_video_content: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_video_content' AND table_schema = 'blog_dbt_dev'
2017-12-19 18:29:38,110: SQL status: SELECT in 0.11 seconds
2017-12-19 18:29:38,111: Writing runtime SQL for node "model.parsely.parsely_video_content"
2017-12-19 18:29:38,112: Using redshift connection "parsely_video_content".
2017-12-19 18:29:38,112: On parsely_video_content: 
       

       delete
  from "blog_dbt_dev"."parsely_video_content"
  where (metadata_canonical_url) in (
    select (metadata_canonical_url)
    from "parsely_video_content__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_video_content" ("metadata", "n", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "metadata_full_content_word_count", "metadata_duration", "url", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_authors", "metadata_canonical_url")
       (
         select "metadata", "n", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "metadata_full_content_word_count", "metadata_duration", "url", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_authors", "metadata_canonical_url"
         from "parsely_video_content__dbt_incremental_tmp"
       );
     
2017-12-19 18:29:42,355: SQL status: INSERT 0 464 in 4.24 seconds
2017-12-19 18:29:42,356: On parsely_video_content: COMMIT
2017-12-19 18:29:42,356: Using redshift connection "parsely_video_content".
2017-12-19 18:29:42,356: On parsely_video_content: COMMIT
2017-12-19 18:29:43,010: SQL status: COMMIT in 0.65 seconds
2017-12-19 18:29:43,010: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc9a1e2610>], 'label': '38baff82-f50c-4aaf-95f2-3319ac6c0773'}
2017-12-19 18:29:43,035: 18:29:43 | 10 of 25 OK created incremental model blog_dbt_dev.parsely_video_content [INSERT 0 464 in 7.12s]
2017-12-19 18:29:43,035: 18:29:43 | 11 of 25 START view model blog_dbt_dev.parsely_entry_exit_urls....... [RUN]
2017-12-19 18:29:43,036: Compiling model.parsely.parsely_entry_exit_urls
2017-12-19 18:29:43,044: Writing injected SQL for node "model.parsely.parsely_entry_exit_urls"
2017-12-19 18:29:43,045: Acquiring new redshift connection "parsely_entry_exit_urls".
2017-12-19 18:29:43,045: Re-using an available connection from the pool.
2017-12-19 18:29:43,045: Using redshift connection "parsely_entry_exit_urls".
2017-12-19 18:29:43,045: On parsely_entry_exit_urls: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:29:43,065: SQL status: SELECT in 0.02 seconds
2017-12-19 18:29:43,067: Writing runtime SQL for node "model.parsely.parsely_entry_exit_urls"
2017-12-19 18:29:43,068: Using redshift connection "parsely_entry_exit_urls".
2017-12-19 18:29:43,068: On parsely_entry_exit_urls: BEGIN
2017-12-19 18:29:43,070: SQL status: BEGIN in 0.00 seconds
2017-12-19 18:29:43,070: Using redshift connection "parsely_entry_exit_urls".
2017-12-19 18:29:43,070: On parsely_entry_exit_urls: create view "blog_dbt_dev"."parsely_entry_exit_urls__dbt_tmp" as (
    with sessions_time_xf as (
  select
      parsely_session_id,
      max(ts_action) as last_ts_action,
      min(ts_action) as first_ts_action
  from "blog_dbt_dev"."parsely_base_events"
  group by parsely_session_id
),

entry_url as (
  SELECT
    st.parsely_session_id,
    url         as entry_url,
    url_clean   as entry_url_clean,
    url_domain  as entry_url_domain,
    url_fragment as entry_url_fragment,
    url_netloc as entry_url_netloc,
    url_params as entry_url_params,
    url_path as entry_url_path,
    url_query as entry_url_query,
    url_scheme as entry_url_scheme,
    ts_action as entry_ts_action
  from "blog_dbt_dev"."parsely_base_events" be
  inner join sessions_time_xf st
    on be.parsely_session_id = st.parsely_session_id
    and be.ts_action = st.first_ts_action
),



exit_url as (
  SELECT
    st.parsely_session_id,
    url         as exit_url,
    url_clean   as exit_url_clean,
    url_domain  as exit_url_domain,
    url_fragment as exit_url_fragment,
    url_netloc as exit_url_netloc,
    url_params as exit_url_params,
    url_path as exit_url_path,
    url_query as exit_url_query,
    url_scheme as exit_url_scheme,
    ts_action as exit_ts_action
  from "blog_dbt_dev"."parsely_base_events" be
  inner join sessions_time_xf st
    on be.parsely_session_id = st.parsely_session_id
    and be.ts_action = st.last_ts_action

)

SELECT
  *
from sessions_time_xf
join entry_url using (parsely_session_id)
join exit_url using (parsely_session_id)
  );
2017-12-19 18:29:43,656: SQL status: CREATE VIEW in 0.59 seconds
2017-12-19 18:29:43,657: Using redshift connection "parsely_entry_exit_urls".
2017-12-19 18:29:43,657: On parsely_entry_exit_urls: alter table "blog_dbt_dev"."parsely_entry_exit_urls__dbt_tmp" rename to "parsely_entry_exit_urls"
2017-12-19 18:29:43,660: SQL status: ALTER TABLE in 0.00 seconds
2017-12-19 18:29:43,660: On parsely_entry_exit_urls: COMMIT
2017-12-19 18:29:43,660: Using redshift connection "parsely_entry_exit_urls".
2017-12-19 18:29:43,660: On parsely_entry_exit_urls: COMMIT
2017-12-19 18:29:44,201: SQL status: COMMIT in 0.54 seconds
2017-12-19 18:29:44,202: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc9a1f0090>], 'label': '38baff82-f50c-4aaf-95f2-3319ac6c0773'}
2017-12-19 18:29:44,229: 18:29:44 | 11 of 25 OK created view model blog_dbt_dev.parsely_entry_exit_urls.. [CREATE VIEW in 1.17s]
2017-12-19 18:29:44,230: 18:29:44 | 12 of 25 START view model blog_dbt_dev.parsely_incoming_videoviews... [RUN]
2017-12-19 18:29:44,230: Compiling model.parsely.parsely_incoming_videoviews
2017-12-19 18:29:44,240: Writing injected SQL for node "model.parsely.parsely_incoming_videoviews"
2017-12-19 18:29:44,241: Acquiring new redshift connection "parsely_incoming_videoviews".
2017-12-19 18:29:44,241: Re-using an available connection from the pool.
2017-12-19 18:29:44,242: Using redshift connection "parsely_incoming_videoviews".
2017-12-19 18:29:44,242: On parsely_incoming_videoviews: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:29:44,262: SQL status: SELECT in 0.02 seconds
2017-12-19 18:29:44,265: Writing runtime SQL for node "model.parsely.parsely_incoming_videoviews"
2017-12-19 18:29:44,266: Using redshift connection "parsely_incoming_videoviews".
2017-12-19 18:29:44,266: On parsely_incoming_videoviews: BEGIN
2017-12-19 18:29:44,268: SQL status: BEGIN in 0.00 seconds
2017-12-19 18:29:44,268: Using redshift connection "parsely_incoming_videoviews".
2017-12-19 18:29:44,268: On parsely_incoming_videoviews: create view "blog_dbt_dev"."parsely_incoming_videoviews__dbt_tmp" as (
    with incoming_videoviews_aggr as (
  SELECT
    sum(engaged_time_inc) as video_engaged_time,
    sum(videostart_counter) as videoviews,
    case when sum(videostart_counter) = 0 then 0 else
       sum(engaged_time_inc)/sum(videostart_counter) end as avg_video_engaged_time,
    videostart_key
  FROM  "blog_dbt_dev"."parsely_base_events"
  where action in ('videostart','vheartbeat')
  group by videostart_key
),

dedupe_videoviews_sessionized as (
  select
    row_number() over (partition by videostart_key order by ts_action) as n,
    -- derived fields
    customer_apikey,
    pageview_post_id,
    -- event time fields
    DATE_PART('day',ts_session_current) as session_day,
    DATE_PART('quarter',ts_session_current) as session_quarter,
    DATE_PART('month',ts_session_current) as session_month,
    DATE_PART('year',ts_session_current) as session_year,
    DATE_PART('week',ts_session_current) as session_week,
    session_date_id,
    -- keys
    pageview_key,
    videostart_key,
    parsely_session_id,
    utm_id,
    apikey_visitor_id,
    -- standard fields
    apikey,
    campaign_id,
    display,
    display_avail_height,
    display_avail_width,
    display_pixel_depth,
    display_total_height,
    display_total_width,
    extra_data,
    flags_is_amp,
    ip_city,
    ip_continent,
    ip_country,
    ip_lat,
    ip_lon,
    ip_postal,
    ip_subdivision,
    ip_timezone,
    ip_market_name,
    ip_market_nielsen,
    ip_market_doubleclick,
    metadata,
    metadata_authors,
    metadata_canonical_url,
    metadata_custom_metadata,
    metadata_duration,
    metadata_data_source,
    metadata_full_content_word_count,
    metadata_image_url,
    metadata_page_type,
    metadata_post_id,
    metadata_pub_date_tmsp,
    metadata_save_date_tmsp,
    metadata_section,
    metadata_share_urls,
    metadata_tags,
    metadata_thumb_url,
    metadata_title,
    metadata_urls,
    ref_category,
    ref_clean,
    ref_domain,
    ref_fragment,
    ref_netloc,
    ref_params,
    ref_path,
    ref_query,
    ref_scheme,
    referrer,
    session,
    session_id,
    session_initial_referrer,
    session_initial_url,
    session_last_session_timestamp,
    session_timestamp,
    slot,
    sref_category,
    sref_clean,
    sref_domain,
    sref_fragment,
    sref_netloc,
    sref_params,
    sref_path,
    sref_query,
    sref_scheme,
    surl_clean,
    surl_domain,
    surl_fragment,
    surl_netloc,
    surl_params,
    surl_path,
    surl_query,
    surl_scheme,
    ts_session_current,
    ts_session_last,
    ua_browser,
    ua_browserversion,
    ua_device,
    ua_devicebrand,
    ua_devicemodel,
    ua_devicetouchcapable,
    ua_devicetype,
    ua_os,
    ua_osversion,
    url,
    url_clean,
    url_domain,
    url_fragment,
    url_netloc,
    url_params,
    url_path,
    url_query,
    url_scheme,
    utm_campaign,
    utm_medium,
    utm_source,
    utm_term,
    utm_content,
    user_agent,
    version,
    visitor,
    visitor_ip,
    visitor_network_id,
    visitor_site_id
  from "blog_dbt_dev"."parsely_base_events"
  where action in ('videostart','vheartbeat')
)

select
    video_engaged_time,
    videoviews,
    avg_video_engaged_time,
    -- derived fields
    customer_apikey,
    pageview_post_id,
    case
      when avg_video_engaged_time > 60 then 'Deep Watch'
      when avg_video_engaged_time > 15 then 'Watch'
      else 'Skim' end as watch_category,
    -- event time fields
    DATE_PART('day',ts_session_current) as session_day,
    DATE_PART('quarter',ts_session_current) as session_quarter,
    DATE_PART('month',ts_session_current) as session_month,
    DATE_PART('year',ts_session_current) as session_year,
    DATE_PART('week',ts_session_current) as session_week,
    session_date_id,
    -- keys
    pageview_key,
    videostart_key,
    parsely_session_id,
    utm_id,
    apikey_visitor_id,
    -- standard fields
    apikey,
    campaign_id,
    display,
    display_avail_height,
    display_avail_width,
    display_pixel_depth,
    display_total_height,
    display_total_width,
    extra_data,
    flags_is_amp,
    ip_city,
    ip_continent,
    ip_country,
    ip_lat,
    ip_lon,
    ip_postal,
    ip_subdivision,
    ip_timezone,
    ip_market_name,
    ip_market_nielsen,
    ip_market_doubleclick,
    metadata,
    metadata_authors,
    metadata_canonical_url,
    metadata_custom_metadata,
    metadata_duration,
    metadata_data_source,
    metadata_full_content_word_count,
    metadata_image_url,
    metadata_page_type,
    metadata_post_id,
    metadata_pub_date_tmsp,
    metadata_save_date_tmsp,
    metadata_section,
    metadata_share_urls,
    metadata_tags,
    metadata_thumb_url,
    metadata_title,
    metadata_urls,
    ref_category,
    ref_clean,
    ref_domain,
    ref_fragment,
    ref_netloc,
    ref_params,
    ref_path,
    ref_query,
    ref_scheme,
    referrer,
    session,
    session_id,
    session_initial_referrer,
    session_initial_url,
    session_last_session_timestamp,
    session_timestamp,
    slot,
    sref_category,
    sref_clean,
    sref_domain,
    sref_fragment,
    sref_netloc,
    sref_params,
    sref_path,
    sref_query,
    sref_scheme,
    surl_clean,
    surl_domain,
    surl_fragment,
    surl_netloc,
    surl_params,
    surl_path,
    surl_query,
    surl_scheme,
    ts_session_current,
    ts_session_last,
    ua_browser,
    ua_browserversion,
    ua_device,
    ua_devicebrand,
    ua_devicemodel,
    ua_devicetouchcapable,
    ua_devicetype,
    ua_os,
    ua_osversion,
    url,
    url_clean,
    url_domain,
    url_fragment,
    url_netloc,
    url_params,
    url_path,
    url_query,
    url_scheme,
    utm_campaign,
    utm_medium,
    utm_source,
    utm_term,
    utm_content,
    user_agent,
    version,
    visitor,
    visitor_ip,
    visitor_network_id,
    visitor_site_id
from dedupe_videoviews_sessionized
left join incoming_videoviews_aggr using (videostart_key)
where n = 1
  );
2017-12-19 18:29:45,042: SQL status: CREATE VIEW in 0.77 seconds
2017-12-19 18:29:45,043: Using redshift connection "parsely_incoming_videoviews".
2017-12-19 18:29:45,043: On parsely_incoming_videoviews: alter table "blog_dbt_dev"."parsely_incoming_videoviews__dbt_tmp" rename to "parsely_incoming_videoviews"
2017-12-19 18:29:45,046: SQL status: ALTER TABLE in 0.00 seconds
2017-12-19 18:29:45,046: On parsely_incoming_videoviews: COMMIT
2017-12-19 18:29:45,046: Using redshift connection "parsely_incoming_videoviews".
2017-12-19 18:29:45,046: On parsely_incoming_videoviews: COMMIT
2017-12-19 18:29:45,368: SQL status: COMMIT in 0.32 seconds
2017-12-19 18:29:45,369: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc9a1e23d0>], 'label': '38baff82-f50c-4aaf-95f2-3319ac6c0773'}
2017-12-19 18:29:45,395: 18:29:45 | 12 of 25 OK created view model blog_dbt_dev.parsely_incoming_videoviews [CREATE VIEW in 1.14s]
2017-12-19 18:29:45,395: 18:29:45 | 13 of 25 START incremental model blog_dbt_dev.parsely_videoviews_sessionized [RUN]
2017-12-19 18:29:45,396: Compiling model.parsely.parsely_videoviews_sessionized
2017-12-19 18:29:45,401: Acquiring new redshift connection "parsely_videoviews_sessionized".
2017-12-19 18:29:45,401: Re-using an available connection from the pool.
2017-12-19 18:29:45,401: Using redshift connection "parsely_videoviews_sessionized".
2017-12-19 18:29:45,401: On parsely_videoviews_sessionized: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:29:45,422: SQL status: SELECT in 0.02 seconds
2017-12-19 18:29:45,426: Writing injected SQL for node "model.parsely.parsely_videoviews_sessionized"
2017-12-19 18:29:45,427: Using redshift connection "parsely_videoviews_sessionized".
2017-12-19 18:29:45,427: On parsely_videoviews_sessionized: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:29:45,447: SQL status: SELECT in 0.02 seconds
2017-12-19 18:29:45,447: Using redshift connection "parsely_videoviews_sessionized".
2017-12-19 18:29:45,447: On parsely_videoviews_sessionized: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:29:45,466: SQL status: SELECT in 0.02 seconds
2017-12-19 18:29:45,468: Using redshift connection "parsely_videoviews_sessionized".
2017-12-19 18:29:45,468: On parsely_videoviews_sessionized: BEGIN
2017-12-19 18:29:45,470: SQL status: BEGIN in 0.00 seconds
2017-12-19 18:29:45,470: Using redshift connection "parsely_videoviews_sessionized".
2017-12-19 18:29:45,470: On parsely_videoviews_sessionized: create temporary table "parsely_videoviews_sessionized__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          

with incoming_videoviews as (

  SELECT
    *
  from "blog_dbt_dev"."parsely_incoming_videoviews"


),




relevant_existing as (

    select
        *
    from "blog_dbt_dev"."parsely_videoviews_sessionized"
    where videostart_key in (select videostart_key from incoming_videoviews)

),

-- left join fields from old data: min_tstamp
unioned as (

    select
      *
    from incoming_videoviews

    union all

    select
      *
    from relevant_existing

),

merged_aggr as (

    select
      sum(video_engaged_time) as engaged_time_unioned,
      sum(videoviews) as videoviews_unioned,
      case when sum(videoviews) = 0 then 0 else
         sum(video_engaged_time)/sum(videoviews) end as avg_video_engaged_time_unioned,
      videostart_key
    from unioned
    group by videostart_key
),

merged as (
    SELECT
    engaged_time_unioned as video_engaged_time,
    videoviews_unioned as videoviews,
    avg_video_engaged_time_unioned as avg_video_engaged_time,
    -- derived fields
    customer_apikey,
    pageview_post_id,
    case
      when avg_video_engaged_time_unioned > 60 then 'Deep Watch'
      when avg_video_engaged_time_unioned > 15 then 'Watch'
      else 'Skim' end as watch_category,
    -- event time fields
    session_day,
    session_quarter,
    session_month,
    session_year,
    session_week,
    session_date_id,
    -- keys
    pageview_key,
    videostart_key,
    parsely_session_id,
    utm_id,
    apikey_visitor_id,
    -- standard fields
    apikey,
    campaign_id,
    display,
    display_avail_height,
    display_avail_width,
    display_pixel_depth,
    display_total_height,
    display_total_width,
    extra_data,
    flags_is_amp,
    ip_city,
    ip_continent,
    ip_country,
    ip_lat,
    ip_lon,
    ip_postal,
    ip_subdivision,
    ip_timezone,
    ip_market_name,
    ip_market_nielsen,
    ip_market_doubleclick,
    metadata,
    metadata_authors,
    metadata_canonical_url,
    metadata_custom_metadata,
    metadata_duration,
    metadata_data_source,
    metadata_full_content_word_count,
    metadata_image_url,
    metadata_page_type,
    metadata_post_id,
    metadata_pub_date_tmsp,
    metadata_save_date_tmsp,
    metadata_section,
    metadata_share_urls,
    metadata_tags,
    metadata_thumb_url,
    metadata_title,
    metadata_urls,
    ref_category,
    ref_clean,
    ref_domain,
    ref_fragment,
    ref_netloc,
    ref_params,
    ref_path,
    ref_query,
    ref_scheme,
    referrer,
    session,
    session_id,
    session_initial_referrer,
    session_initial_url,
    session_last_session_timestamp,
    session_timestamp,
    slot,
    sref_category,
    sref_clean,
    sref_domain,
    sref_fragment,
    sref_netloc,
    sref_params,
    sref_path,
    sref_query,
    sref_scheme,
    surl_clean,
    surl_domain,
    surl_fragment,
    surl_netloc,
    surl_params,
    surl_path,
    surl_query,
    surl_scheme,
    ts_session_current,
    ts_session_last,
    ua_browser,
    ua_browserversion,
    ua_device,
    ua_devicebrand,
    ua_devicemodel,
    ua_devicetouchcapable,
    ua_devicetype,
    ua_os,
    ua_osversion,
    url,
    url_clean,
    url_domain,
    url_fragment,
    url_netloc,
    url_params,
    url_path,
    url_query,
    url_scheme,
    utm_campaign,
    utm_medium,
    utm_source,
    utm_term,
    utm_content,
    user_agent,
    version,
    visitor,
    visitor_ip,
    visitor_network_id,
    visitor_site_id
  from incoming_videoviews
  left join merged_aggr using (videostart_key)
)



select
  *
from merged
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-19 18:29:57,721: SQL status: SELECT in 12.25 seconds
2017-12-19 18:29:57,721: Using redshift connection "parsely_videoviews_sessionized".
2017-12-19 18:29:57,721: On parsely_videoviews_sessionized: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_videoviews_sessionized__dbt_incremental_tmp'
2017-12-19 18:29:57,943: SQL status: SELECT in 0.22 seconds
2017-12-19 18:29:57,943: Using redshift connection "parsely_videoviews_sessionized".
2017-12-19 18:29:57,943: On parsely_videoviews_sessionized: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_videoviews_sessionized' AND table_schema = 'blog_dbt_dev'
2017-12-19 18:29:58,046: SQL status: SELECT in 0.10 seconds
2017-12-19 18:29:58,047: Using redshift connection "parsely_videoviews_sessionized".
2017-12-19 18:29:58,047: On parsely_videoviews_sessionized: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_videoviews_sessionized' AND table_schema = 'blog_dbt_dev'
2017-12-19 18:29:58,150: SQL status: SELECT in 0.10 seconds
2017-12-19 18:29:58,153: Writing runtime SQL for node "model.parsely.parsely_videoviews_sessionized"
2017-12-19 18:29:58,153: Using redshift connection "parsely_videoviews_sessionized".
2017-12-19 18:29:58,153: On parsely_videoviews_sessionized: 
       

       delete
  from "blog_dbt_dev"."parsely_videoviews_sessionized"
  where (videostart_key) in (
    select (videostart_key)
    from "parsely_videoviews_sessionized__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_videoviews_sessionized" ("visitor", "ua_devicetouchcapable", "slot", "session", "metadata", "flags_is_amp", "display", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "avg_video_engaged_time", "videoviews", "video_engaged_time", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "session_date_id", "ip_lon", "ip_lat", "session_week", "session_year", "session_month", "session_quarter", "session_day", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "campaign_id", "apikey", "apikey_visitor_id", "utm_id", "parsely_session_id", "videostart_key", "pageview_key", "watch_category", "pageview_post_id", "customer_apikey", "ts_session_last", "ts_session_current")
       (
         select "visitor", "ua_devicetouchcapable", "slot", "session", "metadata", "flags_is_amp", "display", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "avg_video_engaged_time", "videoviews", "video_engaged_time", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "session_date_id", "ip_lon", "ip_lat", "session_week", "session_year", "session_month", "session_quarter", "session_day", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "campaign_id", "apikey", "apikey_visitor_id", "utm_id", "parsely_session_id", "videostart_key", "pageview_key", "watch_category", "pageview_post_id", "customer_apikey", "ts_session_last", "ts_session_current"
         from "parsely_videoviews_sessionized__dbt_incremental_tmp"
       );
     
2017-12-19 18:30:22,632: SQL status: INSERT 0 141 in 24.48 seconds
2017-12-19 18:30:22,632: On parsely_videoviews_sessionized: COMMIT
2017-12-19 18:30:22,632: Using redshift connection "parsely_videoviews_sessionized".
2017-12-19 18:30:22,632: On parsely_videoviews_sessionized: COMMIT
2017-12-19 18:30:24,225: SQL status: COMMIT in 1.59 seconds
2017-12-19 18:30:24,225: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc9a1f0d90>], 'label': '38baff82-f50c-4aaf-95f2-3319ac6c0773'}
2017-12-19 18:30:24,273: 18:30:24 | 13 of 25 OK created incremental model blog_dbt_dev.parsely_videoviews_sessionized [INSERT 0 141 in 38.83s]
2017-12-19 18:30:24,273: Compiling model.parsely.parsely_parent_videostart_keys
2017-12-19 18:30:24,294: Writing injected SQL for node "model.parsely.parsely_parent_videostart_keys"
2017-12-19 18:30:24,294: 18:30:24 | 14 of 25 START view model blog_dbt_dev.parsely_pageview_hanging_engagedtime [RUN]
2017-12-19 18:30:24,295: Compiling model.parsely.parsely_pageview_hanging_engagedtime
2017-12-19 18:30:24,307: Writing injected SQL for node "model.parsely.parsely_pageview_hanging_engagedtime"
2017-12-19 18:30:24,308: Acquiring new redshift connection "parsely_pageview_hanging_engagedtime".
2017-12-19 18:30:24,308: Re-using an available connection from the pool.
2017-12-19 18:30:24,308: Using redshift connection "parsely_pageview_hanging_engagedtime".
2017-12-19 18:30:24,308: On parsely_pageview_hanging_engagedtime: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:30:24,328: SQL status: SELECT in 0.02 seconds
2017-12-19 18:30:24,330: Writing runtime SQL for node "model.parsely.parsely_pageview_hanging_engagedtime"
2017-12-19 18:30:24,331: Using redshift connection "parsely_pageview_hanging_engagedtime".
2017-12-19 18:30:24,331: On parsely_pageview_hanging_engagedtime: BEGIN
2017-12-19 18:30:24,333: SQL status: BEGIN in 0.00 seconds
2017-12-19 18:30:24,333: Using redshift connection "parsely_pageview_hanging_engagedtime".
2017-12-19 18:30:24,333: On parsely_pageview_hanging_engagedtime: create view "blog_dbt_dev"."parsely_pageview_hanging_engagedtime__dbt_tmp" as (
    with  __dbt__CTE__parsely_parent_pageview_keys as (


select
    apikey,
    session_id,
    visitor_site_id,
    pageview_post_id,
    pageview_post_id as url,
    referrer,
    ts_session_current,
    ts_action,
    event_id,
    LAG(ts_action, 1) OVER
      (PARTITION BY
         apikey,
         session_id,
         visitor_site_id,
         pageview_post_id,
         referrer,
         ts_session_current
       ORDER BY ts_action) AS previous_pageview_ts_action,
     LAG(ts_action, 1) OVER
       (PARTITION BY
         apikey,
         session_id,
         visitor_site_id,
         pageview_post_id,
         referrer,
         ts_session_current
      ORDER BY ts_action desc) AS next_pageview_ts_action,
--  hash keys
    pageview_key
from "blog_dbt_dev"."parsely_base_events"
where action in ('pageview')
),hanging_engaged as (
  SELECT
    *
  from "blog_dbt_dev"."parsely_base_events"
  where action in ('heartbeat')
  and pageview_key not in
    (select distinct pageview_key from __dbt__CTE__parsely_parent_pageview_keys)
),

first_timestamp as (
  SELECT
    min(ts_action) as ts_action,
    TRUE           as min_ts_flag,
    pageview_key
  from hanging_engaged
  group by pageview_key
)

SELECT
  event_id,
  min_ts_flag,
  pageview_key,
  engaged_time_inc
from hanging_engaged
left join first_timestamp using (pageview_key, ts_action)
  );
2017-12-19 18:30:24,729: SQL status: CREATE VIEW in 0.40 seconds
2017-12-19 18:30:24,729: Using redshift connection "parsely_pageview_hanging_engagedtime".
2017-12-19 18:30:24,730: On parsely_pageview_hanging_engagedtime: alter table "blog_dbt_dev"."parsely_pageview_hanging_engagedtime__dbt_tmp" rename to "parsely_pageview_hanging_engagedtime"
2017-12-19 18:30:24,732: SQL status: ALTER TABLE in 0.00 seconds
2017-12-19 18:30:24,733: On parsely_pageview_hanging_engagedtime: COMMIT
2017-12-19 18:30:24,733: Using redshift connection "parsely_pageview_hanging_engagedtime".
2017-12-19 18:30:24,733: On parsely_pageview_hanging_engagedtime: COMMIT
2017-12-19 18:30:25,334: SQL status: COMMIT in 0.60 seconds
2017-12-19 18:30:25,334: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc9a179090>], 'label': '38baff82-f50c-4aaf-95f2-3319ac6c0773'}
2017-12-19 18:30:25,366: 18:30:25 | 14 of 25 OK created view model blog_dbt_dev.parsely_pageview_hanging_engagedtime [CREATE VIEW in 1.04s]
2017-12-19 18:30:25,366: 18:30:25 | 15 of 25 START view model blog_dbt_dev.parsely_videoview_hanging_engagedtime [RUN]
2017-12-19 18:30:25,367: Compiling model.parsely.parsely_videoview_hanging_engagedtime
2017-12-19 18:30:25,394: Writing injected SQL for node "model.parsely.parsely_videoview_hanging_engagedtime"
2017-12-19 18:30:25,395: Acquiring new redshift connection "parsely_videoview_hanging_engagedtime".
2017-12-19 18:30:25,395: Re-using an available connection from the pool.
2017-12-19 18:30:25,395: Using redshift connection "parsely_videoview_hanging_engagedtime".
2017-12-19 18:30:25,395: On parsely_videoview_hanging_engagedtime: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:30:25,412: SQL status: SELECT in 0.02 seconds
2017-12-19 18:30:25,414: Writing runtime SQL for node "model.parsely.parsely_videoview_hanging_engagedtime"
2017-12-19 18:30:25,415: Using redshift connection "parsely_videoview_hanging_engagedtime".
2017-12-19 18:30:25,415: On parsely_videoview_hanging_engagedtime: BEGIN
2017-12-19 18:30:25,417: SQL status: BEGIN in 0.00 seconds
2017-12-19 18:30:25,417: Using redshift connection "parsely_videoview_hanging_engagedtime".
2017-12-19 18:30:25,417: On parsely_videoview_hanging_engagedtime: create view "blog_dbt_dev"."parsely_videoview_hanging_engagedtime__dbt_tmp" as (
    with  __dbt__CTE__parsely_parent_pageview_keys as (


select
    apikey,
    session_id,
    visitor_site_id,
    pageview_post_id,
    pageview_post_id as url,
    referrer,
    ts_session_current,
    ts_action,
    event_id,
    LAG(ts_action, 1) OVER
      (PARTITION BY
         apikey,
         session_id,
         visitor_site_id,
         pageview_post_id,
         referrer,
         ts_session_current
       ORDER BY ts_action) AS previous_pageview_ts_action,
     LAG(ts_action, 1) OVER
       (PARTITION BY
         apikey,
         session_id,
         visitor_site_id,
         pageview_post_id,
         referrer,
         ts_session_current
      ORDER BY ts_action desc) AS next_pageview_ts_action,
--  hash keys
    pageview_key
from "blog_dbt_dev"."parsely_base_events"
where action in ('pageview')
),  __dbt__CTE__parsely_parent_videostart_keys as (


select
    apikey,
    session_id,
    visitor_site_id,
    metadata_canonical_url,
    url,
    referrer,
    ts_session_current,
    vs.event_id,
    vs.ts_action,
    LAG(vs.ts_action, 1) OVER
      (PARTITION BY
         apikey,
         session_id,
         visitor_site_id,
         metadata_canonical_url,
         url,
         referrer,
         ts_session_current
       ORDER BY vs.ts_action) AS previous_videostart_ts_action,
     LAG(vs.ts_action, 1) OVER
       (PARTITION BY
         apikey,
         session_id,
         visitor_site_id,
         metadata_canonical_url,
         url,
         referrer,
         ts_session_current
      ORDER BY vs.ts_action desc) AS next_videostart_ts_action,
--  hash keys
    pv.pageview_key,
    videostart_key
from "blog_dbt_dev"."parsely_base_events" vs
left join __dbt__CTE__parsely_parent_pageview_keys pv using (pageview_key, apikey, session_id, referrer, visitor_site_id, url, ts_session_current)
where action in ('videostart')
and vs.ts_action >= pv.ts_action and (case when pv.next_pageview_ts_action is not null then vs.ts_action < pv.next_pageview_ts_action else true end)
),hanging_engaged as (
  SELECT
    *
  from "blog_dbt_dev"."parsely_base_events"
  where action in ('vheartbeat')
  and videostart_key not in
    (select distinct videostart_key from __dbt__CTE__parsely_parent_videostart_keys)
),

first_timestamp as (
  SELECT
    min(ts_action) as ts_action,
    TRUE           as min_ts_flag,
    videostart_key
  from hanging_engaged
  group by videostart_key
)

SELECT
  event_id,
  videostart_key,
  min_ts_flag,
  engaged_time_inc
from hanging_engaged
left join first_timestamp using (videostart_key, ts_action)
  );
2017-12-19 18:30:25,559: SQL status: CREATE VIEW in 0.14 seconds
2017-12-19 18:30:25,560: Using redshift connection "parsely_videoview_hanging_engagedtime".
2017-12-19 18:30:25,560: On parsely_videoview_hanging_engagedtime: alter table "blog_dbt_dev"."parsely_videoview_hanging_engagedtime__dbt_tmp" rename to "parsely_videoview_hanging_engagedtime"
2017-12-19 18:30:25,836: SQL status: ALTER TABLE in 0.28 seconds
2017-12-19 18:30:25,836: On parsely_videoview_hanging_engagedtime: COMMIT
2017-12-19 18:30:25,836: Using redshift connection "parsely_videoview_hanging_engagedtime".
2017-12-19 18:30:25,836: On parsely_videoview_hanging_engagedtime: COMMIT
2017-12-19 18:30:26,034: SQL status: COMMIT in 0.20 seconds
2017-12-19 18:30:26,034: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc9a1d9110>], 'label': '38baff82-f50c-4aaf-95f2-3319ac6c0773'}
2017-12-19 18:30:26,060: 18:30:26 | 15 of 25 OK created view model blog_dbt_dev.parsely_videoview_hanging_engagedtime [CREATE VIEW in 0.67s]
2017-12-19 18:30:26,060: 18:30:26 | 16 of 25 START view model blog_dbt_dev.parsely_incoming_pageviews.... [RUN]
2017-12-19 18:30:26,061: Compiling model.parsely.parsely_incoming_pageviews
2017-12-19 18:30:26,071: Writing injected SQL for node "model.parsely.parsely_incoming_pageviews"
2017-12-19 18:30:26,073: Acquiring new redshift connection "parsely_incoming_pageviews".
2017-12-19 18:30:26,073: Re-using an available connection from the pool.
2017-12-19 18:30:26,073: Using redshift connection "parsely_incoming_pageviews".
2017-12-19 18:30:26,073: On parsely_incoming_pageviews: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:30:26,090: SQL status: SELECT in 0.02 seconds
2017-12-19 18:30:26,093: Writing runtime SQL for node "model.parsely.parsely_incoming_pageviews"
2017-12-19 18:30:26,094: Using redshift connection "parsely_incoming_pageviews".
2017-12-19 18:30:26,094: On parsely_incoming_pageviews: BEGIN
2017-12-19 18:30:26,096: SQL status: BEGIN in 0.00 seconds
2017-12-19 18:30:26,096: Using redshift connection "parsely_incoming_pageviews".
2017-12-19 18:30:26,096: On parsely_incoming_pageviews: create view "blog_dbt_dev"."parsely_incoming_pageviews__dbt_tmp" as (
    with incoming_pageviews_aggr as (
  SELECT
    sum(engaged_time_inc) as engaged_time,
    sum(pageview_counter) as pageviews,
    case when sum(pageview_counter) = 0 then 0 else
       sum(engaged_time_inc)/sum(pageview_counter) end as avg_engaged_time,
    pageview_key
  FROM  "blog_dbt_dev"."parsely_base_events"
  where action in ('pageview','heartbeat')
  group by pageview_key
),

incoming_videoviews_aggr as (
  SELECT
    sum(video_engaged_time) as video_engaged_time,
    sum(videoviews) as videoviews,
    pageview_key
  FROM "blog_dbt_dev"."parsely_videoviews_sessionized"
  where pageview_key in
    (select pageview_key from incoming_pageviews_aggr)
  group by pageview_key
),

dedupe_pageviews_sessionized as (
  select
    row_number() over (partition by pageview_key order by ts_action) as n,
    -- derived fields
    customer_apikey,
    pageview_post_id,
    -- event time fields
    DATE_PART('day',ts_session_current) as session_day,
    DATE_PART('quarter',ts_session_current) as session_quarter,
    DATE_PART('month',ts_session_current) as session_month,
    DATE_PART('year',ts_session_current) as session_year,
    DATE_PART('week',ts_session_current) as session_week,
    session_date_id,
    -- keys
    pageview_key,
    parsely_session_id,
    utm_id,
    apikey_visitor_id,
    -- standard fields
    apikey,
    campaign_id,
    display,
    display_avail_height,
    display_avail_width,
    display_pixel_depth,
    display_total_height,
    display_total_width,
    extra_data,
    flags_is_amp,
    ip_city,
    ip_continent,
    ip_country,
    ip_lat,
    ip_lon,
    ip_postal,
    ip_subdivision,
    ip_timezone,
    ip_market_name,
    ip_market_nielsen,
    ip_market_doubleclick,
    metadata,
    metadata_authors,
    metadata_canonical_url,
    metadata_custom_metadata,
    metadata_duration,
    metadata_data_source,
    metadata_full_content_word_count,
    metadata_image_url,
    metadata_page_type,
    metadata_post_id,
    metadata_pub_date_tmsp,
    metadata_save_date_tmsp,
    metadata_section,
    metadata_share_urls,
    metadata_tags,
    metadata_thumb_url,
    metadata_title,
    metadata_urls,
    ref_category,
    ref_clean,
    ref_domain,
    ref_fragment,
    ref_netloc,
    ref_params,
    ref_path,
    ref_query,
    ref_scheme,
    referrer,
    session,
    session_id,
    session_initial_referrer,
    session_initial_url,
    session_last_session_timestamp,
    session_timestamp,
    slot,
    sref_category,
    sref_clean,
    sref_domain,
    sref_fragment,
    sref_netloc,
    sref_params,
    sref_path,
    sref_query,
    sref_scheme,
    surl_clean,
    surl_domain,
    surl_fragment,
    surl_netloc,
    surl_params,
    surl_path,
    surl_query,
    surl_scheme,
    ts_session_current,
    ts_session_last,
    ua_browser,
    ua_browserversion,
    ua_device,
    ua_devicebrand,
    ua_devicemodel,
    ua_devicetouchcapable,
    ua_devicetype,
    ua_os,
    ua_osversion,
    url,
    url_clean,
    url_domain,
    url_fragment,
    url_netloc,
    url_params,
    url_path,
    url_query,
    url_scheme,
    utm_campaign,
    utm_medium,
    utm_source,
    utm_term,
    utm_content,
    user_agent,
    version,
    visitor,
    visitor_ip,
    visitor_network_id,
    visitor_site_id
  from "blog_dbt_dev"."parsely_base_events"
  where action in ('pageview','heartbeat')
)

select
    engaged_time,
    pageviews,
    avg_engaged_time,
    video_engaged_time,
    videoviews,
    -- derived fields
    customer_apikey,
    pageview_post_id,
    case
      when avg_engaged_time > 40 then 'Deep Read'
      when avg_engaged_time > 15 then 'Read'
      else 'Skim' end as read_category,
    -- event time fields
    DATE_PART('day',ts_session_current) as session_day,
    DATE_PART('quarter',ts_session_current) as session_quarter,
    DATE_PART('month',ts_session_current) as session_month,
    DATE_PART('year',ts_session_current) as session_year,
    DATE_PART('week',ts_session_current) as session_week,
    session_date_id,
    -- keys
    pageview_key,
    parsely_session_id,
    utm_id,
    apikey_visitor_id,
    -- standard fields
    apikey,
    campaign_id,
    display,
    display_avail_height,
    display_avail_width,
    display_pixel_depth,
    display_total_height,
    display_total_width,
    extra_data,
    flags_is_amp,
    ip_city,
    ip_continent,
    ip_country,
    ip_lat,
    ip_lon,
    ip_postal,
    ip_subdivision,
    ip_timezone,
    ip_market_name,
    ip_market_nielsen,
    ip_market_doubleclick,
    metadata,
    metadata_authors,
    metadata_canonical_url,
    metadata_custom_metadata,
    metadata_duration,
    metadata_data_source,
    metadata_full_content_word_count,
    metadata_image_url,
    metadata_page_type,
    metadata_post_id,
    metadata_pub_date_tmsp,
    metadata_save_date_tmsp,
    metadata_section,
    metadata_share_urls,
    metadata_tags,
    metadata_thumb_url,
    metadata_title,
    metadata_urls,
    ref_category,
    ref_clean,
    ref_domain,
    ref_fragment,
    ref_netloc,
    ref_params,
    ref_path,
    ref_query,
    ref_scheme,
    referrer,
    session,
    session_id,
    session_initial_referrer,
    session_initial_url,
    session_last_session_timestamp,
    session_timestamp,
    slot,
    sref_category,
    sref_clean,
    sref_domain,
    sref_fragment,
    sref_netloc,
    sref_params,
    sref_path,
    sref_query,
    sref_scheme,
    surl_clean,
    surl_domain,
    surl_fragment,
    surl_netloc,
    surl_params,
    surl_path,
    surl_query,
    surl_scheme,
    ts_session_current,
    ts_session_last,
    ua_browser,
    ua_browserversion,
    ua_device,
    ua_devicebrand,
    ua_devicemodel,
    ua_devicetouchcapable,
    ua_devicetype,
    ua_os,
    ua_osversion,
    url,
    url_clean,
    url_domain,
    url_fragment,
    url_netloc,
    url_params,
    url_path,
    url_query,
    url_scheme,
    utm_campaign,
    utm_medium,
    utm_source,
    utm_term,
    utm_content,
    user_agent,
    version,
    visitor,
    visitor_ip,
    visitor_network_id,
    visitor_site_id
from dedupe_pageviews_sessionized
left join incoming_pageviews_aggr using (pageview_key)
left join incoming_videoviews_aggr using (pageview_key)
where n = 1
  );
2017-12-19 18:30:26,370: SQL status: CREATE VIEW in 0.27 seconds
2017-12-19 18:30:26,370: Using redshift connection "parsely_incoming_pageviews".
2017-12-19 18:30:26,370: On parsely_incoming_pageviews: alter table "blog_dbt_dev"."parsely_incoming_pageviews__dbt_tmp" rename to "parsely_incoming_pageviews"
2017-12-19 18:30:26,373: SQL status: ALTER TABLE in 0.00 seconds
2017-12-19 18:30:26,373: On parsely_incoming_pageviews: COMMIT
2017-12-19 18:30:26,373: Using redshift connection "parsely_incoming_pageviews".
2017-12-19 18:30:26,373: On parsely_incoming_pageviews: COMMIT
2017-12-19 18:30:26,526: SQL status: COMMIT in 0.15 seconds
2017-12-19 18:30:26,527: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc9a1d9110>], 'label': '38baff82-f50c-4aaf-95f2-3319ac6c0773'}
2017-12-19 18:30:26,555: 18:30:26 | 16 of 25 OK created view model blog_dbt_dev.parsely_incoming_pageviews [CREATE VIEW in 0.47s]
2017-12-19 18:30:26,556: 18:30:26 | 17 of 25 START incremental model blog_dbt_dev.parsely_pageviews_sessionized [RUN]
2017-12-19 18:30:26,556: Compiling model.parsely.parsely_pageviews_sessionized
2017-12-19 18:30:26,562: Acquiring new redshift connection "parsely_pageviews_sessionized".
2017-12-19 18:30:26,562: Re-using an available connection from the pool.
2017-12-19 18:30:26,562: Using redshift connection "parsely_pageviews_sessionized".
2017-12-19 18:30:26,562: On parsely_pageviews_sessionized: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:30:26,578: SQL status: SELECT in 0.02 seconds
2017-12-19 18:30:26,583: Writing injected SQL for node "model.parsely.parsely_pageviews_sessionized"
2017-12-19 18:30:26,584: Using redshift connection "parsely_pageviews_sessionized".
2017-12-19 18:30:26,584: On parsely_pageviews_sessionized: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:30:26,599: SQL status: SELECT in 0.01 seconds
2017-12-19 18:30:26,599: Using redshift connection "parsely_pageviews_sessionized".
2017-12-19 18:30:26,599: On parsely_pageviews_sessionized: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:30:26,614: SQL status: SELECT in 0.01 seconds
2017-12-19 18:30:26,616: Using redshift connection "parsely_pageviews_sessionized".
2017-12-19 18:30:26,617: On parsely_pageviews_sessionized: BEGIN
2017-12-19 18:30:26,619: SQL status: BEGIN in 0.00 seconds
2017-12-19 18:30:26,619: Using redshift connection "parsely_pageviews_sessionized".
2017-12-19 18:30:26,619: On parsely_pageviews_sessionized: create temporary table "parsely_pageviews_sessionized__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          

with incoming_pageviews as (

  SELECT
    *
  from "blog_dbt_dev"."parsely_incoming_pageviews"


),




relevant_existing as (

    select
        *
    from "blog_dbt_dev"."parsely_pageviews_sessionized"
    where pageview_key in (select pageview_key from incoming_pageviews)

),

-- left join fields from old data: min_tstamp
unioned as (

    -- combined pageviews and videostarts
    select
      *
    from incoming_pageviews

    union all

    select
      *
    from relevant_existing

),

merged_aggr as (

    select
      sum(engaged_time) as engaged_time_unioned,
      sum(pageviews) as pageviews_unioned,
      case when sum(pageviews) = 0 then 0 else
         sum(engaged_time)/sum(pageviews) end as avg_engaged_time_unioned,
      sum(video_engaged_time) as video_engaged_time_unioned,
      sum(videoviews) as videoviews_unioned,
      pageview_key
    from unioned
    group by pageview_key
),

merged as (
    SELECT
    engaged_time_unioned as engaged_time,
    pageviews_unioned as pageviews,
    avg_engaged_time_unioned as avg_engaged_time,
    video_engaged_time_unioned as video_engaged_time,
    videoviews_unioned as videoviews,
    -- derived fields
    customer_apikey,
    pageview_post_id,
    case
      when engaged_time_unioned > 40 then 'Deep Read'
      when engaged_time_unioned > 15 then 'Read'
      else 'Skim' end as read_category,
    -- event time fields
    session_day,
    session_quarter,
    session_month,
    session_year,
    session_week,
    session_date_id,
    -- keys
    pageview_key,
    parsely_session_id,
    utm_id,
    apikey_visitor_id,
    -- standard fields
    apikey,
    campaign_id,
    display,
    display_avail_height,
    display_avail_width,
    display_pixel_depth,
    display_total_height,
    display_total_width,
    extra_data,
    flags_is_amp,
    ip_city,
    ip_continent,
    ip_country,
    ip_lat,
    ip_lon,
    ip_postal,
    ip_subdivision,
    ip_timezone,
    ip_market_name,
    ip_market_nielsen,
    ip_market_doubleclick,
    metadata,
    metadata_authors,
    metadata_canonical_url,
    metadata_custom_metadata,
    metadata_duration,
    metadata_data_source,
    metadata_full_content_word_count,
    metadata_image_url,
    metadata_page_type,
    metadata_post_id,
    metadata_pub_date_tmsp,
    metadata_save_date_tmsp,
    metadata_section,
    metadata_share_urls,
    metadata_tags,
    metadata_thumb_url,
    metadata_title,
    metadata_urls,
    ref_category,
    ref_clean,
    ref_domain,
    ref_fragment,
    ref_netloc,
    ref_params,
    ref_path,
    ref_query,
    ref_scheme,
    referrer,
    session,
    session_id,
    session_initial_referrer,
    session_initial_url,
    session_last_session_timestamp,
    session_timestamp,
    slot,
    sref_category,
    sref_clean,
    sref_domain,
    sref_fragment,
    sref_netloc,
    sref_params,
    sref_path,
    sref_query,
    sref_scheme,
    surl_clean,
    surl_domain,
    surl_fragment,
    surl_netloc,
    surl_params,
    surl_path,
    surl_query,
    surl_scheme,
    ts_session_current,
    ts_session_last,
    ua_browser,
    ua_browserversion,
    ua_device,
    ua_devicebrand,
    ua_devicemodel,
    ua_devicetouchcapable,
    ua_devicetype,
    ua_os,
    ua_osversion,
    url,
    url_clean,
    url_domain,
    url_fragment,
    url_netloc,
    url_params,
    url_path,
    url_query,
    url_scheme,
    utm_campaign,
    utm_medium,
    utm_source,
    utm_term,
    utm_content,
    user_agent,
    version,
    visitor,
    visitor_ip,
    visitor_network_id,
    visitor_site_id
  from incoming_pageviews
  left join merged_aggr  using (pageview_key)
)



select
  *
from merged
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-19 18:31:36,689: SQL status: SELECT in 70.07 seconds
2017-12-19 18:31:36,689: Using redshift connection "parsely_pageviews_sessionized".
2017-12-19 18:31:36,689: On parsely_pageviews_sessionized: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_pageviews_sessionized__dbt_incremental_tmp'
2017-12-19 18:31:37,003: SQL status: SELECT in 0.31 seconds
2017-12-19 18:31:37,004: Using redshift connection "parsely_pageviews_sessionized".
2017-12-19 18:31:37,004: On parsely_pageviews_sessionized: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_pageviews_sessionized' AND table_schema = 'blog_dbt_dev'
2017-12-19 18:31:37,114: SQL status: SELECT in 0.11 seconds
2017-12-19 18:31:37,115: Using redshift connection "parsely_pageviews_sessionized".
2017-12-19 18:31:37,115: On parsely_pageviews_sessionized: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_pageviews_sessionized' AND table_schema = 'blog_dbt_dev'
2017-12-19 18:31:37,223: SQL status: SELECT in 0.11 seconds
2017-12-19 18:31:37,226: Writing runtime SQL for node "model.parsely.parsely_pageviews_sessionized"
2017-12-19 18:31:37,226: Using redshift connection "parsely_pageviews_sessionized".
2017-12-19 18:31:37,227: On parsely_pageviews_sessionized: 
       

       delete
  from "blog_dbt_dev"."parsely_pageviews_sessionized"
  where (pageview_key) in (
    select (pageview_key)
    from "parsely_pageviews_sessionized__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_pageviews_sessionized" ("visitor", "ua_devicetouchcapable", "slot", "session", "metadata", "flags_is_amp", "display", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "videoviews", "video_engaged_time", "avg_engaged_time", "pageviews", "engaged_time", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "session_date_id", "ip_lon", "ip_lat", "session_week", "session_year", "session_month", "session_quarter", "session_day", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "campaign_id", "apikey", "apikey_visitor_id", "utm_id", "parsely_session_id", "pageview_key", "read_category", "pageview_post_id", "customer_apikey", "ts_session_last", "ts_session_current")
       (
         select "visitor", "ua_devicetouchcapable", "slot", "session", "metadata", "flags_is_amp", "display", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "videoviews", "video_engaged_time", "avg_engaged_time", "pageviews", "engaged_time", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "session_date_id", "ip_lon", "ip_lat", "session_week", "session_year", "session_month", "session_quarter", "session_day", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "campaign_id", "apikey", "apikey_visitor_id", "utm_id", "parsely_session_id", "pageview_key", "read_category", "pageview_post_id", "customer_apikey", "ts_session_last", "ts_session_current"
         from "parsely_pageviews_sessionized__dbt_incremental_tmp"
       );
     
2017-12-19 18:32:00,267: SQL status: INSERT 0 104828 in 23.04 seconds
2017-12-19 18:32:00,268: On parsely_pageviews_sessionized: COMMIT
2017-12-19 18:32:00,268: Using redshift connection "parsely_pageviews_sessionized".
2017-12-19 18:32:00,268: On parsely_pageviews_sessionized: COMMIT
2017-12-19 18:32:02,407: SQL status: COMMIT in 2.14 seconds
2017-12-19 18:32:02,407: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc9a1e2650>], 'label': '38baff82-f50c-4aaf-95f2-3319ac6c0773'}
2017-12-19 18:32:02,474: 18:32:02 | 17 of 25 OK created incremental model blog_dbt_dev.parsely_pageviews_sessionized [INSERT 0 104828 in 95.85s]
2017-12-19 18:32:02,474: 18:32:02 | 18 of 25 START view model blog_dbt_dev.parsely_videoview_engagedtime. [RUN]
2017-12-19 18:32:02,474: Compiling model.parsely.parsely_videoview_engagedtime
2017-12-19 18:32:02,516: Writing injected SQL for node "model.parsely.parsely_videoview_engagedtime"
2017-12-19 18:32:02,517: Acquiring new redshift connection "parsely_videoview_engagedtime".
2017-12-19 18:32:02,517: Re-using an available connection from the pool.
2017-12-19 18:32:02,517: Using redshift connection "parsely_videoview_engagedtime".
2017-12-19 18:32:02,517: On parsely_videoview_engagedtime: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:32:02,539: SQL status: SELECT in 0.02 seconds
2017-12-19 18:32:02,542: Writing runtime SQL for node "model.parsely.parsely_videoview_engagedtime"
2017-12-19 18:32:02,543: Using redshift connection "parsely_videoview_engagedtime".
2017-12-19 18:32:02,543: On parsely_videoview_engagedtime: BEGIN
2017-12-19 18:32:02,545: SQL status: BEGIN in 0.00 seconds
2017-12-19 18:32:02,545: Using redshift connection "parsely_videoview_engagedtime".
2017-12-19 18:32:02,545: On parsely_videoview_engagedtime: create view "blog_dbt_dev"."parsely_videoview_engagedtime__dbt_tmp" as (
    with  __dbt__CTE__parsely_parent_pageview_keys as (


select
    apikey,
    session_id,
    visitor_site_id,
    pageview_post_id,
    pageview_post_id as url,
    referrer,
    ts_session_current,
    ts_action,
    event_id,
    LAG(ts_action, 1) OVER
      (PARTITION BY
         apikey,
         session_id,
         visitor_site_id,
         pageview_post_id,
         referrer,
         ts_session_current
       ORDER BY ts_action) AS previous_pageview_ts_action,
     LAG(ts_action, 1) OVER
       (PARTITION BY
         apikey,
         session_id,
         visitor_site_id,
         pageview_post_id,
         referrer,
         ts_session_current
      ORDER BY ts_action desc) AS next_pageview_ts_action,
--  hash keys
    pageview_key
from "blog_dbt_dev"."parsely_base_events"
where action in ('pageview')
),  __dbt__CTE__parsely_parent_videostart_keys as (


select
    apikey,
    session_id,
    visitor_site_id,
    metadata_canonical_url,
    url,
    referrer,
    ts_session_current,
    vs.event_id,
    vs.ts_action,
    LAG(vs.ts_action, 1) OVER
      (PARTITION BY
         apikey,
         session_id,
         visitor_site_id,
         metadata_canonical_url,
         url,
         referrer,
         ts_session_current
       ORDER BY vs.ts_action) AS previous_videostart_ts_action,
     LAG(vs.ts_action, 1) OVER
       (PARTITION BY
         apikey,
         session_id,
         visitor_site_id,
         metadata_canonical_url,
         url,
         referrer,
         ts_session_current
      ORDER BY vs.ts_action desc) AS next_videostart_ts_action,
--  hash keys
    pv.pageview_key,
    videostart_key
from "blog_dbt_dev"."parsely_base_events" vs
left join __dbt__CTE__parsely_parent_pageview_keys pv using (pageview_key, apikey, session_id, referrer, visitor_site_id, url, ts_session_current)
where action in ('videostart')
and vs.ts_action >= pv.ts_action and (case when pv.next_pageview_ts_action is not null then vs.ts_action < pv.next_pageview_ts_action else true end)
),videostart_events as (

    select * from "blog_dbt_dev"."parsely_base_events"
    where action in ('videostart','vheartbeat')

),

engaged_xf as (

-- join videoviews and vheartbeats when they match up
  select
      vs.event_id,
      vhb.videostart_key,
      true as videostart_match,
      false as min_ts_flag,
      sum(vhb.engaged_time_inc) as engaged_time
  from videostart_events vhb
  left join __dbt__CTE__parsely_parent_videostart_keys vs using (videostart_key)
  where vhb.action = 'vheartbeat' and
  vhb.ts_action >= vs.ts_action and
  (case when vs.next_videostart_ts_action is not null
    then vhb.ts_action < vs.next_videostart_ts_action
    else true end)
  group by vs.event_id, vhb.videostart_key
),

engaged_no_matches_aggr as (
-- aggregated engaged time when videoviews and vheartbeats do not match up
-- using the ts_action and metadata from the first heartbeat
  select
      sum(engaged_time_inc) as engaged_time,
      videostart_key
  from "blog_dbt_dev"."parsely_videoview_hanging_engagedtime"
  group by videostart_key
),

engaged_no_matches as (
  SELECT
    event_id,
    videostart_key,
    false as videostart_match,
    min_ts_flag,
    engaged_time
  from "blog_dbt_dev"."parsely_videoview_hanging_engagedtime"
  left join engaged_no_matches_aggr using (videostart_key)
  where min_ts_flag is true
),

unioned as (
  select
    *
  from engaged_xf

  union all

  select
    *
  from engaged_no_matches

)

select
  *
  from videostart_events vs
  left join unioned using (event_id, videostart_key)
  where (vs.action = 'videostart' or min_ts_flag is true)
  and (min_ts_flag is true or videostart_match is true)
  );
2017-12-19 18:32:02,670: SQL status: CREATE VIEW in 0.13 seconds
2017-12-19 18:32:02,670: Using redshift connection "parsely_videoview_engagedtime".
2017-12-19 18:32:02,670: On parsely_videoview_engagedtime: alter table "blog_dbt_dev"."parsely_videoview_engagedtime__dbt_tmp" rename to "parsely_videoview_engagedtime"
2017-12-19 18:32:02,675: SQL status: ALTER TABLE in 0.00 seconds
2017-12-19 18:32:02,675: On parsely_videoview_engagedtime: COMMIT
2017-12-19 18:32:02,675: Using redshift connection "parsely_videoview_engagedtime".
2017-12-19 18:32:02,675: On parsely_videoview_engagedtime: COMMIT
2017-12-19 18:32:02,874: SQL status: COMMIT in 0.20 seconds
2017-12-19 18:32:02,874: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc9a1f0e50>], 'label': '38baff82-f50c-4aaf-95f2-3319ac6c0773'}
2017-12-19 18:32:02,907: 18:32:02 | 18 of 25 OK created view model blog_dbt_dev.parsely_videoview_engagedtime [CREATE VIEW in 0.40s]
2017-12-19 18:32:02,908: 18:32:02 | 19 of 25 START incremental model blog_dbt_dev.parsely_videoview_behavior_workflow [RUN]
2017-12-19 18:32:02,908: Compiling model.parsely.parsely_videoview_behavior_workflow
2017-12-19 18:32:02,917: Writing injected SQL for node "model.parsely.parsely_videoview_behavior_workflow"
2017-12-19 18:32:02,918: Acquiring new redshift connection "parsely_videoview_behavior_workflow".
2017-12-19 18:32:02,918: Re-using an available connection from the pool.
2017-12-19 18:32:02,918: Using redshift connection "parsely_videoview_behavior_workflow".
2017-12-19 18:32:02,918: On parsely_videoview_behavior_workflow: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:32:02,939: SQL status: SELECT in 0.02 seconds
2017-12-19 18:32:02,940: Using redshift connection "parsely_videoview_behavior_workflow".
2017-12-19 18:32:02,940: On parsely_videoview_behavior_workflow: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:32:02,960: SQL status: SELECT in 0.02 seconds
2017-12-19 18:32:02,962: Using redshift connection "parsely_videoview_behavior_workflow".
2017-12-19 18:32:02,962: On parsely_videoview_behavior_workflow: BEGIN
2017-12-19 18:32:02,964: SQL status: BEGIN in 0.00 seconds
2017-12-19 18:32:02,964: Using redshift connection "parsely_videoview_behavior_workflow".
2017-12-19 18:32:02,964: On parsely_videoview_behavior_workflow: create temporary table "parsely_videoview_behavior_workflow__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          -- 1 row per videoview
-- sum engaged time for all heartbeats
-- metrics: videoviews, engaged time



with video_events as (

    select * from "blog_dbt_dev"."parsely_videoview_engagedtime"
),

-- derived fields
publish_watch_time_xf as (
    select
        event_id,
        (TIMESTAMP 'epoch'
          + left(metadata_pub_date_tmsp,10)::bigint
          * INTERVAL '1 Second ') as publish_time,
        (TIMESTAMP 'epoch'
          + left(timestamp_info_nginx_ms,10)::bigint
          * INTERVAL '1 Second ') as watch_time

    from video_events

)

select
    -- aggregated fields
    engaged_time as video_engaged_time,
    1 as videostart_counter,
    -- derived fields
    datediff(hour, publish_time, watch_time) as hours_since_publish,
    datediff(day, publish_time, watch_time) as days_since_publish,
    datediff(week, publish_time, watch_time) as weeks_since_publish,
    case
      when engaged_time > 60 then 'Deep Watch'
      when engaged_time > 15 then 'Watch'
      else 'Skim' end as watch_category,
    publish_time,
    watch_time,
    customer_apikey,
    pageview_key,
    videostart_key,
    parsely_session_id,
    utm_id,
    apikey_visitor_id,
    -- event time fields
    quarter,
    month,
    year,
    week,
    date_id,
    session_date_id,
    -- standard fields
    action	,
    apikey	,
    campaign_id	,
    display,
    display_avail_height	,
    display_avail_width	,
    display_pixel_depth	,
    display_total_height	,
    display_total_width	,
    event_id	,
    extra_data,
    flags_is_amp	,
    ip_city	,
    ip_continent	,
    ip_country	,
    ip_lat::FLOAT8	,
    ip_lon	,
    ip_postal	,
    ip_subdivision	,
    ip_timezone	,
    ip_market_name	,
    ip_market_nielsen	,
    ip_market_doubleclick	,
    metadata	,
    metadata_authors	,
    metadata_canonical_url	,
    metadata_custom_metadata	,
    metadata_duration	,
    metadata_data_source	,
    metadata_full_content_word_count	,
    metadata_image_url	,
    metadata_page_type	,
    metadata_post_id	,
    metadata_pub_date_tmsp	,
    metadata_save_date_tmsp	,
    metadata_section	,
    metadata_share_urls	,
    metadata_tags	,
    metadata_thumb_url	,
    metadata_title	,
    metadata_urls	,
    ref_category	,
    ref_clean	,
    ref_domain	,
    ref_fragment	,
    ref_netloc	,
    ref_params	,
    ref_path	,
    ref_query	,
    ref_scheme	,
    referrer	,
    session	,
    session_id	,
    session_initial_referrer	,
    session_initial_url	,
    session_last_session_timestamp	,
    session_timestamp	,
    slot	,
    sref_category	,
    sref_clean	,
    sref_domain	,
    sref_fragment	,
    sref_netloc	,
    sref_params	,
    sref_path	,
    sref_query	,
    sref_scheme	,
    surl_clean	,
    surl_domain	,
    surl_fragment	,
    surl_netloc	,
    surl_params	,
    surl_path	,
    surl_query	,
    surl_scheme	,
    timestamp_info	,
    timestamp_info_nginx_ms	,
    timestamp_info_override_ms	,
    timestamp_info_pixel_ms	,
    ts_action	,
    ts_session_current	,
    ts_session_last	,
    ua_browser	,
    ua_browserversion	,
    ua_device	,
    ua_devicebrand	,
    ua_devicemodel	,
    ua_devicetouchcapable	,
    ua_devicetype	,
    ua_os	,
    ua_osversion	,
    url	,
    url_clean	,
    url_domain	,
    url_fragment	,
    url_netloc	,
    url_params	,
    url_path	,
    url_query	,
    url_scheme	,
    utm_campaign	,
    utm_medium	,
    utm_source	,
    utm_term	,
    utm_content	,
    user_agent	,
    version	,
    visitor	,
    visitor_ip	,
    visitor_network_id	,
    visitor_site_id
  from video_events
  left join publish_watch_time_xf using (event_id)
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-19 18:32:34,836: SQL status: SELECT in 31.87 seconds
2017-12-19 18:32:34,836: Using redshift connection "parsely_videoview_behavior_workflow".
2017-12-19 18:32:34,836: On parsely_videoview_behavior_workflow: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_videoview_behavior_workflow__dbt_incremental_tmp'
2017-12-19 18:32:35,614: SQL status: SELECT in 0.78 seconds
2017-12-19 18:32:35,614: Using redshift connection "parsely_videoview_behavior_workflow".
2017-12-19 18:32:35,615: On parsely_videoview_behavior_workflow: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_videoview_behavior_workflow' AND table_schema = 'blog_dbt_dev'
2017-12-19 18:32:35,729: SQL status: SELECT in 0.11 seconds
2017-12-19 18:32:35,730: Using redshift connection "parsely_videoview_behavior_workflow".
2017-12-19 18:32:35,730: On parsely_videoview_behavior_workflow: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_videoview_behavior_workflow' AND table_schema = 'blog_dbt_dev'
2017-12-19 18:32:35,837: SQL status: SELECT in 0.11 seconds
2017-12-19 18:32:35,841: Writing runtime SQL for node "model.parsely.parsely_videoview_behavior_workflow"
2017-12-19 18:32:35,841: Using redshift connection "parsely_videoview_behavior_workflow".
2017-12-19 18:32:35,841: On parsely_videoview_behavior_workflow: 
       

       delete
  from "blog_dbt_dev"."parsely_videoview_behavior_workflow"
  where (event_id) in (
    select (event_id)
    from "parsely_videoview_behavior_workflow__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_videoview_behavior_workflow" ("visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "weeks_since_publish", "days_since_publish", "hours_since_publish", "video_engaged_time", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "session_date_id", "date_id", "videostart_counter", "ip_lon", "ip_lat", "week", "year", "month", "quarter", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "apikey_visitor_id", "utm_id", "parsely_session_id", "videostart_key", "pageview_key", "customer_apikey", "watch_category", "ts_session_last", "ts_session_current", "ts_action", "watch_time", "publish_time")
       (
         select "visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "weeks_since_publish", "days_since_publish", "hours_since_publish", "video_engaged_time", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "session_date_id", "date_id", "videostart_counter", "ip_lon", "ip_lat", "week", "year", "month", "quarter", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "apikey_visitor_id", "utm_id", "parsely_session_id", "videostart_key", "pageview_key", "customer_apikey", "watch_category", "ts_session_last", "ts_session_current", "ts_action", "watch_time", "publish_time"
         from "parsely_videoview_behavior_workflow__dbt_incremental_tmp"
       );
     
2017-12-19 18:32:37,579: SQL status: INSERT 0 139 in 1.74 seconds
2017-12-19 18:32:37,579: On parsely_videoview_behavior_workflow: COMMIT
2017-12-19 18:32:37,580: Using redshift connection "parsely_videoview_behavior_workflow".
2017-12-19 18:32:37,580: On parsely_videoview_behavior_workflow: COMMIT
2017-12-19 18:32:39,071: SQL status: COMMIT in 1.49 seconds
2017-12-19 18:32:39,071: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc9a1e2650>], 'label': '38baff82-f50c-4aaf-95f2-3319ac6c0773'}
2017-12-19 18:32:39,097: 18:32:39 | 19 of 25 OK created incremental model blog_dbt_dev.parsely_videoview_behavior_workflow [INSERT 0 139 in 36.16s]
2017-12-19 18:32:39,097: 18:32:39 | 20 of 25 START incremental model blog_dbt_dev.parsely_campaigns...... [RUN]
2017-12-19 18:32:39,097: Compiling model.parsely.parsely_campaigns
2017-12-19 18:32:39,101: Acquiring new redshift connection "parsely_campaigns".
2017-12-19 18:32:39,101: Re-using an available connection from the pool.
2017-12-19 18:32:39,101: Using redshift connection "parsely_campaigns".
2017-12-19 18:32:39,101: On parsely_campaigns: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:32:39,122: SQL status: SELECT in 0.02 seconds
2017-12-19 18:32:39,125: Writing injected SQL for node "model.parsely.parsely_campaigns"
2017-12-19 18:32:39,126: Using redshift connection "parsely_campaigns".
2017-12-19 18:32:39,126: On parsely_campaigns: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:32:39,147: SQL status: SELECT in 0.02 seconds
2017-12-19 18:32:39,147: Using redshift connection "parsely_campaigns".
2017-12-19 18:32:39,147: On parsely_campaigns: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:32:39,168: SQL status: SELECT in 0.02 seconds
2017-12-19 18:32:39,169: Using redshift connection "parsely_campaigns".
2017-12-19 18:32:39,169: On parsely_campaigns: BEGIN
2017-12-19 18:32:39,171: SQL status: BEGIN in 0.00 seconds
2017-12-19 18:32:39,171: Using redshift connection "parsely_campaigns".
2017-12-19 18:32:39,171: On parsely_campaigns: create temporary table "parsely_campaigns__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          -- 1 row per campaign
-- metrics: pageviews, engaged time, videostarts, video engaged time, visitors



with incoming_campaigns as (
  select
    utm_id,
    utm_campaign,
    utm_medium,
    utm_source,
    utm_term,
    utm_content,
    engaged_time,
    pageviews,
    video_engaged_time,
    videoviews,
--  dedupe field
    row_number() over (partition by utm_id order by ts_session_current) as n
  from "blog_dbt_dev"."parsely_pageviews_sessionized"
),



relevant_existing as (

    select
        *
    from "blog_dbt_dev"."parsely_campaigns"
    where utm_id in (select utm_id from incoming_campaigns)

),

-- left join fields from old data: min_tstamp
unioned as (

    select
      *
    from incoming_campaigns

    union all

    select
        *
    from relevant_existing

),

merged as (

    select
      n,
      utm_id,
      utm_campaign,
      utm_medium,
      utm_source,
      utm_term,
      utm_content,
      sum(engaged_time) as engaged_time,
      sum(pageviews) as pageviews,
      sum(video_engaged_time) as video_engaged_time,
      sum(videoviews) as videoviews
    from unioned
    group by n, utm_id, utm_campaign, utm_medium, utm_source, utm_term, utm_content

),



dedupe as (
    select
      *
    from merged
)

select
  *
from dedupe
where n = 1
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-19 18:32:46,541: SQL status: SELECT in 7.37 seconds
2017-12-19 18:32:46,541: Using redshift connection "parsely_campaigns".
2017-12-19 18:32:46,541: On parsely_campaigns: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_campaigns__dbt_incremental_tmp'
2017-12-19 18:32:46,747: SQL status: SELECT in 0.21 seconds
2017-12-19 18:32:46,747: Using redshift connection "parsely_campaigns".
2017-12-19 18:32:46,748: On parsely_campaigns: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_campaigns' AND table_schema = 'blog_dbt_dev'
2017-12-19 18:32:46,850: SQL status: SELECT in 0.10 seconds
2017-12-19 18:32:46,851: Using redshift connection "parsely_campaigns".
2017-12-19 18:32:46,851: On parsely_campaigns: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_campaigns' AND table_schema = 'blog_dbt_dev'
2017-12-19 18:32:46,955: SQL status: SELECT in 0.10 seconds
2017-12-19 18:32:46,956: Writing runtime SQL for node "model.parsely.parsely_campaigns"
2017-12-19 18:32:46,957: Using redshift connection "parsely_campaigns".
2017-12-19 18:32:46,957: On parsely_campaigns: 
       

       delete
  from "blog_dbt_dev"."parsely_campaigns"
  where (utm_id) in (
    select (utm_id)
    from "parsely_campaigns__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_campaigns" ("n", "videoviews", "video_engaged_time", "pageviews", "engaged_time", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "utm_id")
       (
         select "n", "videoviews", "video_engaged_time", "pageviews", "engaged_time", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "utm_id"
         from "parsely_campaigns__dbt_incremental_tmp"
       );
     
2017-12-19 18:32:50,192: SQL status: INSERT 0 368 in 3.23 seconds
2017-12-19 18:32:50,192: On parsely_campaigns: COMMIT
2017-12-19 18:32:50,192: Using redshift connection "parsely_campaigns".
2017-12-19 18:32:50,192: On parsely_campaigns: COMMIT
2017-12-19 18:32:50,915: SQL status: COMMIT in 0.72 seconds
2017-12-19 18:32:50,915: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efca4c4d450>], 'label': '38baff82-f50c-4aaf-95f2-3319ac6c0773'}
2017-12-19 18:32:50,942: 18:32:50 | 20 of 25 OK created incremental model blog_dbt_dev.parsely_campaigns. [INSERT 0 368 in 11.82s]
2017-12-19 18:32:50,942: Compiling model.parsely.parsely_incoming_users
2017-12-19 18:32:50,949: Writing injected SQL for node "model.parsely.parsely_incoming_users"
2017-12-19 18:32:50,950: 18:32:50 | 21 of 25 START incremental model blog_dbt_dev.parsely_users.......... [RUN]
2017-12-19 18:32:50,950: Compiling model.parsely.parsely_users
2017-12-19 18:32:50,955: Acquiring new redshift connection "parsely_users".
2017-12-19 18:32:50,955: Re-using an available connection from the pool.
2017-12-19 18:32:50,955: Using redshift connection "parsely_users".
2017-12-19 18:32:50,955: On parsely_users: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:32:50,977: SQL status: SELECT in 0.02 seconds
2017-12-19 18:32:51,022: Writing injected SQL for node "model.parsely.parsely_users"
2017-12-19 18:32:51,023: Using redshift connection "parsely_users".
2017-12-19 18:32:51,023: On parsely_users: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:32:51,044: SQL status: SELECT in 0.02 seconds
2017-12-19 18:32:51,044: Using redshift connection "parsely_users".
2017-12-19 18:32:51,044: On parsely_users: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:32:51,064: SQL status: SELECT in 0.02 seconds
2017-12-19 18:32:51,066: Using redshift connection "parsely_users".
2017-12-19 18:32:51,066: On parsely_users: BEGIN
2017-12-19 18:32:51,068: SQL status: BEGIN in 0.00 seconds
2017-12-19 18:32:51,068: Using redshift connection "parsely_users".
2017-12-19 18:32:51,068: On parsely_users: create temporary table "parsely_users__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          -- 1 row per visitor_site_Id
-- includes visitor type, returning, new, subscribers, etc
-- first login, last login, etc



-- second time: builds temp table; deletes duplicates by unique key, inserts new data
--


with  __dbt__CTE__parsely_incoming_users as (
-- 1 row per visitor_site_Id
-- includes visitor type, returning, new, subscribers, etc
-- first login, last login, etc



with incoming_users_pageviews as (
  select
      apikey,
      visitor_site_id,
      visitor_ip,
      --custom fields
      apikey_visitor_id,
      -- metrics
      max(ts_session_current) as last_timestamp,
      sum(pageviews) as user_total_pageviews,
      sum(engaged_time) as user_total_engaged_time,
      0 as user_total_videoviews,
      0 as user_total_video_engaged_time
  from "blog_dbt_dev"."parsely_pageviews_sessionized"
  group by 1,2,3,4
),

incoming_users_videostarts as (
  select
      apikey,
      visitor_site_id,
      visitor_ip,
      --custom fields
      apikey_visitor_id,
      -- metrics
      max(ts_session_current) as last_timestamp,
      0 as user_total_pageviews,
      0 as user_total_engaged_time,
      sum(videoviews) as user_total_videoviews,
      sum(video_engaged_time) as user_total_video_engaged_time
  from "blog_dbt_dev"."parsely_videoviews_sessionized"
  group by 1,2,3,4
)

select * from incoming_users_pageviews
union all
select * from incoming_users_videostarts
),incoming_users as (
  select
      apikey,
      apikey_visitor_id,
      visitor_site_id,
      visitor_ip,
      -- dates and times
      max(last_timestamp) as last_timestamp,
      date(min(last_timestamp)) as date_first_seen,
      date(max(last_timestamp)) as date_last_seen,
      -- metrics to aggregate
      sum(user_total_pageviews) as user_total_pageviews,
      sum(user_total_engaged_time) as user_total_engaged_time,
      sum(user_total_videoviews) as user_total_videoviews,
      sum(user_total_video_engaged_time) as user_total_video_engaged_time
  from __dbt__CTE__parsely_incoming_users
  group by 1,2,3,4
),



relevant_existing as (

    select
        apikey,
        apikey_visitor_id,
        visitor_site_id,
        visitor_ip,
        -- dates and times
        eu.last_timestamp,
        eu.date_first_seen,
        eu.date_last_seen,
        -- metrics to aggregate
        eu.user_total_pageviews,
        eu.user_total_engaged_time,
        eu.user_total_videoviews,
        eu.user_total_video_engaged_time
    from "blog_dbt_dev"."parsely_users" as eu
    left join incoming_users as iu using
      (apikey_visitor_id, apikey, visitor_site_id, visitor_ip)

),

unioned as (

    -- combined pageviews and videostarts
    select
        apikey,
        apikey_visitor_id,
        visitor_site_id,
        visitor_ip,
        -- dates and times
        last_timestamp,
        date_first_seen,
        date_last_seen,
        -- metrics to aggregate
        user_total_pageviews,
        user_total_engaged_time,
        user_total_videoviews,
        user_total_video_engaged_time
    from incoming_users

    union all

    select
        apikey,
        apikey_visitor_id,
        visitor_site_id,
        visitor_ip,
        -- dates and times
        last_timestamp,
        date_first_seen,
        date_last_seen,
        -- metrics to aggregate
        user_total_pageviews,
        user_total_engaged_time,
        user_total_videoviews,
        user_total_video_engaged_time
    from relevant_existing

),

merged as (

    select
        apikey,
        apikey_visitor_id,
        visitor_site_id,
        visitor_ip,
        -- dates and times
        max(last_timestamp) as last_timestamp,
        min(date_first_seen) as date_first_seen,
        max(date_last_seen) as date_last_seen,
        -- metrics
        sum(user_total_pageviews) as user_total_pageviews,
        sum(user_total_engaged_time) as user_total_engaged_time,
        sum(user_total_videoviews) as user_total_videoviews,
        sum(user_total_video_engaged_time) as user_total_video_engaged_time
    from unioned
    group by 1,2,3,4


)



select
    1 as user_counter,
    apikey,
    apikey_visitor_id,
    visitor_site_id,
    visitor_ip,
    -- dates and times
    last_timestamp,
    date_first_seen,
    date_last_seen,
    -- metrics to aggregate
    user_total_pageviews,
    user_total_engaged_time,
    user_total_videoviews,
    user_total_video_engaged_time,
    -- derived fields
    case when date_first_seen < date(SYSDATE)
      then 'Returning'
      else 'New' end as user_type,
    case when user_total_pageviews>=30
      then 'Loyalty'
      else 'Non-Loyalty' end as user_engagement_level,
    DATEDIFF(day, last_timestamp, SYSDATE) as days_since_last_session
  from merged
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-19 18:32:55,558: SQL status: SELECT in 4.49 seconds
2017-12-19 18:32:55,559: Using redshift connection "parsely_users".
2017-12-19 18:32:55,559: On parsely_users: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_users__dbt_incremental_tmp'
2017-12-19 18:32:55,699: SQL status: SELECT in 0.14 seconds
2017-12-19 18:32:55,699: Using redshift connection "parsely_users".
2017-12-19 18:32:55,699: On parsely_users: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_users' AND table_schema = 'blog_dbt_dev'
2017-12-19 18:32:55,799: SQL status: SELECT in 0.10 seconds
2017-12-19 18:32:55,800: Using redshift connection "parsely_users".
2017-12-19 18:32:55,800: On parsely_users: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_users' AND table_schema = 'blog_dbt_dev'
2017-12-19 18:32:55,900: SQL status: SELECT in 0.10 seconds
2017-12-19 18:32:55,901: Writing runtime SQL for node "model.parsely.parsely_users"
2017-12-19 18:32:55,902: Using redshift connection "parsely_users".
2017-12-19 18:32:55,902: On parsely_users: 
       

       delete
  from "blog_dbt_dev"."parsely_users"
  where (apikey_visitor_id) in (
    select (apikey_visitor_id)
    from "parsely_users__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_users" ("days_since_last_session", "user_total_video_engaged_time", "user_total_videoviews", "user_total_engaged_time", "user_total_pageviews", "user_counter", "user_engagement_level", "user_type", "visitor_ip", "visitor_site_id", "apikey_visitor_id", "apikey", "date_last_seen", "date_first_seen", "last_timestamp")
       (
         select "days_since_last_session", "user_total_video_engaged_time", "user_total_videoviews", "user_total_engaged_time", "user_total_pageviews", "user_counter", "user_engagement_level", "user_type", "visitor_ip", "visitor_site_id", "apikey_visitor_id", "apikey", "date_last_seen", "date_first_seen", "last_timestamp"
         from "parsely_users__dbt_incremental_tmp"
       );
     
2017-12-19 18:32:57,601: SQL status: INSERT 0 58271 in 1.70 seconds
2017-12-19 18:32:57,602: On parsely_users: COMMIT
2017-12-19 18:32:57,602: Using redshift connection "parsely_users".
2017-12-19 18:32:57,602: On parsely_users: COMMIT
2017-12-19 18:32:58,316: SQL status: COMMIT in 0.71 seconds
2017-12-19 18:32:58,316: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc9a1d92d0>], 'label': '38baff82-f50c-4aaf-95f2-3319ac6c0773'}
2017-12-19 18:32:58,348: 18:32:58 | 21 of 25 OK created incremental model blog_dbt_dev.parsely_users..... [INSERT 0 58271 in 7.37s]
2017-12-19 18:32:58,348: 18:32:58 | 22 of 25 START view model blog_dbt_dev.parsely_pageview_engagedtime.. [RUN]
2017-12-19 18:32:58,348: Compiling model.parsely.parsely_pageview_engagedtime
2017-12-19 18:32:58,378: Writing injected SQL for node "model.parsely.parsely_pageview_engagedtime"
2017-12-19 18:32:58,381: Acquiring new redshift connection "parsely_pageview_engagedtime".
2017-12-19 18:32:58,381: Re-using an available connection from the pool.
2017-12-19 18:32:58,381: Using redshift connection "parsely_pageview_engagedtime".
2017-12-19 18:32:58,381: On parsely_pageview_engagedtime: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:32:58,404: SQL status: SELECT in 0.02 seconds
2017-12-19 18:32:58,406: Writing runtime SQL for node "model.parsely.parsely_pageview_engagedtime"
2017-12-19 18:32:58,407: Using redshift connection "parsely_pageview_engagedtime".
2017-12-19 18:32:58,407: On parsely_pageview_engagedtime: BEGIN
2017-12-19 18:32:58,408: SQL status: BEGIN in 0.00 seconds
2017-12-19 18:32:58,409: Using redshift connection "parsely_pageview_engagedtime".
2017-12-19 18:32:58,409: On parsely_pageview_engagedtime: create view "blog_dbt_dev"."parsely_pageview_engagedtime__dbt_tmp" as (
    with  __dbt__CTE__parsely_parent_pageview_keys as (


select
    apikey,
    session_id,
    visitor_site_id,
    pageview_post_id,
    pageview_post_id as url,
    referrer,
    ts_session_current,
    ts_action,
    event_id,
    LAG(ts_action, 1) OVER
      (PARTITION BY
         apikey,
         session_id,
         visitor_site_id,
         pageview_post_id,
         referrer,
         ts_session_current
       ORDER BY ts_action) AS previous_pageview_ts_action,
     LAG(ts_action, 1) OVER
       (PARTITION BY
         apikey,
         session_id,
         visitor_site_id,
         pageview_post_id,
         referrer,
         ts_session_current
      ORDER BY ts_action desc) AS next_pageview_ts_action,
--  hash keys
    pageview_key
from "blog_dbt_dev"."parsely_base_events"
where action in ('pageview')
),pageview_events as (

    select * from "blog_dbt_dev"."parsely_base_events"
    where action in ('pageview','heartbeat')

),

videoview_events as (
    SELECT
      sum(videostart_counter) as videoviews,
      sum(video_engaged_time) as video_engaged_time,
      pageview_key
    from "blog_dbt_dev"."parsely_videoview_behavior_workflow"
    group by pageview_key
),

engaged_xf as (

-- join videoviews and vheartbeats when they match up
  select
      pv.event_id,
      hb.pageview_key,
      true as pageview_match,
      false as min_ts_flag,
      sum(hb.engaged_time_inc) as engaged_time
  from pageview_events hb
  left join __dbt__CTE__parsely_parent_pageview_keys pv using (pageview_key)
  where hb.action = 'heartbeat' and
  hb.ts_action >= pv.ts_action and
  (case when pv.next_pageview_ts_action is not null
    then hb.ts_action < pv.next_pageview_ts_action
    else true end)
  group by pv.event_id, hb.pageview_key
),

engaged_no_matches_aggr as (
-- aggregated engaged time when videoviews and vheartbeats do not match up
-- using the ts_action and metadata from the first heartbeat
  select
      sum(engaged_time_inc) as engaged_time,
      pageview_key
  from "blog_dbt_dev"."parsely_pageview_hanging_engagedtime"
  group by pageview_key
),

engaged_no_matches as (
  SELECT
    event_id,
    pageview_key,
    false as pageview_match,
    min_ts_flag,
    engaged_time
  from "blog_dbt_dev"."parsely_pageview_hanging_engagedtime"
  left join engaged_no_matches_aggr using (pageview_key)
  where min_ts_flag is true
),

unioned as (
  select
    *
  from engaged_xf

  union all

  select
    *
  from engaged_no_matches

)

select
  *
from pageview_events pv
  left join unioned using (event_id, pageview_key)
  left join videoview_events using (pageview_key)
where (pv.action = 'pageview' or min_ts_flag is true)
and (min_ts_flag is true or pageview_match is true)
  );
2017-12-19 18:32:59,049: SQL status: CREATE VIEW in 0.64 seconds
2017-12-19 18:32:59,050: Using redshift connection "parsely_pageview_engagedtime".
2017-12-19 18:32:59,050: On parsely_pageview_engagedtime: alter table "blog_dbt_dev"."parsely_pageview_engagedtime__dbt_tmp" rename to "parsely_pageview_engagedtime"
2017-12-19 18:32:59,088: SQL status: ALTER TABLE in 0.04 seconds
2017-12-19 18:32:59,088: On parsely_pageview_engagedtime: COMMIT
2017-12-19 18:32:59,088: Using redshift connection "parsely_pageview_engagedtime".
2017-12-19 18:32:59,088: On parsely_pageview_engagedtime: COMMIT
2017-12-19 18:32:59,428: SQL status: COMMIT in 0.34 seconds
2017-12-19 18:32:59,429: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc9a1d9b10>], 'label': '38baff82-f50c-4aaf-95f2-3319ac6c0773'}
2017-12-19 18:32:59,454: 18:32:59 | 22 of 25 OK created view model blog_dbt_dev.parsely_pageview_engagedtime [CREATE VIEW in 1.08s]
2017-12-19 18:32:59,454: 18:32:59 | 23 of 25 START view model blog_dbt_dev.parsely_incoming_sessions..... [RUN]
2017-12-19 18:32:59,455: Compiling model.parsely.parsely_incoming_sessions
2017-12-19 18:32:59,461: Writing injected SQL for node "model.parsely.parsely_incoming_sessions"
2017-12-19 18:32:59,462: Acquiring new redshift connection "parsely_incoming_sessions".
2017-12-19 18:32:59,463: Re-using an available connection from the pool.
2017-12-19 18:32:59,463: Using redshift connection "parsely_incoming_sessions".
2017-12-19 18:32:59,463: On parsely_incoming_sessions: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:32:59,486: SQL status: SELECT in 0.02 seconds
2017-12-19 18:32:59,488: Writing runtime SQL for node "model.parsely.parsely_incoming_sessions"
2017-12-19 18:32:59,489: Using redshift connection "parsely_incoming_sessions".
2017-12-19 18:32:59,489: On parsely_incoming_sessions: BEGIN
2017-12-19 18:32:59,491: SQL status: BEGIN in 0.00 seconds
2017-12-19 18:32:59,491: Using redshift connection "parsely_incoming_sessions".
2017-12-19 18:32:59,491: On parsely_incoming_sessions: create view "blog_dbt_dev"."parsely_incoming_sessions__dbt_tmp" as (
    -- 1 row per session
-- Join from the parsely_pageviews and parsely_videovideos
-- aggregated: pageviews, engaged time, videoviews, video engaged time
-- should also have session visitor type, returning, new, subscribers, etc (what was true at the time of the session)
-- metrics: sessions, pageviws, videoviews, engaged time, video watch time

with session_metrics as (
  select
      parsely_session_id,
      sum(pageviews) as pageviews,
      sum(engaged_time) as engaged_time,
      sum(videoviews) as videoviews,
      sum(video_engaged_time) as video_engaged_time
  from "blog_dbt_dev"."parsely_pageviews_sessionized"
  group by parsely_session_id
),

users as (
    select
      apikey_visitor_id,
      user_type,
      user_engagement_level
    from "blog_dbt_dev"."parsely_users"
),

entry_exit as (
  SELECT
    *
  from "blog_dbt_dev"."parsely_entry_exit_urls"
),

session_dedupe_xf as (
  select  --add row number 1=1 here
      row_number() over (partition by parsely_session_id order by pageview_key) as n,
  --  id
      parsely_session_id,
      apikey_visitor_id,
  --  session user dimensions
      user_type as session_user_type,
      user_engagement_level as session_user_engagement_level,
  --  counter field
      1 as session_counter,
  --  parsely_entry_exit_urls
      entry_url,
      entry_url_clean,
      entry_url_domain,
      entry_url_fragment,
      entry_url_netloc,
      entry_url_params,
      entry_url_path,
      entry_url_query,
      entry_url_scheme,
      entry_ts_action,
      exit_url,
      exit_url_clean,
      exit_url_domain,
      exit_url_fragment,
      exit_url_netloc,
      exit_url_params,
      exit_url_path,
      exit_url_query,
      exit_url_scheme,
      exit_ts_action,
  --  session time fields
      session_day,
      session_quarter,
      session_month,
      session_year,
      session_week,
      session_date_id,
      apikey	,
      flags_is_amp	,
      ip_city	,
      ip_continent	,
      ip_country	,
      ip_lat::FLOAT8	,
      ip_lon	,
      ip_postal	,
      ip_subdivision	,
      ip_timezone	,
      ip_market_name	,
      ip_market_nielsen	,
      ip_market_doubleclick	,
      session	,
      session_id	,
      session_initial_referrer	,
      session_initial_url	,
      session_last_session_timestamp	,
      session_timestamp	,
      slot	,
      sref_category	,
      sref_clean	,
      sref_domain	,
      sref_fragment	,
      sref_netloc	,
      sref_params	,
      sref_path	,
      sref_query	,
      sref_scheme	,
      surl_clean	,
      surl_domain	,
      surl_fragment	,
      surl_netloc	,
      surl_params	,
      surl_path	,
      surl_query	,
      surl_scheme	,
      ua_browser	,
      ua_browserversion	,
      ua_device	,
      ua_devicebrand	,
      ua_devicemodel	,
      ua_devicetouchcapable	,
      ua_devicetype	,
      ua_os	,
      ua_osversion	,
      user_agent	,
      version	,
      visitor	,
      visitor_ip	,
      visitor_network_id	,
      visitor_site_id
  from "blog_dbt_dev"."parsely_pageviews_sessionized" as pv
  left join users using (apikey_visitor_id)
  left join entry_exit using (parsely_session_id)
)

select
  *
from session_dedupe_xf
left join session_metrics using (parsely_session_id)
where n = 1
  );
2017-12-19 18:33:02,027: SQL status: CREATE VIEW in 2.54 seconds
2017-12-19 18:33:02,028: Using redshift connection "parsely_incoming_sessions".
2017-12-19 18:33:02,028: On parsely_incoming_sessions: alter table "blog_dbt_dev"."parsely_incoming_sessions__dbt_tmp" rename to "parsely_incoming_sessions"
2017-12-19 18:33:02,031: SQL status: ALTER TABLE in 0.00 seconds
2017-12-19 18:33:02,031: On parsely_incoming_sessions: COMMIT
2017-12-19 18:33:02,031: Using redshift connection "parsely_incoming_sessions".
2017-12-19 18:33:02,031: On parsely_incoming_sessions: COMMIT
2017-12-19 18:33:02,658: SQL status: COMMIT in 0.63 seconds
2017-12-19 18:33:02,659: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efca4c4d450>], 'label': '38baff82-f50c-4aaf-95f2-3319ac6c0773'}
2017-12-19 18:33:02,694: 18:33:02 | 23 of 25 OK created view model blog_dbt_dev.parsely_incoming_sessions [CREATE VIEW in 3.20s]
2017-12-19 18:33:02,694: 18:33:02 | 24 of 25 START incremental model blog_dbt_dev.parsely_pageview_behavior_workflow [RUN]
2017-12-19 18:33:02,694: Compiling model.parsely.parsely_pageview_behavior_workflow
2017-12-19 18:33:02,703: Writing injected SQL for node "model.parsely.parsely_pageview_behavior_workflow"
2017-12-19 18:33:02,704: Acquiring new redshift connection "parsely_pageview_behavior_workflow".
2017-12-19 18:33:02,704: Re-using an available connection from the pool.
2017-12-19 18:33:02,704: Using redshift connection "parsely_pageview_behavior_workflow".
2017-12-19 18:33:02,704: On parsely_pageview_behavior_workflow: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:33:02,727: SQL status: SELECT in 0.02 seconds
2017-12-19 18:33:02,727: Using redshift connection "parsely_pageview_behavior_workflow".
2017-12-19 18:33:02,727: On parsely_pageview_behavior_workflow: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:33:02,748: SQL status: SELECT in 0.02 seconds
2017-12-19 18:33:02,750: Using redshift connection "parsely_pageview_behavior_workflow".
2017-12-19 18:33:02,750: On parsely_pageview_behavior_workflow: BEGIN
2017-12-19 18:33:02,753: SQL status: BEGIN in 0.00 seconds
2017-12-19 18:33:02,753: Using redshift connection "parsely_pageview_behavior_workflow".
2017-12-19 18:33:02,753: On parsely_pageview_behavior_workflow: create temporary table "parsely_pageview_behavior_workflow__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          -- 1 row per pageview
-- sum engaged time for all heartbeats
-- metrics: pageviews, engaged time



with pageview_events as (

    select * from "blog_dbt_dev"."parsely_pageview_engagedtime"
),

-- derived fields
publish_read_time_xf as (
    select
        event_id,
        (TIMESTAMP 'epoch'
          + left(metadata_pub_date_tmsp,10)::bigint
          * INTERVAL '1 Second ') as publish_time,
        (TIMESTAMP 'epoch'
          + left(timestamp_info_nginx_ms,10)::bigint
          * INTERVAL '1 Second ') as read_time
    from pageview_events

)

select
    -- aggregated fields
    engaged_time,
    1 as pageview_counter,
    video_engaged_time,
    videoviews,
    -- derived fields
    datediff(hour, publish_time, read_time) as hours_since_publish,
    datediff(day, publish_time, read_time) as days_since_publish,
    datediff(week, publish_time, read_time) as weeks_since_publish,
    case
      when engaged_time > 40 then 'Deep Read'
      when engaged_time > 15 then 'Read'
      else 'Skim' end as read_category,
    publish_time,
    read_time,
    customer_apikey,
    pageview_post_id,
    -- event time fields
    day,
    quarter,
    month,
    year,
    week,
    date_id,
    session_date_id,
    -- keys
    pageview_key,
    parsely_session_id,
    utm_id,
    apikey_visitor_id,
    -- standard fields
    action	,
    apikey	,
    campaign_id	,
    display,
    display_avail_height	,
    display_avail_width	,
    display_pixel_depth	,
    display_total_height	,
    display_total_width	,
    event_id	,
    extra_data,
    flags_is_amp	,
    ip_city	,
    ip_continent	,
    ip_country	,
    ip_lat::FLOAT8	,
    ip_lon	,
    ip_postal	,
    ip_subdivision	,
    ip_timezone	,
    ip_market_name	,
    ip_market_nielsen	,
    ip_market_doubleclick	,
    metadata	,
    metadata_authors	,
    metadata_canonical_url	,
    metadata_custom_metadata	,
    metadata_duration	,
    metadata_data_source	,
    metadata_full_content_word_count	,
    metadata_image_url	,
    metadata_page_type	,
    metadata_post_id	,
    metadata_pub_date_tmsp	,
    metadata_save_date_tmsp	,
    metadata_section	,
    metadata_share_urls	,
    metadata_tags	,
    metadata_thumb_url	,
    metadata_title	,
    metadata_urls	,
    ref_category	,
    ref_clean	,
    ref_domain	,
    ref_fragment	,
    ref_netloc	,
    ref_params	,
    ref_path	,
    ref_query	,
    ref_scheme	,
    referrer	,
    session	,
    session_id	,
    session_initial_referrer	,
    session_initial_url	,
    session_last_session_timestamp	,
    session_timestamp	,
    slot	,
    sref_category	,
    sref_clean	,
    sref_domain	,
    sref_fragment	,
    sref_netloc	,
    sref_params	,
    sref_path	,
    sref_query	,
    sref_scheme	,
    surl_clean	,
    surl_domain	,
    surl_fragment	,
    surl_netloc	,
    surl_params	,
    surl_path	,
    surl_query	,
    surl_scheme	,
    timestamp_info	,
    timestamp_info_nginx_ms	,
    timestamp_info_override_ms	,
    timestamp_info_pixel_ms	,
    ts_action	,
    ts_session_current	,
    ts_session_last	,
    ua_browser	,
    ua_browserversion	,
    ua_device	,
    ua_devicebrand	,
    ua_devicemodel	,
    ua_devicetouchcapable	,
    ua_devicetype	,
    ua_os	,
    ua_osversion	,
    url	,
    url_clean	,
    url_domain	,
    url_fragment	,
    url_netloc	,
    url_params	,
    url_path	,
    url_query	,
    url_scheme	,
    utm_campaign	,
    utm_medium	,
    utm_source	,
    utm_term	,
    utm_content	,
    user_agent	,
    version	,
    visitor	,
    visitor_ip	,
    visitor_network_id	,
    visitor_site_id
  from pageview_events
  left join publish_read_time_xf using (event_id)
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-19 18:33:38,358: SQL status: SELECT in 35.61 seconds
2017-12-19 18:33:38,359: Using redshift connection "parsely_pageview_behavior_workflow".
2017-12-19 18:33:38,359: On parsely_pageview_behavior_workflow: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_pageview_behavior_workflow__dbt_incremental_tmp'
2017-12-19 18:33:38,537: SQL status: SELECT in 0.18 seconds
2017-12-19 18:33:38,538: Using redshift connection "parsely_pageview_behavior_workflow".
2017-12-19 18:33:38,538: On parsely_pageview_behavior_workflow: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_pageview_behavior_workflow' AND table_schema = 'blog_dbt_dev'
2017-12-19 18:33:38,655: SQL status: SELECT in 0.12 seconds
2017-12-19 18:33:38,656: Using redshift connection "parsely_pageview_behavior_workflow".
2017-12-19 18:33:38,656: On parsely_pageview_behavior_workflow: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_pageview_behavior_workflow' AND table_schema = 'blog_dbt_dev'
2017-12-19 18:33:38,763: SQL status: SELECT in 0.11 seconds
2017-12-19 18:33:38,766: Writing runtime SQL for node "model.parsely.parsely_pageview_behavior_workflow"
2017-12-19 18:33:38,767: Using redshift connection "parsely_pageview_behavior_workflow".
2017-12-19 18:33:38,767: On parsely_pageview_behavior_workflow: 
       

       delete
  from "blog_dbt_dev"."parsely_pageview_behavior_workflow"
  where (event_id) in (
    select (event_id)
    from "parsely_pageview_behavior_workflow__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_pageview_behavior_workflow" ("visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "weeks_since_publish", "days_since_publish", "hours_since_publish", "videoviews", "video_engaged_time", "engaged_time", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "session_date_id", "date_id", "pageview_counter", "ip_lon", "ip_lat", "week", "year", "month", "quarter", "day", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "apikey_visitor_id", "utm_id", "parsely_session_id", "pageview_key", "pageview_post_id", "customer_apikey", "read_category", "ts_session_last", "ts_session_current", "ts_action", "read_time", "publish_time")
       (
         select "visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "weeks_since_publish", "days_since_publish", "hours_since_publish", "videoviews", "video_engaged_time", "engaged_time", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "session_date_id", "date_id", "pageview_counter", "ip_lon", "ip_lat", "week", "year", "month", "quarter", "day", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "apikey_visitor_id", "utm_id", "parsely_session_id", "pageview_key", "pageview_post_id", "customer_apikey", "read_category", "ts_session_last", "ts_session_current", "ts_action", "read_time", "publish_time"
         from "parsely_pageview_behavior_workflow__dbt_incremental_tmp"
       );
     
2017-12-19 18:33:42,749: SQL status: INSERT 0 104821 in 3.98 seconds
2017-12-19 18:33:42,750: On parsely_pageview_behavior_workflow: COMMIT
2017-12-19 18:33:42,750: Using redshift connection "parsely_pageview_behavior_workflow".
2017-12-19 18:33:42,750: On parsely_pageview_behavior_workflow: COMMIT
2017-12-19 18:33:43,874: SQL status: COMMIT in 1.12 seconds
2017-12-19 18:33:43,874: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc9a281b50>], 'label': '38baff82-f50c-4aaf-95f2-3319ac6c0773'}
2017-12-19 18:33:43,907: 18:33:43 | 24 of 25 OK created incremental model blog_dbt_dev.parsely_pageview_behavior_workflow [INSERT 0 104821 in 41.18s]
2017-12-19 18:33:43,907: 18:33:43 | 25 of 25 START incremental model blog_dbt_dev.parsely_sessions....... [RUN]
2017-12-19 18:33:43,908: Compiling model.parsely.parsely_sessions
2017-12-19 18:33:43,913: Acquiring new redshift connection "parsely_sessions".
2017-12-19 18:33:43,913: Re-using an available connection from the pool.
2017-12-19 18:33:43,914: Using redshift connection "parsely_sessions".
2017-12-19 18:33:43,914: On parsely_sessions: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:33:43,938: SQL status: SELECT in 0.02 seconds
2017-12-19 18:33:43,941: Writing injected SQL for node "model.parsely.parsely_sessions"
2017-12-19 18:33:43,943: Using redshift connection "parsely_sessions".
2017-12-19 18:33:43,943: On parsely_sessions: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:33:43,962: SQL status: SELECT in 0.02 seconds
2017-12-19 18:33:43,962: Using redshift connection "parsely_sessions".
2017-12-19 18:33:43,962: On parsely_sessions: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-19 18:33:43,981: SQL status: SELECT in 0.02 seconds
2017-12-19 18:33:43,984: Using redshift connection "parsely_sessions".
2017-12-19 18:33:43,984: On parsely_sessions: BEGIN
2017-12-19 18:33:43,986: SQL status: BEGIN in 0.00 seconds
2017-12-19 18:33:43,986: Using redshift connection "parsely_sessions".
2017-12-19 18:33:43,986: On parsely_sessions: create temporary table "parsely_sessions__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          -- 1 row per session
-- Join from the parsely_pageviews and parsely_videovideos
-- aggregated: pageviews, engaged time, videoviews, video engaged time
-- should also have session visitor type, returning, new, subscribers, etc (what was true at the time of the session)
-- metrics: sessions, pageviws, videoviews, engaged time, video watch time




with incoming_sessions as (
  select
    *
  from "blog_dbt_dev"."parsely_incoming_sessions"
),




relevant_existing_entry as (

    select
      parsely_session_id,
      entry_url,
      entry_url_clean,
      entry_url_domain,
      entry_url_fragment,
      entry_url_netloc,
      entry_url_params,
      entry_url_path,
      entry_url_query,
      entry_url_scheme,
      entry_ts_action
    from "blog_dbt_dev"."parsely_sessions"
    where parsely_session_id in (select parsely_session_id from incoming_sessions)

),

relevant_existing_exit as (

    select
      parsely_session_id,
      exit_url,
      exit_url_clean,
      exit_url_domain,
      exit_url_fragment,
      exit_url_netloc,
      exit_url_params,
      exit_url_path,
      exit_url_query,
      exit_url_scheme,
      exit_ts_action
    from "blog_dbt_dev"."parsely_sessions"
    where parsely_session_id in (select parsely_session_id from incoming_sessions)

),
-- left join fields from old data: min_tstamp
unioned as (

    -- combined pageviews and videostarts
    select
    --  session_metrics
        pageviews,
        engaged_time,
        videoviews,
        video_engaged_time,
    --  id
        parsely_session_id,
        apikey_visitor_id,
    --  session user dimensions
        session_user_type,
        session_user_engagement_level,
    --  counter field
        1 as session_counter,
    --  entry/exit update logic
      case when entry.entry_ts_action < id.entry_ts_action
        then entry.entry_url else id.entry_url_path end as entry_url,
        case when entry.entry_ts_action < id.entry_ts_action
          then entry.entry_url_clean else id.entry_url_clean end as entry_url_clean,
        case when entry.entry_ts_action < id.entry_ts_action
          then entry.entry_url_domain else id.entry_url_domain end as entry_url_domain,
        case when entry.entry_ts_action < id.entry_ts_action
          then entry.entry_url_fragment else id.entry_url_fragment end as entry_url_fragment,
        case when entry.entry_ts_action < id.entry_ts_action
          then entry.entry_url_netloc else id.entry_url_netloc end as entry_url_netloc,
        case when entry.entry_ts_action < id.entry_ts_action
          then entry.entry_url_params else id.entry_url_params end as entry_url_params,
        case when entry.entry_ts_action < id.entry_ts_action
          then entry.entry_url_path else id.entry_url_path end as entry_url_path,
        case when entry.entry_ts_action < id.entry_ts_action
          then entry.entry_url_query else id.entry_url_query end as entry_url_query,
        case when entry.entry_ts_action < id.entry_ts_action
          then entry.entry_url_scheme else id.entry_url_scheme end as entry_url_scheme,
        case when entry.entry_ts_action < id.entry_ts_action
          then entry.entry_ts_action else id.entry_ts_action end as entry_ts_action,
        case when exit.exit_ts_action > id.exit_ts_action
          then exit.exit_url else id.exit_url end as exit_url,
        case when exit.exit_ts_action > id.exit_ts_action
          then exit.exit_url_clean else id.exit_url_clean end as exit_url_clean,
        case when exit.exit_ts_action > id.exit_ts_action
          then exit.exit_url_domain else id.exit_url_domain end as exit_url_domain,
        case when exit.exit_ts_action > id.exit_ts_action
          then exit.exit_url_fragment else id.exit_url_fragment end as exit_url_fragment,
        case when exit.exit_ts_action > id.exit_ts_action
          then exit.exit_url_netloc else id.exit_url_netloc end as exit_url_netloc,
        case when exit.exit_ts_action > id.exit_ts_action
          then exit.exit_url_params else id.exit_url_params end as exit_url_params,
        case when exit.exit_ts_action > id.exit_ts_action
          then exit.exit_url_path else id.exit_url_path end as exit_url_path,
        case when exit.exit_ts_action > id.exit_ts_action
          then exit.exit_url_query else id.exit_url_query end as exit_url_query,
        case when exit.exit_ts_action > id.exit_ts_action
          then exit.exit_url_scheme else id.exit_url_scheme end as exit_url_scheme,
        case when exit.exit_ts_action > id.exit_ts_action
          then exit.exit_ts_action else id.exit_ts_action end as exit_ts_action,
    --  session time fields
        session_day,
        session_quarter,
        session_month,
        session_year,
        session_week,
        session_date_id,
        apikey	,
        flags_is_amp	,
        ip_city	,
        ip_continent	,
        ip_country	,
        ip_lat::FLOAT8	,
        ip_lon	,
        ip_postal	,
        ip_subdivision	,
        ip_timezone	,
        ip_market_name	,
        ip_market_nielsen	,
        ip_market_doubleclick	,
        session	,
        session_id	,
        session_initial_referrer	,
        session_initial_url	,
        session_last_session_timestamp	,
        session_timestamp	,
        slot	,
        sref_category	,
        sref_clean	,
        sref_domain	,
        sref_fragment	,
        sref_netloc	,
        sref_params	,
        sref_path	,
        sref_query	,
        sref_scheme	,
        surl_clean	,
        surl_domain	,
        surl_fragment	,
        surl_netloc	,
        surl_params	,
        surl_path	,
        surl_query	,
        surl_scheme	,
        ua_browser	,
        ua_browserversion	,
        ua_device	,
        ua_devicebrand	,
        ua_devicemodel	,
        ua_devicetouchcapable	,
        ua_devicetype	,
        ua_os	,
        ua_osversion	,
        user_agent	,
        version	,
        visitor	,
        visitor_ip	,
        visitor_network_id	,
        visitor_site_id,
        n
    from incoming_sessions id
    left join relevant_existing_entry entry using (parsely_session_id)
    left join relevant_existing_exit exit using (parsely_session_id)
),

merged as (

    select
      * -- and aggregated min,max,sums
    from unioned


)



select
    * --and derviced fields
from merged
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-19 18:34:23,699: SQL status: SELECT in 39.71 seconds
2017-12-19 18:34:23,699: Using redshift connection "parsely_sessions".
2017-12-19 18:34:23,699: On parsely_sessions: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_sessions__dbt_incremental_tmp'
2017-12-19 18:34:23,987: SQL status: SELECT in 0.29 seconds
2017-12-19 18:34:23,987: Using redshift connection "parsely_sessions".
2017-12-19 18:34:23,987: On parsely_sessions: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_sessions' AND table_schema = 'blog_dbt_dev'
2017-12-19 18:34:24,100: SQL status: SELECT in 0.11 seconds
2017-12-19 18:34:24,101: Using redshift connection "parsely_sessions".
2017-12-19 18:34:24,101: On parsely_sessions: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_sessions' AND table_schema = 'blog_dbt_dev'
2017-12-19 18:34:24,211: SQL status: SELECT in 0.11 seconds
2017-12-19 18:34:24,214: Writing runtime SQL for node "model.parsely.parsely_sessions"
2017-12-19 18:34:24,214: Using redshift connection "parsely_sessions".
2017-12-19 18:34:24,215: On parsely_sessions: 
       

       delete
  from "blog_dbt_dev"."parsely_sessions"
  where (parsely_session_id) in (
    select (parsely_session_id)
    from "parsely_sessions__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_sessions" ("visitor", "ua_devicetouchcapable", "slot", "session", "flags_is_amp", "video_engaged_time", "videoviews", "engaged_time", "pageviews", "session_timestamp", "session_last_session_timestamp", "n", "version", "session_id", "session_date_id", "session_counter", "ip_lon", "ip_lat", "session_week", "session_year", "session_month", "session_quarter", "session_day", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "apikey", "exit_url_scheme", "exit_url_query", "exit_url_path", "exit_url_params", "exit_url_netloc", "exit_url_fragment", "exit_url_domain", "exit_url_clean", "exit_url", "entry_url_scheme", "entry_url_query", "entry_url_path", "entry_url_params", "entry_url_netloc", "entry_url_fragment", "entry_url_domain", "entry_url_clean", "entry_url", "session_user_engagement_level", "session_user_type", "apikey_visitor_id", "parsely_session_id", "exit_ts_action", "entry_ts_action")
       (
         select "visitor", "ua_devicetouchcapable", "slot", "session", "flags_is_amp", "video_engaged_time", "videoviews", "engaged_time", "pageviews", "session_timestamp", "session_last_session_timestamp", "n", "version", "session_id", "session_date_id", "session_counter", "ip_lon", "ip_lat", "session_week", "session_year", "session_month", "session_quarter", "session_day", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "apikey", "exit_url_scheme", "exit_url_query", "exit_url_path", "exit_url_params", "exit_url_netloc", "exit_url_fragment", "exit_url_domain", "exit_url_clean", "exit_url", "entry_url_scheme", "entry_url_query", "entry_url_path", "entry_url_params", "entry_url_netloc", "entry_url_fragment", "entry_url_domain", "entry_url_clean", "entry_url", "session_user_engagement_level", "session_user_type", "apikey_visitor_id", "parsely_session_id", "exit_ts_action", "entry_ts_action"
         from "parsely_sessions__dbt_incremental_tmp"
       );
     
2017-12-19 18:34:39,109: SQL status: INSERT 0 85234 in 14.89 seconds
2017-12-19 18:34:39,109: On parsely_sessions: COMMIT
2017-12-19 18:34:39,111: Using redshift connection "parsely_sessions".
2017-12-19 18:34:39,111: On parsely_sessions: COMMIT
2017-12-19 18:34:40,643: SQL status: COMMIT in 1.53 seconds
2017-12-19 18:34:40,644: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc9a281690>], 'label': '38baff82-f50c-4aaf-95f2-3319ac6c0773'}
2017-12-19 18:34:40,687: 18:34:40 | 25 of 25 OK created incremental model blog_dbt_dev.parsely_sessions.. [INSERT 0 85234 in 56.74s]
2017-12-19 18:34:40,695: Using redshift connection "master".
2017-12-19 18:34:40,695: On master: BEGIN
2017-12-19 18:34:40,698: SQL status: BEGIN in 0.00 seconds
2017-12-19 18:34:40,698: On master: COMMIT
2017-12-19 18:34:40,698: Using redshift connection "master".
2017-12-19 18:34:40,698: On master: COMMIT
2017-12-19 18:34:40,700: SQL status: COMMIT in 0.00 seconds
2017-12-19 18:34:40,700: Compiling operation.parsely.parsely-on-run-end-0
2017-12-19 18:34:40,705: Writing injected SQL for node "operation.parsely.parsely-on-run-end-0"
2017-12-19 18:34:40,705: Using redshift connection "master".
2017-12-19 18:34:40,705: On master:  select 1 
2017-12-19 18:34:40,707: SQL status: SELECT in 0.00 seconds
2017-12-19 18:34:40,707: 18:34:40 | 
2017-12-19 18:34:40,708: 18:34:40 | Finished running 10 view models, 15 incremental models in 508.75s.
2017-12-19 18:34:40,708: 
2017-12-19 18:34:40,708: Completed successfully
2017-12-19 18:34:40,709: 
Done. PASS=25 ERROR=0 SKIP=0 TOTAL=25
2017-12-19 18:34:40,709: Sending event: {'category': 'dbt', 'action': 'invocation', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc9a288250>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc9a2884d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc9a26f990>], 'label': 'end'}
2017-12-19 18:34:40,743: Flushing usage events
