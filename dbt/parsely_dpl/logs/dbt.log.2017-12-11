2017-12-11 21:49:45,063: Tracking: tracking
2017-12-11 21:49:45,064: Sending event: {'category': 'dbt', 'action': 'invocation', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc55ee55190>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc55ee551d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc55ee55390>], 'label': 'start'}
2017-12-11 21:49:45,139: Loading dependency project from /data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/include
2017-12-11 21:49:45,155: Loading dependency project from /home/annelise/parsely_raw_data/dbt/parsely_dpl/dbt_modules
2017-12-11 21:49:45,156: Parsing core.sql
2017-12-11 21:49:45,167: Parsing etc/get_custom_schema.sql
2017-12-11 21:49:45,172: Parsing schema_tests/relationships.sql
2017-12-11 21:49:45,174: Parsing schema_tests/accepted_values.sql
2017-12-11 21:49:45,177: Parsing schema_tests/not_null.sql
2017-12-11 21:49:45,179: Parsing schema_tests/unique.sql
2017-12-11 21:49:45,180: Parsing materializations/wrapper.sql
2017-12-11 21:49:45,183: Parsing materializations/archive.sql
2017-12-11 21:49:45,210: Parsing materializations/table.sql
2017-12-11 21:49:45,227: Parsing materializations/helpers.sql
2017-12-11 21:49:45,241: Parsing materializations/bigquery.sql
2017-12-11 21:49:45,253: Parsing materializations/view.sql
2017-12-11 21:49:45,267: Parsing materializations/incremental.sql
2017-12-11 21:49:45,290: Parsing adapters/redshift.sql
2017-12-11 21:49:45,307: Parsing adapters/bigquery.sql
2017-12-11 21:49:45,311: Parsing adapters/postgres.sql
2017-12-11 21:49:45,314: Parsing adapters/common.sql
2017-12-11 21:49:45,331: Parsing model.parsely.parsely_audit
2017-12-11 21:49:45,332: Parsing model.parsely.parsely_video_content
2017-12-11 21:49:45,335: Parsing model.parsely.parsely_post_content
2017-12-11 21:49:45,338: Parsing model.parsely.parsely_parent_videostart_keys
2017-12-11 21:49:45,340: Parsing model.parsely.parsely_rawdata
2017-12-11 21:49:45,343: Parsing model.parsely.parsely_all_events
2017-12-11 21:49:45,347: Acquiring new redshift connection "parsely_all_events".
2017-12-11 21:49:45,347: Opening a new connection (0 currently allocated)
2017-12-11 21:49:45,359: Using redshift connection "parsely_all_events".
2017-12-11 21:49:45,359: On parsely_all_events: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:49:45,379: SQL status: SELECT in 0.02 seconds
2017-12-11 21:49:45,380: Parsing model.parsely.parsely_event_ids
2017-12-11 21:49:45,382: Parsing model.parsely.parsely_parent_pageview_keys
2017-12-11 21:49:45,384: Parsing model.parsely.parsely_base_events
2017-12-11 21:49:45,388: Acquiring new redshift connection "parsely_base_events".
2017-12-11 21:49:45,388: Re-using an available connection from the pool.
2017-12-11 21:49:45,388: Using redshift connection "parsely_base_events".
2017-12-11 21:49:45,388: On parsely_base_events: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:49:45,404: SQL status: SELECT in 0.02 seconds
2017-12-11 21:49:45,405: Parsing model.parsely.parsely_vhbs_no_vs
2017-12-11 21:49:45,407: Parsing model.parsely.parsely_match_vhbs
2017-12-11 21:49:45,410: Parsing model.parsely.parsely_match_hbs
2017-12-11 21:49:45,412: Parsing model.parsely.parsely_hbs_no_pvs
2017-12-11 21:49:45,415: Parsing model.parsely.parsely_pageview_engagedtime
2017-12-11 21:49:45,417: Parsing model.parsely.parsely_pageviews
2017-12-11 21:49:45,422: Parsing model.parsely.parsely_videoview_engagedtime
2017-12-11 21:49:45,424: Parsing model.parsely.parsely_videoviews
2017-12-11 21:49:45,428: Parsing model.parsely.parsely_incoming_users
2017-12-11 21:49:45,433: Parsing model.parsely.parsely_users
2017-12-11 21:49:45,441: Acquiring new redshift connection "parsely_users".
2017-12-11 21:49:45,441: Re-using an available connection from the pool.
2017-12-11 21:49:45,441: Using redshift connection "parsely_users".
2017-12-11 21:49:45,441: On parsely_users: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:49:45,457: SQL status: SELECT in 0.02 seconds
2017-12-11 21:49:45,460: Parsing model.parsely.parsely_errors
2017-12-11 21:49:45,464: Parsing model.parsely.parsely_bot_traffic
2017-12-11 21:49:45,468: Parsing model.parsely.parsely_custom_events
2017-12-11 21:49:45,473: Parsing model.parsely.parsely_sessions
2017-12-11 21:49:45,477: Parsing model.parsely.parsely_campaigns
2017-12-11 21:49:45,481: Acquiring new redshift connection "parsely_campaigns".
2017-12-11 21:49:45,481: Re-using an available connection from the pool.
2017-12-11 21:49:45,481: Using redshift connection "parsely_campaigns".
2017-12-11 21:49:45,481: On parsely_campaigns: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:49:45,497: SQL status: SELECT in 0.02 seconds
2017-12-11 21:49:45,501: Parsing operation.parsely.parsely-on-run-end-0
2017-12-11 21:49:45,503: Parsing operation.parsely.parsely-on-run-end-1
2017-12-11 21:49:45,508: Found 40 macros, 0 analyses, 0 archives, 0 tests, 24 models, 2 operations
2017-12-11 21:49:45,514: 
2017-12-11 21:49:45,517: Acquiring new redshift connection "master".
2017-12-11 21:49:45,517: Re-using an available connection from the pool.
2017-12-11 21:49:45,517: Using redshift connection "master".
2017-12-11 21:49:45,517: On master: select distinct nspname from pg_namespace
2017-12-11 21:49:45,519: SQL status: SELECT in 0.00 seconds
2017-12-11 21:49:45,522: Using redshift connection "master".
2017-12-11 21:49:45,522: On master: BEGIN
2017-12-11 21:49:45,523: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:49:45,523: On master: COMMIT
2017-12-11 21:49:45,523: Using redshift connection "master".
2017-12-11 21:49:45,523: On master: COMMIT
2017-12-11 21:49:45,525: SQL status: COMMIT in 0.00 seconds
2017-12-11 21:49:45,530: 21:49:45 | Concurrency: 1 threads (target='dev')
2017-12-11 21:49:45,530: 21:49:45 | 
2017-12-11 21:49:45,530: Using redshift connection "master".
2017-12-11 21:49:45,530: On master: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:49:45,547: SQL status: SELECT in 0.02 seconds
2017-12-11 21:49:45,604: 21:49:45 | 1 of 18 START incremental model blog_dbt_dev.parsely_rawdata......... [RUN]
2017-12-11 21:49:45,604: Compiling model.parsely.parsely_rawdata
2017-12-11 21:49:45,610: Writing injected SQL for node "model.parsely.parsely_rawdata"
2017-12-11 21:49:45,611: Acquiring new redshift connection "parsely_rawdata".
2017-12-11 21:49:45,611: Opening a new connection (1 currently allocated)
2017-12-11 21:49:45,622: Using redshift connection "parsely_rawdata".
2017-12-11 21:49:45,622: On parsely_rawdata: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:49:45,642: SQL status: SELECT in 0.02 seconds
2017-12-11 21:49:45,643: Using redshift connection "parsely_rawdata".
2017-12-11 21:49:45,643: On parsely_rawdata: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:49:45,659: SQL status: SELECT in 0.02 seconds
2017-12-11 21:49:45,660: Using redshift connection "parsely_rawdata".
2017-12-11 21:49:45,660: On parsely_rawdata: BEGIN
2017-12-11 21:49:45,662: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:49:45,662: Using redshift connection "parsely_rawdata".
2017-12-11 21:49:45,662: On parsely_rawdata: create temporary table "parsely_rawdata__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          

-- created to track event_ids for duplicate event_ids that do not need to be processed twice
-- how often should this truncate?
select
  *,
  CURRENT_TIMESTAMP as insert_timestamp
from parsely_blog_rawdata
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-11 21:49:46,003: SQL status: SELECT in 0.34 seconds
2017-12-11 21:49:46,003: Using redshift connection "parsely_rawdata".
2017-12-11 21:49:46,003: On parsely_rawdata: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_rawdata__dbt_incremental_tmp'
2017-12-11 21:49:46,053: SQL status: SELECT in 0.05 seconds
2017-12-11 21:49:46,054: Using redshift connection "parsely_rawdata".
2017-12-11 21:49:46,054: On parsely_rawdata: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_rawdata' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:49:46,101: SQL status: SELECT in 0.05 seconds
2017-12-11 21:49:46,101: Using redshift connection "parsely_rawdata".
2017-12-11 21:49:46,101: On parsely_rawdata: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_rawdata' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:49:46,149: SQL status: SELECT in 0.05 seconds
2017-12-11 21:49:46,152: Writing runtime SQL for node "model.parsely.parsely_rawdata"
2017-12-11 21:49:46,152: Using redshift connection "parsely_rawdata".
2017-12-11 21:49:46,153: On parsely_rawdata: 
       

       delete
  from "blog_dbt_dev"."parsely_rawdata"
  where (event_id) in (
    select (event_id)
    from "parsely_rawdata__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_rawdata" ("visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "ip_lon", "ip_lat", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "ts_session_last", "ts_session_current", "ts_action", "insert_timestamp")
       (
         select "visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "ip_lon", "ip_lat", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "ts_session_last", "ts_session_current", "ts_action", "insert_timestamp"
         from "parsely_rawdata__dbt_incremental_tmp"
       );
     
2017-12-11 21:49:47,336: SQL status: INSERT 0 1584 in 1.18 seconds
2017-12-11 21:49:47,336: On parsely_rawdata: COMMIT
2017-12-11 21:49:47,336: Using redshift connection "parsely_rawdata".
2017-12-11 21:49:47,336: On parsely_rawdata: COMMIT
2017-12-11 21:49:48,494: SQL status: COMMIT in 1.16 seconds
2017-12-11 21:49:48,495: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc55edf6c10>], 'label': '9aefddd8-ba63-4f0f-9df6-0b1e2bf3434d'}
2017-12-11 21:49:48,524: 21:49:48 | 1 of 18 OK created incremental model blog_dbt_dev.parsely_rawdata.... [INSERT 0 1584 in 2.89s]
2017-12-11 21:49:48,524: 21:49:48 | 2 of 18 START incremental model blog_dbt_dev.parsely_all_events...... [RUN]
2017-12-11 21:49:48,524: Compiling model.parsely.parsely_all_events
2017-12-11 21:49:48,530: Acquiring new redshift connection "parsely_all_events".
2017-12-11 21:49:48,530: Re-using an available connection from the pool.
2017-12-11 21:49:48,530: Using redshift connection "parsely_all_events".
2017-12-11 21:49:48,530: On parsely_all_events: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:49:48,547: SQL status: SELECT in 0.02 seconds
2017-12-11 21:49:48,550: Writing injected SQL for node "model.parsely.parsely_all_events"
2017-12-11 21:49:48,552: Using redshift connection "parsely_all_events".
2017-12-11 21:49:48,552: On parsely_all_events: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:49:48,568: SQL status: SELECT in 0.02 seconds
2017-12-11 21:49:48,569: Using redshift connection "parsely_all_events".
2017-12-11 21:49:48,569: On parsely_all_events: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:49:48,585: SQL status: SELECT in 0.02 seconds
2017-12-11 21:49:48,587: Using redshift connection "parsely_all_events".
2017-12-11 21:49:48,587: On parsely_all_events: BEGIN
2017-12-11 21:49:48,589: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:49:48,589: Using redshift connection "parsely_all_events".
2017-12-11 21:49:48,589: On parsely_all_events: create temporary table "parsely_all_events__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          

with new_events as (

    select *
    from "blog_dbt_dev"."parsely_rawdata"

    
    where insert_timestamp > (
        select coalesce(max(t.insert_timestamp), '0001-01-01') from "blog_dbt_dev"."parsely_all_events" as t
    )
    


),


dedupe as (
  select
      *,
  --  event action dates and times
      DATE_PART('day',ts_action) as day,
      DATE_PART('quarter',ts_action) as quarter,
      DATE_PART('month',ts_action) as month,
      DATE_PART('year',ts_action) as year,
      DATE_PART('week',ts_action) as week,
      (DATE_PART('y', ts_action)*10000+DATE_PART('mon', ts_action)*100+DATE_PART('day', ts_action))::int AS date_id,
  --    DATE_PART('h',ts_action) as hour,
  --    DATE_PART('m',ts_action) as minute,
  --    DATE_PART('s',ts_action) as second,
  --  other date IDs for joining to the calendar dimension
      (DATE_PART('y', ts_session_current)*10000+DATE_PART('mon', ts_session_current)*100+DATE_PART('day', ts_session_current))::int AS session_date_id,
  --  transformed fields
      coalesce(metadata_canonical_url,url) as pageview_post_id,
      json_extract_path_text(
          extra_data,
          '_customer_apikey')     as customer_apikey,
  --  dedupe field as we can receive duplicate event_ids that can be excluded
      row_number() over (partition by event_id order by ts_action) as n,
  --  hash identifier fields
      md5(
        coalesce(apikey,'') || '_' ||
        coalesce(session_id::text,'') || '_' ||
        coalesce(visitor_site_id,'') || '_' ||
        coalesce(url,'') || '_' ||
        coalesce(metadata_canonical_url,'') || '_' ||
        coalesce(referrer,'') || '_' ||
        coalesce(ts_session_current::text,''))         as videostart_key,
     md5(
        coalesce(apikey,'') || '_' ||
        coalesce(session_id::text,'') || '_' ||
        coalesce(visitor_site_id,'') || '_' ||
        coalesce(metadata_canonical_url,url) || '_' ||
        coalesce(referrer,'') || '_' ||
        coalesce(ts_session_current::text,''))         as pageview_key,
      md5(
        coalesce(apikey,'') || '_' ||
        coalesce(utm_campaign,'') || '_' ||
        coalesce(utm_medium,'') || '_' ||
        coalesce(utm_source ,'') || '_' ||
        coalesce(utm_term,'') || '_' ||
        coalesce(utm_content,'') )               as utm_id,
      md5(
        coalesce(apikey,'') || '_' ||
        coalesce(session_id::text,'') || '_' ||
        coalesce(visitor_site_id,'') || '_' ||
        coalesce(session_timestamp::text,''))            as parsely_session_id,
      md5(
        coalesce(apikey,'') || '_' ||
        coalesce(visitor_ip,'') || '_' ||
        coalesce(visitor_site_id,''))           as apikey_visitor_id
  from new_events
)

select
  *
from dedupe
where n = 1
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-11 21:49:56,996: SQL status: SELECT in 8.41 seconds
2017-12-11 21:49:56,997: Using redshift connection "parsely_all_events".
2017-12-11 21:49:56,997: On parsely_all_events: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_all_events__dbt_incremental_tmp'
2017-12-11 21:49:57,051: SQL status: SELECT in 0.05 seconds
2017-12-11 21:49:57,051: Using redshift connection "parsely_all_events".
2017-12-11 21:49:57,051: On parsely_all_events: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_all_events' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:49:57,099: SQL status: SELECT in 0.05 seconds
2017-12-11 21:49:57,100: Using redshift connection "parsely_all_events".
2017-12-11 21:49:57,100: On parsely_all_events: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_all_events' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:49:57,148: SQL status: SELECT in 0.05 seconds
2017-12-11 21:49:57,151: Writing runtime SQL for node "model.parsely.parsely_all_events"
2017-12-11 21:49:57,152: Using redshift connection "parsely_all_events".
2017-12-11 21:49:57,152: On parsely_all_events: 
       

       delete
  from "blog_dbt_dev"."parsely_all_events"
  where (event_id) in (
    select (event_id)
    from "parsely_all_events__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_all_events" ("visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "n", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "session_date_id", "date_id", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "week", "year", "month", "quarter", "day", "ip_lon", "ip_lat", "apikey_visitor_id", "parsely_session_id", "utm_id", "pageview_key", "videostart_key", "customer_apikey", "pageview_post_id", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "ts_session_last", "ts_session_current", "ts_action", "insert_timestamp")
       (
         select "visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "n", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "session_date_id", "date_id", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "week", "year", "month", "quarter", "day", "ip_lon", "ip_lat", "apikey_visitor_id", "parsely_session_id", "utm_id", "pageview_key", "videostart_key", "customer_apikey", "pageview_post_id", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "ts_session_last", "ts_session_current", "ts_action", "insert_timestamp"
         from "parsely_all_events__dbt_incremental_tmp"
       );
     
2017-12-11 21:49:58,373: SQL status: INSERT 0 1584 in 1.22 seconds
2017-12-11 21:49:58,373: On parsely_all_events: COMMIT
2017-12-11 21:49:58,373: Using redshift connection "parsely_all_events".
2017-12-11 21:49:58,373: On parsely_all_events: COMMIT
2017-12-11 21:49:59,517: SQL status: COMMIT in 1.14 seconds
2017-12-11 21:49:59,517: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc55ee39210>], 'label': '9aefddd8-ba63-4f0f-9df6-0b1e2bf3434d'}
2017-12-11 21:49:59,545: 21:49:59 | 2 of 18 OK created incremental model blog_dbt_dev.parsely_all_events. [INSERT 0 1584 in 10.99s]
2017-12-11 21:49:59,546: 21:49:59 | 3 of 18 START incremental model blog_dbt_dev.parsely_bot_traffic..... [RUN]
2017-12-11 21:49:59,546: Compiling model.parsely.parsely_bot_traffic
2017-12-11 21:49:59,552: Writing injected SQL for node "model.parsely.parsely_bot_traffic"
2017-12-11 21:49:59,553: Acquiring new redshift connection "parsely_bot_traffic".
2017-12-11 21:49:59,554: Re-using an available connection from the pool.
2017-12-11 21:49:59,554: Using redshift connection "parsely_bot_traffic".
2017-12-11 21:49:59,554: On parsely_bot_traffic: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:49:59,572: SQL status: SELECT in 0.02 seconds
2017-12-11 21:49:59,573: Using redshift connection "parsely_bot_traffic".
2017-12-11 21:49:59,573: On parsely_bot_traffic: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:49:59,589: SQL status: SELECT in 0.02 seconds
2017-12-11 21:49:59,591: Using redshift connection "parsely_bot_traffic".
2017-12-11 21:49:59,591: On parsely_bot_traffic: BEGIN
2017-12-11 21:49:59,592: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:49:59,593: Using redshift connection "parsely_bot_traffic".
2017-12-11 21:49:59,593: On parsely_bot_traffic: create temporary table "parsely_bot_traffic__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          --
-- 1 row per null action event



with bot_traffic as (

    select * from "blog_dbt_dev"."parsely_all_events"
    where ua_browser = 'Googlebot' --to be updated to flag_is_bot_traffic

)


select

    -- metrics and counter fields
    1 as bot_traffic_counter,
    -- derived fields
    customer_apikey,
    pageview_post_id,
    -- standard fields
    action	,
    apikey	,
    campaign_id	,
    display,
    display_avail_height	,
    display_avail_width	,
    display_pixel_depth	,
    display_total_height	,
    display_total_width	,
    engaged_time_inc,
    event_id	,
    extra_data,
    flags_is_amp	,
    ip_city	,
    ip_continent	,
    ip_country	,
    ip_lat::FLOAT8	,
    ip_lon	,
    ip_postal	,
    ip_subdivision	,
    ip_timezone	,
    ip_market_name	,
    ip_market_nielsen	,
    ip_market_doubleclick	,
    metadata	,
    metadata_authors	,
    metadata_canonical_url	,
    metadata_custom_metadata	,
    metadata_duration	,
    metadata_data_source	,
    metadata_full_content_word_count	,
    metadata_image_url	,
    metadata_page_type	,
    metadata_post_id	,
    metadata_pub_date_tmsp	,
    metadata_save_date_tmsp	,
    metadata_section	,
    metadata_share_urls	,
    metadata_tags	,
    metadata_thumb_url	,
    metadata_title	,
    metadata_urls	,
    ref_category	,
    ref_clean	,
    ref_domain	,
    ref_fragment	,
    ref_netloc	,
    ref_params	,
    ref_path	,
    ref_query	,
    ref_scheme	,
    referrer	,
    session	,
    session_id	,
    session_initial_referrer	,
    session_initial_url	,
    session_last_session_timestamp	,
    session_timestamp	,
    slot	,
    sref_category	,
    sref_clean	,
    sref_domain	,
    sref_fragment	,
    sref_netloc	,
    sref_params	,
    sref_path	,
    sref_query	,
    sref_scheme	,
    surl_clean	,
    surl_domain	,
    surl_fragment	,
    surl_netloc	,
    surl_params	,
    surl_path	,
    surl_query	,
    surl_scheme	,
    timestamp_info	,
    timestamp_info_nginx_ms	,
    timestamp_info_override_ms	,
    timestamp_info_pixel_ms	,
    ts_action	,
    ts_session_current	,
    ts_session_last	,
    ua_browser	,
    ua_browserversion	,
    ua_device	,
    ua_devicebrand	,
    ua_devicemodel	,
    ua_devicetouchcapable	,
    ua_devicetype	,
    ua_os	,
    ua_osversion	,
    url	,
    url_clean	,
    url_domain	,
    url_fragment	,
    url_netloc	,
    url_params	,
    url_path	,
    url_query	,
    url_scheme	,
    utm_campaign	,
    utm_medium	,
    utm_source	,
    utm_term	,
    utm_content	,
    user_agent	,
    version	,
    visitor	,
    visitor_ip	,
    visitor_network_id	,
    visitor_site_id
  from bot_traffic
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-11 21:50:01,107: SQL status: SELECT in 1.51 seconds
2017-12-11 21:50:01,107: Using redshift connection "parsely_bot_traffic".
2017-12-11 21:50:01,107: On parsely_bot_traffic: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_bot_traffic__dbt_incremental_tmp'
2017-12-11 21:50:01,159: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:01,159: Using redshift connection "parsely_bot_traffic".
2017-12-11 21:50:01,159: On parsely_bot_traffic: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_bot_traffic' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:50:01,207: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:01,208: Using redshift connection "parsely_bot_traffic".
2017-12-11 21:50:01,208: On parsely_bot_traffic: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_bot_traffic' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:50:01,256: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:01,259: Writing runtime SQL for node "model.parsely.parsely_bot_traffic"
2017-12-11 21:50:01,260: Using redshift connection "parsely_bot_traffic".
2017-12-11 21:50:01,260: On parsely_bot_traffic: 
       

       delete
  from "blog_dbt_dev"."parsely_bot_traffic"
  where (event_id) in (
    select (event_id)
    from "parsely_bot_traffic__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_bot_traffic" ("visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "bot_traffic_counter", "ip_lon", "ip_lat", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "pageview_post_id", "customer_apikey", "ts_session_last", "ts_session_current", "ts_action")
       (
         select "visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "bot_traffic_counter", "ip_lon", "ip_lat", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "pageview_post_id", "customer_apikey", "ts_session_last", "ts_session_current", "ts_action"
         from "parsely_bot_traffic__dbt_incremental_tmp"
       );
     
2017-12-11 21:50:01,627: SQL status: INSERT 0 0 in 0.37 seconds
2017-12-11 21:50:01,627: On parsely_bot_traffic: COMMIT
2017-12-11 21:50:01,627: Using redshift connection "parsely_bot_traffic".
2017-12-11 21:50:01,627: On parsely_bot_traffic: COMMIT
2017-12-11 21:50:02,946: SQL status: COMMIT in 1.32 seconds
2017-12-11 21:50:02,947: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc55ee39150>], 'label': '9aefddd8-ba63-4f0f-9df6-0b1e2bf3434d'}
2017-12-11 21:50:02,973: 21:50:02 | 3 of 18 OK created incremental model blog_dbt_dev.parsely_bot_traffic [INSERT 0 0 in 3.40s]
2017-12-11 21:50:02,974: 21:50:02 | 4 of 18 START incremental model blog_dbt_dev.parsely_custom_events... [RUN]
2017-12-11 21:50:02,974: Compiling model.parsely.parsely_custom_events
2017-12-11 21:50:02,982: Writing injected SQL for node "model.parsely.parsely_custom_events"
2017-12-11 21:50:02,983: Acquiring new redshift connection "parsely_custom_events".
2017-12-11 21:50:02,983: Re-using an available connection from the pool.
2017-12-11 21:50:02,983: Using redshift connection "parsely_custom_events".
2017-12-11 21:50:02,983: On parsely_custom_events: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:03,000: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:03,000: Using redshift connection "parsely_custom_events".
2017-12-11 21:50:03,000: On parsely_custom_events: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:03,017: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:03,019: Using redshift connection "parsely_custom_events".
2017-12-11 21:50:03,019: On parsely_custom_events: BEGIN
2017-12-11 21:50:03,021: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:50:03,021: Using redshift connection "parsely_custom_events".
2017-12-11 21:50:03,021: On parsely_custom_events: create temporary table "parsely_custom_events__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          -- 1 row per custom event

-- 1 row per pageview
-- sum engaged time for all heartbeats
-- metrics: pageviews, engaged time



with custom_events as (

    select * from "blog_dbt_dev"."parsely_all_events"
    where action not in ('pageview','heartbeat','videostart','vheartbeat') and action is not null

),

-- derived fields
custom_publish_read_time_xf as (
    select
        event_id,
        (TIMESTAMP 'epoch'
          + left(metadata_pub_date_tmsp,10)::bigint
          * INTERVAL '1 Second ') as publish_time,
        (TIMESTAMP 'epoch'
          + left(timestamp_info_nginx_ms,10)::bigint
          * INTERVAL '1 Second ') as event_time

    from custom_events

)


select

    -- metrics and counter fields
    1 as custom_event_counter,
    -- derived fields
    datediff(hour, publish_time, event_time) as hours_since_publish,
    datediff(day, publish_time, event_time) as days_since_publish,
    datediff(week, publish_time, event_time) as weeks_since_publish,
    publish_time,
    event_time,
    customer_apikey,
    pageview_post_id,
    -- standard fields
    action	,
    apikey	,
    campaign_id	,
    display,
    display_avail_height	,
    display_avail_width	,
    display_pixel_depth	,
    display_total_height	,
    display_total_width	,
    engaged_time_inc,
    event_id	,
    extra_data,
    flags_is_amp	,
    ip_city	,
    ip_continent	,
    ip_country	,
    ip_lat::FLOAT8	,
    ip_lon	,
    ip_postal	,
    ip_subdivision	,
    ip_timezone	,
    ip_market_name	,
    ip_market_nielsen	,
    ip_market_doubleclick	,
    metadata	,
    metadata_authors	,
    metadata_canonical_url	,
    metadata_custom_metadata	,
    metadata_duration	,
    metadata_data_source	,
    metadata_full_content_word_count	,
    metadata_image_url	,
    metadata_page_type	,
    metadata_post_id	,
    metadata_pub_date_tmsp	,
    metadata_save_date_tmsp	,
    metadata_section	,
    metadata_share_urls	,
    metadata_tags	,
    metadata_thumb_url	,
    metadata_title	,
    metadata_urls	,
    ref_category	,
    ref_clean	,
    ref_domain	,
    ref_fragment	,
    ref_netloc	,
    ref_params	,
    ref_path	,
    ref_query	,
    ref_scheme	,
    referrer	,
    session	,
    session_id	,
    session_initial_referrer	,
    session_initial_url	,
    session_last_session_timestamp	,
    session_timestamp	,
    slot	,
    sref_category	,
    sref_clean	,
    sref_domain	,
    sref_fragment	,
    sref_netloc	,
    sref_params	,
    sref_path	,
    sref_query	,
    sref_scheme	,
    surl_clean	,
    surl_domain	,
    surl_fragment	,
    surl_netloc	,
    surl_params	,
    surl_path	,
    surl_query	,
    surl_scheme	,
    timestamp_info	,
    timestamp_info_nginx_ms	,
    timestamp_info_override_ms	,
    timestamp_info_pixel_ms	,
    ts_action	,
    ts_session_current	,
    ts_session_last	,
    ua_browser	,
    ua_browserversion	,
    ua_device	,
    ua_devicebrand	,
    ua_devicemodel	,
    ua_devicetouchcapable	,
    ua_devicetype	,
    ua_os	,
    ua_osversion	,
    url	,
    url_clean	,
    url_domain	,
    url_fragment	,
    url_netloc	,
    url_params	,
    url_path	,
    url_query	,
    url_scheme	,
    utm_campaign	,
    utm_medium	,
    utm_source	,
    utm_term	,
    utm_content	,
    user_agent	,
    version	,
    visitor	,
    visitor_ip	,
    visitor_network_id	,
    visitor_site_id
  from custom_events
  left join custom_publish_read_time_xf using (event_id)
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-11 21:50:03,998: SQL status: SELECT in 0.98 seconds
2017-12-11 21:50:03,999: Using redshift connection "parsely_custom_events".
2017-12-11 21:50:03,999: On parsely_custom_events: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_custom_events__dbt_incremental_tmp'
2017-12-11 21:50:04,045: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:04,045: Using redshift connection "parsely_custom_events".
2017-12-11 21:50:04,045: On parsely_custom_events: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_custom_events' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:50:04,093: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:04,093: Using redshift connection "parsely_custom_events".
2017-12-11 21:50:04,093: On parsely_custom_events: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_custom_events' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:50:04,141: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:04,144: Writing runtime SQL for node "model.parsely.parsely_custom_events"
2017-12-11 21:50:04,145: Using redshift connection "parsely_custom_events".
2017-12-11 21:50:04,145: On parsely_custom_events: 
       

       delete
  from "blog_dbt_dev"."parsely_custom_events"
  where (event_id) in (
    select (event_id)
    from "parsely_custom_events__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_custom_events" ("visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "weeks_since_publish", "days_since_publish", "hours_since_publish", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "custom_event_counter", "ip_lon", "ip_lat", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "pageview_post_id", "customer_apikey", "ts_session_last", "ts_session_current", "ts_action", "event_time", "publish_time")
       (
         select "visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "weeks_since_publish", "days_since_publish", "hours_since_publish", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "custom_event_counter", "ip_lon", "ip_lat", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "pageview_post_id", "customer_apikey", "ts_session_last", "ts_session_current", "ts_action", "event_time", "publish_time"
         from "parsely_custom_events__dbt_incremental_tmp"
       );
     
2017-12-11 21:50:04,398: SQL status: INSERT 0 0 in 0.25 seconds
2017-12-11 21:50:04,398: On parsely_custom_events: COMMIT
2017-12-11 21:50:04,399: Using redshift connection "parsely_custom_events".
2017-12-11 21:50:04,399: On parsely_custom_events: COMMIT
2017-12-11 21:50:04,640: SQL status: COMMIT in 0.24 seconds
2017-12-11 21:50:04,641: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc55ee39150>], 'label': '9aefddd8-ba63-4f0f-9df6-0b1e2bf3434d'}
2017-12-11 21:50:04,667: 21:50:04 | 4 of 18 OK created incremental model blog_dbt_dev.parsely_custom_events [INSERT 0 0 in 1.67s]
2017-12-11 21:50:04,667: 21:50:04 | 5 of 18 START incremental model blog_dbt_dev.parsely_errors.......... [RUN]
2017-12-11 21:50:04,668: Compiling model.parsely.parsely_errors
2017-12-11 21:50:04,674: Writing injected SQL for node "model.parsely.parsely_errors"
2017-12-11 21:50:04,676: Acquiring new redshift connection "parsely_errors".
2017-12-11 21:50:04,676: Re-using an available connection from the pool.
2017-12-11 21:50:04,676: Using redshift connection "parsely_errors".
2017-12-11 21:50:04,676: On parsely_errors: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:04,693: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:04,693: Using redshift connection "parsely_errors".
2017-12-11 21:50:04,693: On parsely_errors: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:04,710: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:04,712: Using redshift connection "parsely_errors".
2017-12-11 21:50:04,712: On parsely_errors: BEGIN
2017-12-11 21:50:04,714: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:50:04,714: Using redshift connection "parsely_errors".
2017-12-11 21:50:04,714: On parsely_errors: create temporary table "parsely_errors__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          -- 1 row per null action event



with error_events as (

    select * from "blog_dbt_dev"."parsely_all_events"
    where action is null

)


select

    -- metrics and counter fields
    1 as error_event_counter,
    -- derived fields
    customer_apikey,
    pageview_post_id,
    -- standard fields
    action	,
    apikey	,
    campaign_id	,
    display,
    display_avail_height	,
    display_avail_width	,
    display_pixel_depth	,
    display_total_height	,
    display_total_width	,
    engaged_time_inc,
    event_id	,
    extra_data,
    flags_is_amp	,
    ip_city	,
    ip_continent	,
    ip_country	,
    ip_lat::FLOAT8	,
    ip_lon	,
    ip_postal	,
    ip_subdivision	,
    ip_timezone	,
    ip_market_name	,
    ip_market_nielsen	,
    ip_market_doubleclick	,
    metadata	,
    metadata_authors	,
    metadata_canonical_url	,
    metadata_custom_metadata	,
    metadata_duration	,
    metadata_data_source	,
    metadata_full_content_word_count	,
    metadata_image_url	,
    metadata_page_type	,
    metadata_post_id	,
    metadata_pub_date_tmsp	,
    metadata_save_date_tmsp	,
    metadata_section	,
    metadata_share_urls	,
    metadata_tags	,
    metadata_thumb_url	,
    metadata_title	,
    metadata_urls	,
    ref_category	,
    ref_clean	,
    ref_domain	,
    ref_fragment	,
    ref_netloc	,
    ref_params	,
    ref_path	,
    ref_query	,
    ref_scheme	,
    referrer	,
    session	,
    session_id	,
    session_initial_referrer	,
    session_initial_url	,
    session_last_session_timestamp	,
    session_timestamp	,
    slot	,
    sref_category	,
    sref_clean	,
    sref_domain	,
    sref_fragment	,
    sref_netloc	,
    sref_params	,
    sref_path	,
    sref_query	,
    sref_scheme	,
    surl_clean	,
    surl_domain	,
    surl_fragment	,
    surl_netloc	,
    surl_params	,
    surl_path	,
    surl_query	,
    surl_scheme	,
    timestamp_info	,
    timestamp_info_nginx_ms	,
    timestamp_info_override_ms	,
    timestamp_info_pixel_ms	,
    ts_action	,
    ts_session_current	,
    ts_session_last	,
    ua_browser	,
    ua_browserversion	,
    ua_device	,
    ua_devicebrand	,
    ua_devicemodel	,
    ua_devicetouchcapable	,
    ua_devicetype	,
    ua_os	,
    ua_osversion	,
    url	,
    url_clean	,
    url_domain	,
    url_fragment	,
    url_netloc	,
    url_params	,
    url_path	,
    url_query	,
    url_scheme	,
    utm_campaign	,
    utm_medium	,
    utm_source	,
    utm_term	,
    utm_content	,
    user_agent	,
    version	,
    visitor	,
    visitor_ip	,
    visitor_network_id	,
    visitor_site_id
  from error_events
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-11 21:50:05,367: SQL status: SELECT in 0.65 seconds
2017-12-11 21:50:05,368: Using redshift connection "parsely_errors".
2017-12-11 21:50:05,368: On parsely_errors: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_errors__dbt_incremental_tmp'
2017-12-11 21:50:05,416: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:05,416: Using redshift connection "parsely_errors".
2017-12-11 21:50:05,416: On parsely_errors: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_errors' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:50:05,465: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:05,466: Using redshift connection "parsely_errors".
2017-12-11 21:50:05,466: On parsely_errors: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_errors' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:50:05,515: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:05,518: Writing runtime SQL for node "model.parsely.parsely_errors"
2017-12-11 21:50:05,519: Using redshift connection "parsely_errors".
2017-12-11 21:50:05,519: On parsely_errors: 
       

       delete
  from "blog_dbt_dev"."parsely_errors"
  where (event_id) in (
    select (event_id)
    from "parsely_errors__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_errors" ("visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "error_event_counter", "ip_lon", "ip_lat", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "pageview_post_id", "customer_apikey", "ts_session_last", "ts_session_current", "ts_action")
       (
         select "visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "error_event_counter", "ip_lon", "ip_lat", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "pageview_post_id", "customer_apikey", "ts_session_last", "ts_session_current", "ts_action"
         from "parsely_errors__dbt_incremental_tmp"
       );
     
2017-12-11 21:50:05,759: SQL status: INSERT 0 0 in 0.24 seconds
2017-12-11 21:50:05,759: On parsely_errors: COMMIT
2017-12-11 21:50:05,759: Using redshift connection "parsely_errors".
2017-12-11 21:50:05,759: On parsely_errors: COMMIT
2017-12-11 21:50:05,957: SQL status: COMMIT in 0.20 seconds
2017-12-11 21:50:05,957: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc55ee39150>], 'label': '9aefddd8-ba63-4f0f-9df6-0b1e2bf3434d'}
2017-12-11 21:50:05,985: 21:50:05 | 5 of 18 OK created incremental model blog_dbt_dev.parsely_errors..... [INSERT 0 0 in 1.29s]
2017-12-11 21:50:05,985: 21:50:05 | 6 of 18 START view model blog_dbt_dev.parsely_base_events............ [RUN]
2017-12-11 21:50:05,985: Compiling model.parsely.parsely_base_events
2017-12-11 21:50:05,990: Acquiring new redshift connection "parsely_base_events".
2017-12-11 21:50:05,990: Re-using an available connection from the pool.
2017-12-11 21:50:05,990: Using redshift connection "parsely_base_events".
2017-12-11 21:50:05,990: On parsely_base_events: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:06,007: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:06,011: Writing injected SQL for node "model.parsely.parsely_base_events"
2017-12-11 21:50:06,012: Using redshift connection "parsely_base_events".
2017-12-11 21:50:06,012: On parsely_base_events: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:06,029: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:06,031: Writing runtime SQL for node "model.parsely.parsely_base_events"
2017-12-11 21:50:06,031: Using redshift connection "parsely_base_events".
2017-12-11 21:50:06,031: On parsely_base_events: BEGIN
2017-12-11 21:50:06,033: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:50:06,033: Using redshift connection "parsely_base_events".
2017-12-11 21:50:06,033: On parsely_base_events: create view "blog_dbt_dev"."parsely_base_events__dbt_tmp" as (
    
  select
      *
  from "blog_dbt_dev"."parsely_all_events"
  where action in ('pageview','heartbeat','videostart','vheartbeat')
  and event_id not in
    (select event_id from "blog_dbt_dev"."parsely_event_ids")
  and ua_browser <> 'Googlebot'
  --add in logic for custom:excludebottraffic== 'Yes'

  );
2017-12-11 21:50:06,154: SQL status: CREATE VIEW in 0.12 seconds
2017-12-11 21:50:06,154: On parsely_base_events: COMMIT
2017-12-11 21:50:06,154: Using redshift connection "parsely_base_events".
2017-12-11 21:50:06,155: On parsely_base_events: COMMIT
2017-12-11 21:50:06,358: SQL status: COMMIT in 0.20 seconds
2017-12-11 21:50:06,358: Using redshift connection "parsely_base_events".
2017-12-11 21:50:06,358: On parsely_base_events: BEGIN
2017-12-11 21:50:06,360: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:50:06,360: Using redshift connection "parsely_base_events".
2017-12-11 21:50:06,360: On parsely_base_events: drop view if exists "blog_dbt_dev"."parsely_base_events" cascade
2017-12-11 21:50:06,489: SQL status: DROP VIEW in 0.13 seconds
2017-12-11 21:50:06,489: On parsely_base_events: COMMIT
2017-12-11 21:50:06,489: Using redshift connection "parsely_base_events".
2017-12-11 21:50:06,489: On parsely_base_events: COMMIT
2017-12-11 21:50:06,641: SQL status: COMMIT in 0.15 seconds
2017-12-11 21:50:06,641: Using redshift connection "parsely_base_events".
2017-12-11 21:50:06,642: On parsely_base_events: BEGIN
2017-12-11 21:50:06,644: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:50:06,644: Using redshift connection "parsely_base_events".
2017-12-11 21:50:06,644: On parsely_base_events: alter table "blog_dbt_dev"."parsely_base_events__dbt_tmp" rename to "parsely_base_events"
2017-12-11 21:50:06,648: SQL status: ALTER TABLE in 0.00 seconds
2017-12-11 21:50:06,648: On parsely_base_events: COMMIT
2017-12-11 21:50:06,648: Using redshift connection "parsely_base_events".
2017-12-11 21:50:06,649: On parsely_base_events: COMMIT
2017-12-11 21:50:06,833: SQL status: COMMIT in 0.18 seconds
2017-12-11 21:50:06,834: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc55eda0810>], 'label': '9aefddd8-ba63-4f0f-9df6-0b1e2bf3434d'}
2017-12-11 21:50:06,866: 21:50:06 | 6 of 18 OK created view model blog_dbt_dev.parsely_base_events....... [CREATE VIEW in 0.85s]
2017-12-11 21:50:06,866: 21:50:06 | 7 of 18 START incremental model blog_dbt_dev.parsely_event_ids....... [RUN]
2017-12-11 21:50:06,867: Compiling model.parsely.parsely_event_ids
2017-12-11 21:50:06,872: Writing injected SQL for node "model.parsely.parsely_event_ids"
2017-12-11 21:50:06,873: Acquiring new redshift connection "parsely_event_ids".
2017-12-11 21:50:06,873: Re-using an available connection from the pool.
2017-12-11 21:50:06,873: Using redshift connection "parsely_event_ids".
2017-12-11 21:50:06,873: On parsely_event_ids: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:06,890: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:06,891: Using redshift connection "parsely_event_ids".
2017-12-11 21:50:06,891: On parsely_event_ids: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:06,908: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:06,909: Using redshift connection "parsely_event_ids".
2017-12-11 21:50:06,909: On parsely_event_ids: BEGIN
2017-12-11 21:50:06,911: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:50:06,911: Using redshift connection "parsely_event_ids".
2017-12-11 21:50:06,911: On parsely_event_ids: create temporary table "parsely_event_ids__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          

-- created to track event_ids for duplicate event_ids that do not need to be processed twice
-- how often should this truncate?
select distinct
  event_id
from "blog_dbt_dev"."parsely_base_events"
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-11 21:50:07,200: SQL status: SELECT in 0.29 seconds
2017-12-11 21:50:07,200: Using redshift connection "parsely_event_ids".
2017-12-11 21:50:07,200: On parsely_event_ids: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_event_ids__dbt_incremental_tmp'
2017-12-11 21:50:07,246: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:07,246: Using redshift connection "parsely_event_ids".
2017-12-11 21:50:07,246: On parsely_event_ids: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_event_ids' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:50:07,292: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:07,293: Using redshift connection "parsely_event_ids".
2017-12-11 21:50:07,293: On parsely_event_ids: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_event_ids' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:50:07,342: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:07,343: Writing runtime SQL for node "model.parsely.parsely_event_ids"
2017-12-11 21:50:07,344: Using redshift connection "parsely_event_ids".
2017-12-11 21:50:07,344: On parsely_event_ids: 
       

       delete
  from "blog_dbt_dev"."parsely_event_ids"
  where (event_id) in (
    select (event_id)
    from "parsely_event_ids__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_event_ids" ("event_id")
       (
         select "event_id"
         from "parsely_event_ids__dbt_incremental_tmp"
       );
     
2017-12-11 21:50:07,532: SQL status: INSERT 0 1584 in 0.19 seconds
2017-12-11 21:50:07,533: On parsely_event_ids: COMMIT
2017-12-11 21:50:07,533: Using redshift connection "parsely_event_ids".
2017-12-11 21:50:07,533: On parsely_event_ids: COMMIT
2017-12-11 21:50:08,258: SQL status: COMMIT in 0.72 seconds
2017-12-11 21:50:08,259: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc55eda5ad0>], 'label': '9aefddd8-ba63-4f0f-9df6-0b1e2bf3434d'}
2017-12-11 21:50:08,290: 21:50:08 | 7 of 18 OK created incremental model blog_dbt_dev.parsely_event_ids.. [INSERT 0 1584 in 1.39s]
2017-12-11 21:50:08,291: Compiling model.parsely.parsely_parent_pageview_keys
2017-12-11 21:50:08,296: Writing injected SQL for node "model.parsely.parsely_parent_pageview_keys"
2017-12-11 21:50:08,296: 21:50:08 | 8 of 18 START incremental model blog_dbt_dev.parsely_post_content.... [RUN]
2017-12-11 21:50:08,297: Compiling model.parsely.parsely_post_content
2017-12-11 21:50:08,303: Writing injected SQL for node "model.parsely.parsely_post_content"
2017-12-11 21:50:08,304: Acquiring new redshift connection "parsely_post_content".
2017-12-11 21:50:08,304: Re-using an available connection from the pool.
2017-12-11 21:50:08,304: Using redshift connection "parsely_post_content".
2017-12-11 21:50:08,304: On parsely_post_content: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:08,321: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:08,322: Using redshift connection "parsely_post_content".
2017-12-11 21:50:08,322: On parsely_post_content: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:08,339: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:08,340: Using redshift connection "parsely_post_content".
2017-12-11 21:50:08,340: On parsely_post_content: BEGIN
2017-12-11 21:50:08,342: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:50:08,342: Using redshift connection "parsely_post_content".
2017-12-11 21:50:08,342: On parsely_post_content: create temporary table "parsely_post_content__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          -- 1 row per content with most recent metdata



with most_recent_incoming_posts as (
  select
    pageview_post_id,
    max(ts_action) as ts_action
  from "blog_dbt_dev"."parsely_base_events"
  group by pageview_post_id
),

dedupe as (
  select
    pageview_post_id,
    metadata	,
    metadata_authors	,
    metadata_canonical_url	,
    metadata_custom_metadata	,
    metadata_duration	,
    metadata_data_source	,
    metadata_full_content_word_count	,
    metadata_image_url	,
    metadata_page_type	,
    metadata_post_id	,
    metadata_pub_date_tmsp	,
    metadata_save_date_tmsp	,
    metadata_section	,
    metadata_share_urls	,
    metadata_tags	,
    metadata_thumb_url	,
    metadata_title	,
    metadata_urls	,
    url,
    row_number() over (partition by pageview_post_id order by ts_action) as n
  from "blog_dbt_dev"."parsely_base_events"
  inner join most_recent_incoming_posts using (pageview_post_id, ts_action)
)

select
  *
from dedupe
where n=1
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-11 21:50:09,206: SQL status: SELECT in 0.86 seconds
2017-12-11 21:50:09,207: Using redshift connection "parsely_post_content".
2017-12-11 21:50:09,207: On parsely_post_content: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_post_content__dbt_incremental_tmp'
2017-12-11 21:50:09,253: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:09,253: Using redshift connection "parsely_post_content".
2017-12-11 21:50:09,253: On parsely_post_content: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_post_content' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:50:09,299: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:09,300: Using redshift connection "parsely_post_content".
2017-12-11 21:50:09,300: On parsely_post_content: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_post_content' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:50:09,346: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:09,348: Writing runtime SQL for node "model.parsely.parsely_post_content"
2017-12-11 21:50:09,349: Using redshift connection "parsely_post_content".
2017-12-11 21:50:09,349: On parsely_post_content: 
       

       delete
  from "blog_dbt_dev"."parsely_post_content"
  where (pageview_post_id) in (
    select (pageview_post_id)
    from "parsely_post_content__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_post_content" ("metadata", "n", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "metadata_full_content_word_count", "metadata_duration", "url", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "pageview_post_id")
       (
         select "metadata", "n", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "metadata_full_content_word_count", "metadata_duration", "url", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "pageview_post_id"
         from "parsely_post_content__dbt_incremental_tmp"
       );
     
2017-12-11 21:50:09,668: SQL status: INSERT 0 0 in 0.32 seconds
2017-12-11 21:50:09,669: On parsely_post_content: COMMIT
2017-12-11 21:50:09,669: Using redshift connection "parsely_post_content".
2017-12-11 21:50:09,669: On parsely_post_content: COMMIT
2017-12-11 21:50:10,125: SQL status: COMMIT in 0.46 seconds
2017-12-11 21:50:10,125: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc55ed2f710>], 'label': '9aefddd8-ba63-4f0f-9df6-0b1e2bf3434d'}
2017-12-11 21:50:10,155: 21:50:10 | 8 of 18 OK created incremental model blog_dbt_dev.parsely_post_content [INSERT 0 0 in 1.83s]
2017-12-11 21:50:10,155: 21:50:10 | 9 of 18 START incremental model blog_dbt_dev.parsely_video_content... [RUN]
2017-12-11 21:50:10,155: Compiling model.parsely.parsely_video_content
2017-12-11 21:50:10,161: Writing injected SQL for node "model.parsely.parsely_video_content"
2017-12-11 21:50:10,162: Acquiring new redshift connection "parsely_video_content".
2017-12-11 21:50:10,162: Re-using an available connection from the pool.
2017-12-11 21:50:10,162: Using redshift connection "parsely_video_content".
2017-12-11 21:50:10,163: On parsely_video_content: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:10,180: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:10,180: Using redshift connection "parsely_video_content".
2017-12-11 21:50:10,180: On parsely_video_content: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:10,196: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:10,198: Using redshift connection "parsely_video_content".
2017-12-11 21:50:10,198: On parsely_video_content: BEGIN
2017-12-11 21:50:10,199: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:50:10,200: Using redshift connection "parsely_video_content".
2017-12-11 21:50:10,200: On parsely_video_content: create temporary table "parsely_video_content__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          -- 1 row per content with most recent metdata



with most_recent_incoming_videos as (
  select
    metadata_canonical_url,
    max(ts_action) as ts_action
  from "blog_dbt_dev"."parsely_base_events"
  group by metadata_canonical_url
),

dedupe as (
  select
    metadata_canonical_url,
    metadata	,
    metadata_authors	,
    metadata_custom_metadata	,
    metadata_duration	,
    metadata_data_source	,
    metadata_full_content_word_count	,
    metadata_image_url	,
    metadata_page_type	,
    metadata_post_id	,
    metadata_pub_date_tmsp	,
    metadata_save_date_tmsp	,
    metadata_section	,
    metadata_share_urls	,
    metadata_tags	,
    metadata_thumb_url	,
    metadata_title	,
    metadata_urls	,
    url,
    row_number() over (partition by metadata_canonical_url order by ts_action) as n
  from "blog_dbt_dev"."parsely_base_events"
  inner join most_recent_incoming_videos using (metadata_canonical_url, ts_action)
)

select
  *
from dedupe
where n  = 1
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-11 21:50:10,680: SQL status: SELECT in 0.48 seconds
2017-12-11 21:50:10,680: Using redshift connection "parsely_video_content".
2017-12-11 21:50:10,680: On parsely_video_content: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_video_content__dbt_incremental_tmp'
2017-12-11 21:50:10,725: SQL status: SELECT in 0.04 seconds
2017-12-11 21:50:10,725: Using redshift connection "parsely_video_content".
2017-12-11 21:50:10,725: On parsely_video_content: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_video_content' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:50:10,771: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:10,771: Using redshift connection "parsely_video_content".
2017-12-11 21:50:10,771: On parsely_video_content: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_video_content' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:50:10,818: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:10,819: Writing runtime SQL for node "model.parsely.parsely_video_content"
2017-12-11 21:50:10,820: Using redshift connection "parsely_video_content".
2017-12-11 21:50:10,820: On parsely_video_content: 
       

       delete
  from "blog_dbt_dev"."parsely_video_content"
  where (metadata_canonical_url) in (
    select (metadata_canonical_url)
    from "parsely_video_content__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_video_content" ("metadata", "n", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "metadata_full_content_word_count", "metadata_duration", "url", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_authors", "metadata_canonical_url")
       (
         select "metadata", "n", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "metadata_full_content_word_count", "metadata_duration", "url", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_authors", "metadata_canonical_url"
         from "parsely_video_content__dbt_incremental_tmp"
       );
     
2017-12-11 21:50:11,134: SQL status: INSERT 0 0 in 0.31 seconds
2017-12-11 21:50:11,134: On parsely_video_content: COMMIT
2017-12-11 21:50:11,134: Using redshift connection "parsely_video_content".
2017-12-11 21:50:11,134: On parsely_video_content: COMMIT
2017-12-11 21:50:11,452: SQL status: COMMIT in 0.32 seconds
2017-12-11 21:50:11,452: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc55ed18b10>], 'label': '9aefddd8-ba63-4f0f-9df6-0b1e2bf3434d'}
2017-12-11 21:50:11,508: 21:50:11 | 9 of 18 OK created incremental model blog_dbt_dev.parsely_video_content [INSERT 0 0 in 1.30s]
2017-12-11 21:50:11,508: 21:50:11 | 10 of 18 START incremental model blog_dbt_dev.parsely_hbs_no_pvs..... [RUN]
2017-12-11 21:50:11,509: Compiling model.parsely.parsely_hbs_no_pvs
2017-12-11 21:50:11,516: Writing injected SQL for node "model.parsely.parsely_hbs_no_pvs"
2017-12-11 21:50:11,518: Acquiring new redshift connection "parsely_hbs_no_pvs".
2017-12-11 21:50:11,518: Re-using an available connection from the pool.
2017-12-11 21:50:11,518: Using redshift connection "parsely_hbs_no_pvs".
2017-12-11 21:50:11,518: On parsely_hbs_no_pvs: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:11,535: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:11,536: Using redshift connection "parsely_hbs_no_pvs".
2017-12-11 21:50:11,536: On parsely_hbs_no_pvs: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:11,552: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:11,553: Using redshift connection "parsely_hbs_no_pvs".
2017-12-11 21:50:11,554: On parsely_hbs_no_pvs: BEGIN
2017-12-11 21:50:11,555: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:50:11,556: Using redshift connection "parsely_hbs_no_pvs".
2017-12-11 21:50:11,556: On parsely_hbs_no_pvs: create temporary table "parsely_hbs_no_pvs__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          

with __dbt__CTE__parsely_parent_pageview_keys as (


select
    apikey,
    session_id,
    visitor_site_id,
    pageview_post_id,
    pageview_post_id as url,
    referrer,
    ts_session_current,
    ts_action,
    event_id,
    LAG(ts_action, 1) OVER
      (PARTITION BY
         apikey,
         session_id,
         visitor_site_id,
         pageview_post_id,
         referrer,
         ts_session_current
       ORDER BY ts_action) AS previous_pageview_ts_action,
     LAG(ts_action, 1) OVER
       (PARTITION BY
         apikey,
         session_id,
         visitor_site_id,
         pageview_post_id,
         referrer,
         ts_session_current
      ORDER BY ts_action desc) AS next_pageview_ts_action,
--  hash keys
    pageview_key
from "blog_dbt_dev"."parsely_base_events"
where action in ('pageview')
)select
    *
from "blog_dbt_dev"."parsely_base_events"
where action = 'heartbeat'
and pageview_key not in
(select distinct pageview_key from __dbt__CTE__parsely_parent_pageview_keys)
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-11 21:50:12,919: SQL status: SELECT in 1.36 seconds
2017-12-11 21:50:12,919: Using redshift connection "parsely_hbs_no_pvs".
2017-12-11 21:50:12,919: On parsely_hbs_no_pvs: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_hbs_no_pvs__dbt_incremental_tmp'
2017-12-11 21:50:12,966: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:12,966: Using redshift connection "parsely_hbs_no_pvs".
2017-12-11 21:50:12,967: On parsely_hbs_no_pvs: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_hbs_no_pvs' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:50:13,015: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:13,016: Using redshift connection "parsely_hbs_no_pvs".
2017-12-11 21:50:13,016: On parsely_hbs_no_pvs: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_hbs_no_pvs' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:50:13,065: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:13,068: Writing runtime SQL for node "model.parsely.parsely_hbs_no_pvs"
2017-12-11 21:50:13,069: Using redshift connection "parsely_hbs_no_pvs".
2017-12-11 21:50:13,069: On parsely_hbs_no_pvs: 
       

       delete
  from "blog_dbt_dev"."parsely_hbs_no_pvs"
  where (event_id) in (
    select (event_id)
    from "parsely_hbs_no_pvs__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_hbs_no_pvs" ("visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "n", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "session_date_id", "date_id", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "week", "year", "month", "quarter", "day", "ip_lon", "ip_lat", "apikey_visitor_id", "parsely_session_id", "utm_id", "pageview_key", "videostart_key", "customer_apikey", "pageview_post_id", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "ts_session_last", "ts_session_current", "ts_action", "insert_timestamp")
       (
         select "visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "n", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "session_date_id", "date_id", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "week", "year", "month", "quarter", "day", "ip_lon", "ip_lat", "apikey_visitor_id", "parsely_session_id", "utm_id", "pageview_key", "videostart_key", "customer_apikey", "pageview_post_id", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "ts_session_last", "ts_session_current", "ts_action", "insert_timestamp"
         from "parsely_hbs_no_pvs__dbt_incremental_tmp"
       );
     
2017-12-11 21:50:14,761: SQL status: INSERT 0 0 in 1.69 seconds
2017-12-11 21:50:14,761: On parsely_hbs_no_pvs: COMMIT
2017-12-11 21:50:14,761: Using redshift connection "parsely_hbs_no_pvs".
2017-12-11 21:50:14,761: On parsely_hbs_no_pvs: COMMIT
2017-12-11 21:50:15,109: SQL status: COMMIT in 0.35 seconds
2017-12-11 21:50:15,109: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc55edf5e50>], 'label': '9aefddd8-ba63-4f0f-9df6-0b1e2bf3434d'}
2017-12-11 21:50:15,139: 21:50:15 | 10 of 18 OK created incremental model blog_dbt_dev.parsely_hbs_no_pvs [INSERT 0 0 in 3.60s]
2017-12-11 21:50:15,139: Compiling model.parsely.parsely_parent_videostart_keys
2017-12-11 21:50:15,160: Writing injected SQL for node "model.parsely.parsely_parent_videostart_keys"
2017-12-11 21:50:15,161: Compiling model.parsely.parsely_match_hbs
2017-12-11 21:50:15,167: Writing injected SQL for node "model.parsely.parsely_match_hbs"
2017-12-11 21:50:15,167: 21:50:15 | 11 of 18 START incremental model blog_dbt_dev.parsely_vhbs_no_vs..... [RUN]
2017-12-11 21:50:15,168: Compiling model.parsely.parsely_vhbs_no_vs
2017-12-11 21:50:15,191: Writing injected SQL for node "model.parsely.parsely_vhbs_no_vs"
2017-12-11 21:50:15,192: Acquiring new redshift connection "parsely_vhbs_no_vs".
2017-12-11 21:50:15,192: Re-using an available connection from the pool.
2017-12-11 21:50:15,192: Using redshift connection "parsely_vhbs_no_vs".
2017-12-11 21:50:15,192: On parsely_vhbs_no_vs: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:15,211: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:15,211: Using redshift connection "parsely_vhbs_no_vs".
2017-12-11 21:50:15,211: On parsely_vhbs_no_vs: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:15,227: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:15,229: Using redshift connection "parsely_vhbs_no_vs".
2017-12-11 21:50:15,229: On parsely_vhbs_no_vs: BEGIN
2017-12-11 21:50:15,231: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:50:15,231: Using redshift connection "parsely_vhbs_no_vs".
2017-12-11 21:50:15,231: On parsely_vhbs_no_vs: create temporary table "parsely_vhbs_no_vs__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          

with __dbt__CTE__parsely_parent_pageview_keys as (


select
    apikey,
    session_id,
    visitor_site_id,
    pageview_post_id,
    pageview_post_id as url,
    referrer,
    ts_session_current,
    ts_action,
    event_id,
    LAG(ts_action, 1) OVER
      (PARTITION BY
         apikey,
         session_id,
         visitor_site_id,
         pageview_post_id,
         referrer,
         ts_session_current
       ORDER BY ts_action) AS previous_pageview_ts_action,
     LAG(ts_action, 1) OVER
       (PARTITION BY
         apikey,
         session_id,
         visitor_site_id,
         pageview_post_id,
         referrer,
         ts_session_current
      ORDER BY ts_action desc) AS next_pageview_ts_action,
--  hash keys
    pageview_key
from "blog_dbt_dev"."parsely_base_events"
where action in ('pageview')
),  __dbt__CTE__parsely_parent_videostart_keys as (


select
    apikey,
    session_id,
    visitor_site_id,
    metadata_canonical_url,
    url,
    referrer,
    ts_session_current,
    vs.event_id,
    vs.ts_action,
    LAG(vs.ts_action, 1) OVER
      (PARTITION BY
         apikey,
         session_id,
         visitor_site_id,
         metadata_canonical_url,
         url,
         referrer,
         ts_session_current
       ORDER BY vs.ts_action) AS previous_videostart_ts_action,
     LAG(vs.ts_action, 1) OVER
       (PARTITION BY
         apikey,
         session_id,
         visitor_site_id,
         metadata_canonical_url,
         url,
         referrer,
         ts_session_current
      ORDER BY vs.ts_action desc) AS next_videostart_ts_action,
--  hash keys
    pv.pageview_key,
    videostart_key
from "blog_dbt_dev"."parsely_base_events" vs
left join __dbt__CTE__parsely_parent_pageview_keys pv using (pageview_key, apikey, session_id, referrer, visitor_site_id, url, ts_session_current)
where action in ('videostart')
and vs.ts_action >= pv.ts_action and (case when pv.next_pageview_ts_action is not null then vs.ts_action < pv.next_pageview_ts_action else true end)
)select
    *
from "blog_dbt_dev"."parsely_base_events"
where action = 'vheartbeat'
and  videostart_key not in
(select distinct videostart_key from __dbt__CTE__parsely_parent_videostart_keys)
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-11 21:50:15,851: SQL status: SELECT in 0.62 seconds
2017-12-11 21:50:15,852: Using redshift connection "parsely_vhbs_no_vs".
2017-12-11 21:50:15,852: On parsely_vhbs_no_vs: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_vhbs_no_vs__dbt_incremental_tmp'
2017-12-11 21:50:15,902: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:15,902: Using redshift connection "parsely_vhbs_no_vs".
2017-12-11 21:50:15,902: On parsely_vhbs_no_vs: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_vhbs_no_vs' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:50:15,953: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:15,954: Using redshift connection "parsely_vhbs_no_vs".
2017-12-11 21:50:15,954: On parsely_vhbs_no_vs: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_vhbs_no_vs' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:50:16,005: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:16,008: Writing runtime SQL for node "model.parsely.parsely_vhbs_no_vs"
2017-12-11 21:50:16,009: Using redshift connection "parsely_vhbs_no_vs".
2017-12-11 21:50:16,009: On parsely_vhbs_no_vs: 
       

       delete
  from "blog_dbt_dev"."parsely_vhbs_no_vs"
  where (event_id) in (
    select (event_id)
    from "parsely_vhbs_no_vs__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_vhbs_no_vs" ("visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "n", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "session_date_id", "date_id", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "week", "year", "month", "quarter", "day", "ip_lon", "ip_lat", "apikey_visitor_id", "parsely_session_id", "utm_id", "pageview_key", "videostart_key", "customer_apikey", "pageview_post_id", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "ts_session_last", "ts_session_current", "ts_action", "insert_timestamp")
       (
         select "visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "n", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "session_date_id", "date_id", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "week", "year", "month", "quarter", "day", "ip_lon", "ip_lat", "apikey_visitor_id", "parsely_session_id", "utm_id", "pageview_key", "videostart_key", "customer_apikey", "pageview_post_id", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "ts_session_last", "ts_session_current", "ts_action", "insert_timestamp"
         from "parsely_vhbs_no_vs__dbt_incremental_tmp"
       );
     
2017-12-11 21:50:17,002: SQL status: INSERT 0 0 in 0.99 seconds
2017-12-11 21:50:17,002: On parsely_vhbs_no_vs: COMMIT
2017-12-11 21:50:17,002: Using redshift connection "parsely_vhbs_no_vs".
2017-12-11 21:50:17,002: On parsely_vhbs_no_vs: COMMIT
2017-12-11 21:50:18,041: SQL status: COMMIT in 1.04 seconds
2017-12-11 21:50:18,041: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc55ed2fa10>], 'label': '9aefddd8-ba63-4f0f-9df6-0b1e2bf3434d'}
2017-12-11 21:50:18,067: 21:50:18 | 11 of 18 OK created incremental model blog_dbt_dev.parsely_vhbs_no_vs [INSERT 0 0 in 2.87s]
2017-12-11 21:50:18,068: Compiling model.parsely.parsely_match_vhbs
2017-12-11 21:50:18,073: Writing injected SQL for node "model.parsely.parsely_match_vhbs"
2017-12-11 21:50:18,074: 21:50:18 | 12 of 18 START view model blog_dbt_dev.parsely_videoview_engagedtime. [RUN]
2017-12-11 21:50:18,074: Compiling model.parsely.parsely_videoview_engagedtime
2017-12-11 21:50:18,103: Writing injected SQL for node "model.parsely.parsely_videoview_engagedtime"
2017-12-11 21:50:18,104: Acquiring new redshift connection "parsely_videoview_engagedtime".
2017-12-11 21:50:18,104: Re-using an available connection from the pool.
2017-12-11 21:50:18,105: Using redshift connection "parsely_videoview_engagedtime".
2017-12-11 21:50:18,105: On parsely_videoview_engagedtime: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:18,122: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:18,124: Writing runtime SQL for node "model.parsely.parsely_videoview_engagedtime"
2017-12-11 21:50:18,125: Using redshift connection "parsely_videoview_engagedtime".
2017-12-11 21:50:18,125: On parsely_videoview_engagedtime: BEGIN
2017-12-11 21:50:18,127: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:50:18,127: Using redshift connection "parsely_videoview_engagedtime".
2017-12-11 21:50:18,127: On parsely_videoview_engagedtime: create view "blog_dbt_dev"."parsely_videoview_engagedtime__dbt_tmp" as (
    with  __dbt__CTE__parsely_match_vhbs as (


select
    *
from "blog_dbt_dev"."parsely_base_events"
where action in ('videostart','vheartbeat')
UNION all
select
  *
from "blog_dbt_dev"."parsely_vhbs_no_vs"
where videostart_key in
(select distinct videostart_key from "blog_dbt_dev"."parsely_base_events")
),  __dbt__CTE__parsely_parent_pageview_keys as (


select
    apikey,
    session_id,
    visitor_site_id,
    pageview_post_id,
    pageview_post_id as url,
    referrer,
    ts_session_current,
    ts_action,
    event_id,
    LAG(ts_action, 1) OVER
      (PARTITION BY
         apikey,
         session_id,
         visitor_site_id,
         pageview_post_id,
         referrer,
         ts_session_current
       ORDER BY ts_action) AS previous_pageview_ts_action,
     LAG(ts_action, 1) OVER
       (PARTITION BY
         apikey,
         session_id,
         visitor_site_id,
         pageview_post_id,
         referrer,
         ts_session_current
      ORDER BY ts_action desc) AS next_pageview_ts_action,
--  hash keys
    pageview_key
from "blog_dbt_dev"."parsely_base_events"
where action in ('pageview')
),  __dbt__CTE__parsely_parent_videostart_keys as (


select
    apikey,
    session_id,
    visitor_site_id,
    metadata_canonical_url,
    url,
    referrer,
    ts_session_current,
    vs.event_id,
    vs.ts_action,
    LAG(vs.ts_action, 1) OVER
      (PARTITION BY
         apikey,
         session_id,
         visitor_site_id,
         metadata_canonical_url,
         url,
         referrer,
         ts_session_current
       ORDER BY vs.ts_action) AS previous_videostart_ts_action,
     LAG(vs.ts_action, 1) OVER
       (PARTITION BY
         apikey,
         session_id,
         visitor_site_id,
         metadata_canonical_url,
         url,
         referrer,
         ts_session_current
      ORDER BY vs.ts_action desc) AS next_videostart_ts_action,
--  hash keys
    pv.pageview_key,
    videostart_key
from "blog_dbt_dev"."parsely_base_events" vs
left join __dbt__CTE__parsely_parent_pageview_keys pv using (pageview_key, apikey, session_id, referrer, visitor_site_id, url, ts_session_current)
where action in ('videostart')
and vs.ts_action >= pv.ts_action and (case when pv.next_pageview_ts_action is not null then vs.ts_action < pv.next_pageview_ts_action else true end)
),videostart_events as (

    select * from __dbt__CTE__parsely_match_vhbs

),

engaged_xf as (

  select
      vs.event_id,
      sum(vhb.engaged_time_inc) as engaged_time
  from videostart_events vhb
  left join __dbt__CTE__parsely_parent_videostart_keys vs using (videostart_key)
  where vhb.action = 'vheartbeat' and 
  vhb.ts_action >= vs.ts_action and
  (case when vs.next_videostart_ts_action is not null
    then vhb.ts_action < vs.next_videostart_ts_action
    else true end)
  group by vs.event_id
)

select
  *
from videostart_events
left join engaged_xf using (event_id)
where action = 'videostart'
  );
2017-12-11 21:50:18,857: SQL status: CREATE VIEW in 0.73 seconds
2017-12-11 21:50:18,858: Using redshift connection "parsely_videoview_engagedtime".
2017-12-11 21:50:18,858: On parsely_videoview_engagedtime: alter table "blog_dbt_dev"."parsely_videoview_engagedtime__dbt_tmp" rename to "parsely_videoview_engagedtime"
2017-12-11 21:50:18,863: SQL status: ALTER TABLE in 0.01 seconds
2017-12-11 21:50:18,864: On parsely_videoview_engagedtime: COMMIT
2017-12-11 21:50:18,864: Using redshift connection "parsely_videoview_engagedtime".
2017-12-11 21:50:18,864: On parsely_videoview_engagedtime: COMMIT
2017-12-11 21:50:19,507: SQL status: COMMIT in 0.64 seconds
2017-12-11 21:50:19,508: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc55ed2fa10>], 'label': '9aefddd8-ba63-4f0f-9df6-0b1e2bf3434d'}
2017-12-11 21:50:19,537: 21:50:19 | 12 of 18 OK created view model blog_dbt_dev.parsely_videoview_engagedtime [CREATE VIEW in 1.43s]
2017-12-11 21:50:19,539: 21:50:19 | 13 of 18 START incremental model blog_dbt_dev.parsely_videoviews..... [RUN]
2017-12-11 21:50:19,539: Compiling model.parsely.parsely_videoviews
2017-12-11 21:50:19,546: Writing injected SQL for node "model.parsely.parsely_videoviews"
2017-12-11 21:50:19,547: Acquiring new redshift connection "parsely_videoviews".
2017-12-11 21:50:19,547: Re-using an available connection from the pool.
2017-12-11 21:50:19,547: Using redshift connection "parsely_videoviews".
2017-12-11 21:50:19,547: On parsely_videoviews: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:19,563: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:19,563: Using redshift connection "parsely_videoviews".
2017-12-11 21:50:19,564: On parsely_videoviews: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:19,580: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:19,582: Using redshift connection "parsely_videoviews".
2017-12-11 21:50:19,582: On parsely_videoviews: BEGIN
2017-12-11 21:50:19,584: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:50:19,584: Using redshift connection "parsely_videoviews".
2017-12-11 21:50:19,584: On parsely_videoviews: create temporary table "parsely_videoviews__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          -- 1 row per videoview
-- sum engaged time for all heartbeats
-- metrics: videoviews, engaged time



with video_events as (

    select * from "blog_dbt_dev"."parsely_videoview_engagedtime"
),

-- derived fields
publish_watch_time_xf as (
    select
        event_id,
        (TIMESTAMP 'epoch'
          + left(metadata_pub_date_tmsp,10)::bigint
          * INTERVAL '1 Second ') as publish_time,
        (TIMESTAMP 'epoch'
          + left(timestamp_info_nginx_ms,10)::bigint
          * INTERVAL '1 Second ') as watch_time

    from video_events

)

select
    -- aggregated fields
    engaged_time as video_engaged_time,
    1 as videostart_counter,
    -- derived fields
    datediff(hour, publish_time, watch_time) as hours_since_publish,
    datediff(day, publish_time, watch_time) as days_since_publish,
    datediff(week, publish_time, watch_time) as weeks_since_publish,
    publish_time,
    watch_time,
    customer_apikey,
    pageview_key,
    videostart_key,
    parsely_session_id,
    utm_id,
    apikey_visitor_id,
    -- event time fields
    quarter,
    month,
    year,
    week,
    date_id,
    session_date_id,
    -- standard fields
    action	,
    apikey	,
    campaign_id	,
    display,
    display_avail_height	,
    display_avail_width	,
    display_pixel_depth	,
    display_total_height	,
    display_total_width	,
    event_id	,
    extra_data,
    flags_is_amp	,
    ip_city	,
    ip_continent	,
    ip_country	,
    ip_lat::FLOAT8	,
    ip_lon	,
    ip_postal	,
    ip_subdivision	,
    ip_timezone	,
    ip_market_name	,
    ip_market_nielsen	,
    ip_market_doubleclick	,
    metadata	,
    metadata_authors	,
    metadata_canonical_url	,
    metadata_custom_metadata	,
    metadata_duration	,
    metadata_data_source	,
    metadata_full_content_word_count	,
    metadata_image_url	,
    metadata_page_type	,
    metadata_post_id	,
    metadata_pub_date_tmsp	,
    metadata_save_date_tmsp	,
    metadata_section	,
    metadata_share_urls	,
    metadata_tags	,
    metadata_thumb_url	,
    metadata_title	,
    metadata_urls	,
    ref_category	,
    ref_clean	,
    ref_domain	,
    ref_fragment	,
    ref_netloc	,
    ref_params	,
    ref_path	,
    ref_query	,
    ref_scheme	,
    referrer	,
    session	,
    session_id	,
    session_initial_referrer	,
    session_initial_url	,
    session_last_session_timestamp	,
    session_timestamp	,
    slot	,
    sref_category	,
    sref_clean	,
    sref_domain	,
    sref_fragment	,
    sref_netloc	,
    sref_params	,
    sref_path	,
    sref_query	,
    sref_scheme	,
    surl_clean	,
    surl_domain	,
    surl_fragment	,
    surl_netloc	,
    surl_params	,
    surl_path	,
    surl_query	,
    surl_scheme	,
    timestamp_info	,
    timestamp_info_nginx_ms	,
    timestamp_info_override_ms	,
    timestamp_info_pixel_ms	,
    ts_action	,
    ts_session_current	,
    ts_session_last	,
    ua_browser	,
    ua_browserversion	,
    ua_device	,
    ua_devicebrand	,
    ua_devicemodel	,
    ua_devicetouchcapable	,
    ua_devicetype	,
    ua_os	,
    ua_osversion	,
    url	,
    url_clean	,
    url_domain	,
    url_fragment	,
    url_netloc	,
    url_params	,
    url_path	,
    url_query	,
    url_scheme	,
    utm_campaign	,
    utm_medium	,
    utm_source	,
    utm_term	,
    utm_content	,
    user_agent	,
    version	,
    visitor	,
    visitor_ip	,
    visitor_network_id	,
    visitor_site_id
  from video_events
  left join publish_watch_time_xf using (event_id)
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-11 21:50:22,203: SQL status: SELECT in 2.62 seconds
2017-12-11 21:50:22,203: Using redshift connection "parsely_videoviews".
2017-12-11 21:50:22,203: On parsely_videoviews: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_videoviews__dbt_incremental_tmp'
2017-12-11 21:50:22,249: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:22,249: Using redshift connection "parsely_videoviews".
2017-12-11 21:50:22,250: On parsely_videoviews: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_videoviews' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:50:22,298: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:22,298: Using redshift connection "parsely_videoviews".
2017-12-11 21:50:22,298: On parsely_videoviews: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_videoviews' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:50:22,349: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:22,352: Writing runtime SQL for node "model.parsely.parsely_videoviews"
2017-12-11 21:50:22,353: Using redshift connection "parsely_videoviews".
2017-12-11 21:50:22,353: On parsely_videoviews: 
       

       delete
  from "blog_dbt_dev"."parsely_videoviews"
  where (event_id) in (
    select (event_id)
    from "parsely_videoviews__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_videoviews" ("visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "weeks_since_publish", "days_since_publish", "hours_since_publish", "video_engaged_time", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "session_date_id", "date_id", "videostart_counter", "ip_lon", "ip_lat", "week", "year", "month", "quarter", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "apikey_visitor_id", "utm_id", "parsely_session_id", "videostart_key", "pageview_key", "customer_apikey", "ts_session_last", "ts_session_current", "ts_action", "watch_time", "publish_time")
       (
         select "visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "weeks_since_publish", "days_since_publish", "hours_since_publish", "video_engaged_time", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "session_date_id", "date_id", "videostart_counter", "ip_lon", "ip_lat", "week", "year", "month", "quarter", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "apikey_visitor_id", "utm_id", "parsely_session_id", "videostart_key", "pageview_key", "customer_apikey", "ts_session_last", "ts_session_current", "ts_action", "watch_time", "publish_time"
         from "parsely_videoviews__dbt_incremental_tmp"
       );
     
2017-12-11 21:50:22,867: SQL status: INSERT 0 0 in 0.51 seconds
2017-12-11 21:50:22,867: On parsely_videoviews: COMMIT
2017-12-11 21:50:22,867: Using redshift connection "parsely_videoviews".
2017-12-11 21:50:22,867: On parsely_videoviews: COMMIT
2017-12-11 21:50:23,873: SQL status: COMMIT in 1.01 seconds
2017-12-11 21:50:23,874: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc55eda0790>], 'label': '9aefddd8-ba63-4f0f-9df6-0b1e2bf3434d'}
2017-12-11 21:50:23,903: 21:50:23 | 13 of 18 OK created incremental model blog_dbt_dev.parsely_videoviews [INSERT 0 0 in 4.33s]
2017-12-11 21:50:23,903: 21:50:23 | 14 of 18 START view model blog_dbt_dev.parsely_pageview_engagedtime.. [RUN]
2017-12-11 21:50:23,903: Compiling model.parsely.parsely_pageview_engagedtime
2017-12-11 21:50:23,921: Writing injected SQL for node "model.parsely.parsely_pageview_engagedtime"
2017-12-11 21:50:23,922: Acquiring new redshift connection "parsely_pageview_engagedtime".
2017-12-11 21:50:23,922: Re-using an available connection from the pool.
2017-12-11 21:50:23,922: Using redshift connection "parsely_pageview_engagedtime".
2017-12-11 21:50:23,922: On parsely_pageview_engagedtime: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:23,940: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:23,942: Writing runtime SQL for node "model.parsely.parsely_pageview_engagedtime"
2017-12-11 21:50:23,942: Using redshift connection "parsely_pageview_engagedtime".
2017-12-11 21:50:23,942: On parsely_pageview_engagedtime: BEGIN
2017-12-11 21:50:23,944: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:50:23,944: Using redshift connection "parsely_pageview_engagedtime".
2017-12-11 21:50:23,944: On parsely_pageview_engagedtime: create view "blog_dbt_dev"."parsely_pageview_engagedtime__dbt_tmp" as (
    with  __dbt__CTE__parsely_match_hbs as (


select
    *
from "blog_dbt_dev"."parsely_base_events"
where action in ('pageview','heartbeat')
UNION all
select
  *
from "blog_dbt_dev"."parsely_hbs_no_pvs"
where pageview_key in
(select distinct pageview_key from "blog_dbt_dev"."parsely_base_events")
),  __dbt__CTE__parsely_parent_pageview_keys as (


select
    apikey,
    session_id,
    visitor_site_id,
    pageview_post_id,
    pageview_post_id as url,
    referrer,
    ts_session_current,
    ts_action,
    event_id,
    LAG(ts_action, 1) OVER
      (PARTITION BY
         apikey,
         session_id,
         visitor_site_id,
         pageview_post_id,
         referrer,
         ts_session_current
       ORDER BY ts_action) AS previous_pageview_ts_action,
     LAG(ts_action, 1) OVER
       (PARTITION BY
         apikey,
         session_id,
         visitor_site_id,
         pageview_post_id,
         referrer,
         ts_session_current
      ORDER BY ts_action desc) AS next_pageview_ts_action,
--  hash keys
    pageview_key
from "blog_dbt_dev"."parsely_base_events"
where action in ('pageview')
),pageview_events as (

    select * from __dbt__CTE__parsely_match_hbs

),

engaged_xf as (

  select
      pv.event_id,
      sum(hb.engaged_time_inc) as engaged_time
  from pageview_events hb
  left join __dbt__CTE__parsely_parent_pageview_keys pv using (pageview_key)
  where hb.action = 'heartbeat' and
    hb.ts_action >= pv.ts_action and
    (case when pv.next_pageview_ts_action is not null
      then hb.ts_action < pv.next_pageview_ts_action
      else true end)
  group by pv.event_id
),

video_xf as (
  select
    pageview_key,
    sum(video_engaged_time) as video_engaged_time,
    sum(videostart_counter) as videoviews
  from "blog_dbt_dev"."parsely_videoviews"
  group by pageview_key
)

select
  *
from pageview_events
left join engaged_xf using (event_id)
left join video_xf using (pageview_key)
where action = 'pageview'
  );
2017-12-11 21:50:24,473: SQL status: CREATE VIEW in 0.53 seconds
2017-12-11 21:50:24,474: Using redshift connection "parsely_pageview_engagedtime".
2017-12-11 21:50:24,474: On parsely_pageview_engagedtime: alter table "blog_dbt_dev"."parsely_pageview_engagedtime__dbt_tmp" rename to "parsely_pageview_engagedtime"
2017-12-11 21:50:24,479: SQL status: ALTER TABLE in 0.01 seconds
2017-12-11 21:50:24,479: On parsely_pageview_engagedtime: COMMIT
2017-12-11 21:50:24,479: Using redshift connection "parsely_pageview_engagedtime".
2017-12-11 21:50:24,479: On parsely_pageview_engagedtime: COMMIT
2017-12-11 21:50:24,639: SQL status: COMMIT in 0.16 seconds
2017-12-11 21:50:24,640: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc55eda5990>], 'label': '9aefddd8-ba63-4f0f-9df6-0b1e2bf3434d'}
2017-12-11 21:50:24,665: 21:50:24 | 14 of 18 OK created view model blog_dbt_dev.parsely_pageview_engagedtime [CREATE VIEW in 0.74s]
2017-12-11 21:50:24,665: 21:50:24 | 15 of 18 START incremental model blog_dbt_dev.parsely_pageviews...... [RUN]
2017-12-11 21:50:24,665: Compiling model.parsely.parsely_pageviews
2017-12-11 21:50:24,672: Writing injected SQL for node "model.parsely.parsely_pageviews"
2017-12-11 21:50:24,673: Acquiring new redshift connection "parsely_pageviews".
2017-12-11 21:50:24,673: Re-using an available connection from the pool.
2017-12-11 21:50:24,673: Using redshift connection "parsely_pageviews".
2017-12-11 21:50:24,673: On parsely_pageviews: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:24,690: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:24,691: Using redshift connection "parsely_pageviews".
2017-12-11 21:50:24,691: On parsely_pageviews: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:24,707: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:24,709: Using redshift connection "parsely_pageviews".
2017-12-11 21:50:24,709: On parsely_pageviews: BEGIN
2017-12-11 21:50:24,711: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:50:24,711: Using redshift connection "parsely_pageviews".
2017-12-11 21:50:24,711: On parsely_pageviews: create temporary table "parsely_pageviews__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          -- 1 row per pageview
-- sum engaged time for all heartbeats
-- metrics: pageviews, engaged time



with pageview_events as (

    select * from "blog_dbt_dev"."parsely_pageview_engagedtime"
),

-- derived fields
publish_read_time_xf as (
    select
        event_id,
        (TIMESTAMP 'epoch'
          + left(metadata_pub_date_tmsp,10)::bigint
          * INTERVAL '1 Second ') as publish_time,
        (TIMESTAMP 'epoch'
          + left(timestamp_info_nginx_ms,10)::bigint
          * INTERVAL '1 Second ') as read_time
    from pageview_events

)

select
    -- aggregated fields
    engaged_time,
    1 as pageview_counter,
    video_engaged_time,
    videoviews,
    -- derived fields
    datediff(hour, publish_time, read_time) as hours_since_publish,
    datediff(day, publish_time, read_time) as days_since_publish,
    datediff(week, publish_time, read_time) as weeks_since_publish,
    publish_time,
    read_time,
    customer_apikey,
    pageview_post_id,
    -- event time fields
    day,
    quarter,
    month,
    year,
    week,
    date_id,
    session_date_id,
    -- keys
    pageview_key,
    parsely_session_id,
    utm_id,
    apikey_visitor_id,
    -- standard fields
    action	,
    apikey	,
    campaign_id	,
    display,
    display_avail_height	,
    display_avail_width	,
    display_pixel_depth	,
    display_total_height	,
    display_total_width	,
    event_id	,
    extra_data,
    flags_is_amp	,
    ip_city	,
    ip_continent	,
    ip_country	,
    ip_lat::FLOAT8	,
    ip_lon	,
    ip_postal	,
    ip_subdivision	,
    ip_timezone	,
    ip_market_name	,
    ip_market_nielsen	,
    ip_market_doubleclick	,
    metadata	,
    metadata_authors	,
    metadata_canonical_url	,
    metadata_custom_metadata	,
    metadata_duration	,
    metadata_data_source	,
    metadata_full_content_word_count	,
    metadata_image_url	,
    metadata_page_type	,
    metadata_post_id	,
    metadata_pub_date_tmsp	,
    metadata_save_date_tmsp	,
    metadata_section	,
    metadata_share_urls	,
    metadata_tags	,
    metadata_thumb_url	,
    metadata_title	,
    metadata_urls	,
    ref_category	,
    ref_clean	,
    ref_domain	,
    ref_fragment	,
    ref_netloc	,
    ref_params	,
    ref_path	,
    ref_query	,
    ref_scheme	,
    referrer	,
    session	,
    session_id	,
    session_initial_referrer	,
    session_initial_url	,
    session_last_session_timestamp	,
    session_timestamp	,
    slot	,
    sref_category	,
    sref_clean	,
    sref_domain	,
    sref_fragment	,
    sref_netloc	,
    sref_params	,
    sref_path	,
    sref_query	,
    sref_scheme	,
    surl_clean	,
    surl_domain	,
    surl_fragment	,
    surl_netloc	,
    surl_params	,
    surl_path	,
    surl_query	,
    surl_scheme	,
    timestamp_info	,
    timestamp_info_nginx_ms	,
    timestamp_info_override_ms	,
    timestamp_info_pixel_ms	,
    ts_action	,
    ts_session_current	,
    ts_session_last	,
    ua_browser	,
    ua_browserversion	,
    ua_device	,
    ua_devicebrand	,
    ua_devicemodel	,
    ua_devicetouchcapable	,
    ua_devicetype	,
    ua_os	,
    ua_osversion	,
    url	,
    url_clean	,
    url_domain	,
    url_fragment	,
    url_netloc	,
    url_params	,
    url_path	,
    url_query	,
    url_scheme	,
    utm_campaign	,
    utm_medium	,
    utm_source	,
    utm_term	,
    utm_content	,
    user_agent	,
    version	,
    visitor	,
    visitor_ip	,
    visitor_network_id	,
    visitor_site_id
  from pageview_events
  left join publish_read_time_xf using (event_id)
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-11 21:50:29,129: SQL status: SELECT in 4.42 seconds
2017-12-11 21:50:29,129: Using redshift connection "parsely_pageviews".
2017-12-11 21:50:29,129: On parsely_pageviews: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_pageviews__dbt_incremental_tmp'
2017-12-11 21:50:29,174: SQL status: SELECT in 0.04 seconds
2017-12-11 21:50:29,175: Using redshift connection "parsely_pageviews".
2017-12-11 21:50:29,175: On parsely_pageviews: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_pageviews' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:50:29,223: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:29,224: Using redshift connection "parsely_pageviews".
2017-12-11 21:50:29,224: On parsely_pageviews: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_pageviews' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:50:29,273: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:29,276: Writing runtime SQL for node "model.parsely.parsely_pageviews"
2017-12-11 21:50:29,277: Using redshift connection "parsely_pageviews".
2017-12-11 21:50:29,277: On parsely_pageviews: 
       

       delete
  from "blog_dbt_dev"."parsely_pageviews"
  where (event_id) in (
    select (event_id)
    from "parsely_pageviews__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_pageviews" ("visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "weeks_since_publish", "days_since_publish", "hours_since_publish", "videoviews", "video_engaged_time", "engaged_time", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "session_date_id", "date_id", "pageview_counter", "ip_lon", "ip_lat", "week", "year", "month", "quarter", "day", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "apikey_visitor_id", "utm_id", "parsely_session_id", "pageview_key", "pageview_post_id", "customer_apikey", "ts_session_last", "ts_session_current", "ts_action", "read_time", "publish_time")
       (
         select "visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "weeks_since_publish", "days_since_publish", "hours_since_publish", "videoviews", "video_engaged_time", "engaged_time", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "session_date_id", "date_id", "pageview_counter", "ip_lon", "ip_lat", "week", "year", "month", "quarter", "day", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "apikey_visitor_id", "utm_id", "parsely_session_id", "pageview_key", "pageview_post_id", "customer_apikey", "ts_session_last", "ts_session_current", "ts_action", "read_time", "publish_time"
         from "parsely_pageviews__dbt_incremental_tmp"
       );
     
2017-12-11 21:50:30,322: SQL status: INSERT 0 0 in 1.05 seconds
2017-12-11 21:50:30,323: On parsely_pageviews: COMMIT
2017-12-11 21:50:30,323: Using redshift connection "parsely_pageviews".
2017-12-11 21:50:30,323: On parsely_pageviews: COMMIT
2017-12-11 21:50:30,636: SQL status: COMMIT in 0.31 seconds
2017-12-11 21:50:30,636: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc55edf5890>], 'label': '9aefddd8-ba63-4f0f-9df6-0b1e2bf3434d'}
2017-12-11 21:50:30,665: 21:50:30 | 15 of 18 OK created incremental model blog_dbt_dev.parsely_pageviews. [INSERT 0 0 in 5.97s]
2017-12-11 21:50:30,666: 21:50:30 | 16 of 18 START incremental model blog_dbt_dev.parsely_campaigns...... [RUN]
2017-12-11 21:50:30,666: Compiling model.parsely.parsely_campaigns
2017-12-11 21:50:30,669: Acquiring new redshift connection "parsely_campaigns".
2017-12-11 21:50:30,670: Re-using an available connection from the pool.
2017-12-11 21:50:30,670: Using redshift connection "parsely_campaigns".
2017-12-11 21:50:30,670: On parsely_campaigns: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:30,687: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:30,691: Writing injected SQL for node "model.parsely.parsely_campaigns"
2017-12-11 21:50:30,692: Using redshift connection "parsely_campaigns".
2017-12-11 21:50:30,692: On parsely_campaigns: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:30,708: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:30,709: Using redshift connection "parsely_campaigns".
2017-12-11 21:50:30,709: On parsely_campaigns: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:30,726: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:30,727: Using redshift connection "parsely_campaigns".
2017-12-11 21:50:30,727: On parsely_campaigns: BEGIN
2017-12-11 21:50:30,729: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:50:30,729: Using redshift connection "parsely_campaigns".
2017-12-11 21:50:30,729: On parsely_campaigns: create temporary table "parsely_campaigns__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          -- 1 row per campaign
-- metrics: pageviews, engaged time, videostarts, video engaged time, visitors



with incoming_campaigns as (
  select
    utm_id,
    utm_campaign,
    utm_medium,
    utm_source,
    utm_term,
    utm_content,
    engaged_time,
    pageview_counter,
    video_engaged_time,
    videoviews,
--  dedupe field
    row_number() over (partition by utm_id order by ts_action) as n
  from "blog_dbt_dev"."parsely_pageviews"
),



relevant_existing as (

    select
        *
    from "blog_dbt_dev"."parsely_campaigns"
    where utm_id in (select utm_id from incoming_campaigns)

),

-- left join fields from old data: min_tstamp
unioned as (

    select
      *
    from incoming_campaigns

    union all

    select
        *
    from relevant_existing

),

merged as (

    select
      n,
      utm_id,
      utm_campaign,
      utm_medium,
      utm_source,
      utm_term,
      utm_content,
      sum(engaged_time) as engaged_time,
      sum(pageview_counter) as pageview_counter,
      sum(video_engaged_time) as video_engaged_time,
      sum(videoviews) as videoviews
    from unioned
    group by n, utm_id, utm_campaign, utm_medium, utm_source, utm_term, utm_content

),



dedupe as (
    select
      *
    from merged
)

select
  *
from dedupe
where n = 1
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-11 21:50:31,418: SQL status: SELECT in 0.69 seconds
2017-12-11 21:50:31,418: Using redshift connection "parsely_campaigns".
2017-12-11 21:50:31,418: On parsely_campaigns: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_campaigns__dbt_incremental_tmp'
2017-12-11 21:50:31,465: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:31,465: Using redshift connection "parsely_campaigns".
2017-12-11 21:50:31,465: On parsely_campaigns: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_campaigns' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:50:31,513: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:31,513: Using redshift connection "parsely_campaigns".
2017-12-11 21:50:31,513: On parsely_campaigns: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_campaigns' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:50:31,561: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:31,562: Writing runtime SQL for node "model.parsely.parsely_campaigns"
2017-12-11 21:50:31,563: Using redshift connection "parsely_campaigns".
2017-12-11 21:50:31,563: On parsely_campaigns: 
       

       delete
  from "blog_dbt_dev"."parsely_campaigns"
  where (utm_id) in (
    select (utm_id)
    from "parsely_campaigns__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_campaigns" ("n", "videoviews", "video_engaged_time", "engaged_time", "pageview_counter", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "utm_id")
       (
         select "n", "videoviews", "video_engaged_time", "engaged_time", "pageview_counter", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "utm_id"
         from "parsely_campaigns__dbt_incremental_tmp"
       );
     
2017-12-11 21:50:31,701: SQL status: INSERT 0 6 in 0.14 seconds
2017-12-11 21:50:31,702: On parsely_campaigns: COMMIT
2017-12-11 21:50:31,702: Using redshift connection "parsely_campaigns".
2017-12-11 21:50:31,702: On parsely_campaigns: COMMIT
2017-12-11 21:50:32,429: SQL status: COMMIT in 0.73 seconds
2017-12-11 21:50:32,429: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc55eda5990>], 'label': '9aefddd8-ba63-4f0f-9df6-0b1e2bf3434d'}
2017-12-11 21:50:32,456: 21:50:32 | 16 of 18 OK created incremental model blog_dbt_dev.parsely_campaigns. [INSERT 0 6 in 1.76s]
2017-12-11 21:50:32,456: Compiling model.parsely.parsely_incoming_users
2017-12-11 21:50:32,467: Writing injected SQL for node "model.parsely.parsely_incoming_users"
2017-12-11 21:50:32,468: 21:50:32 | 17 of 18 START incremental model blog_dbt_dev.parsely_users.......... [RUN]
2017-12-11 21:50:32,468: Compiling model.parsely.parsely_users
2017-12-11 21:50:32,477: Acquiring new redshift connection "parsely_users".
2017-12-11 21:50:32,477: Re-using an available connection from the pool.
2017-12-11 21:50:32,477: Using redshift connection "parsely_users".
2017-12-11 21:50:32,477: On parsely_users: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:32,495: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:32,540: Writing injected SQL for node "model.parsely.parsely_users"
2017-12-11 21:50:32,541: Using redshift connection "parsely_users".
2017-12-11 21:50:32,541: On parsely_users: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:32,558: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:32,559: Using redshift connection "parsely_users".
2017-12-11 21:50:32,559: On parsely_users: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:32,575: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:32,578: Using redshift connection "parsely_users".
2017-12-11 21:50:32,578: On parsely_users: BEGIN
2017-12-11 21:50:32,580: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:50:32,580: Using redshift connection "parsely_users".
2017-12-11 21:50:32,580: On parsely_users: create temporary table "parsely_users__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          -- 1 row per visitor_site_Id
-- includes visitor type, returning, new, subscribers, etc
-- first login, last login, etc



-- second time: builds temp table; deletes duplicates by unique key, inserts new data
--


with  __dbt__CTE__parsely_incoming_users as (
-- 1 row per visitor_site_Id
-- includes visitor type, returning, new, subscribers, etc
-- first login, last login, etc



with incoming_users_pageviews as (
  select
      apikey,
      visitor_site_id,
      visitor_ip,
      --custom fields
      apikey_visitor_id,
      customer_apikey,
      -- metrics
      max(ts_action) as last_timestamp,
      sum(pageview_counter) as user_total_pageviews,
      sum(engaged_time) as user_total_engaged_time,
      0 as user_total_videoviews,
      0 as user_total_video_engaged_time
  from "blog_dbt_dev"."parsely_pageviews"
  group by apikey, visitor_site_id, visitor_ip, apikey_visitor_id, customer_apikey
),

incoming_users_videostarts as (
  select
      apikey,
      visitor_site_id,
      visitor_ip,
      --custom fields
      apikey_visitor_id,
      customer_apikey,
      -- metrics
      max(ts_action) as last_timestamp,
      0 as user_total_pageviews,
      0 as user_total_engaged_time,
      sum(videostart_counter) as user_total_videoviews,
      sum(video_engaged_time) as user_total_video_engaged_time
  from "blog_dbt_dev"."parsely_videoviews"
  group by apikey, visitor_site_id, visitor_ip,   apikey_visitor_id, customer_apikey
)

select * from incoming_users_pageviews
union all
select * from incoming_users_videostarts
),incoming_users as (
  select
      apikey,
      apikey_visitor_id,
      visitor_site_id,
      visitor_ip,
      customer_apikey,
      -- dates and times
      max(last_timestamp) as last_timestamp,
      date(min(last_timestamp)) as date_first_seen,
      date(max(last_timestamp)) as date_last_seen,
      -- metrics to aggregate
      sum(user_total_pageviews) as user_total_pageviews,
      sum(user_total_engaged_time) as user_total_engaged_time,
      sum(user_total_videoviews) as user_total_videoviews,
      sum(user_total_video_engaged_time) as user_total_video_engaged_time
  from __dbt__CTE__parsely_incoming_users
  group by 1,2,3,4,5
),



relevant_existing as (

    select
        apikey,
        apikey_visitor_id,
        visitor_site_id,
        visitor_ip,
        -- current user type
        iu.customer_apikey,
        -- dates and times
        eu.last_timestamp,
        eu.date_first_seen,
        eu.date_last_seen,
        -- metrics to aggregate
        eu.user_total_pageviews,
        eu.user_total_engaged_time,
        eu.user_total_videoviews,
        eu.user_total_video_engaged_time
    from "blog_dbt_dev"."parsely_users" as eu
    left join incoming_users as iu using
      (apikey_visitor_id, apikey, visitor_site_id, visitor_ip)

),

unioned as (

    -- combined pageviews and videostarts
    select
        apikey,
        apikey_visitor_id,
        visitor_site_id,
        visitor_ip,
        customer_apikey,
        -- dates and times
        last_timestamp,
        date_first_seen,
        date_last_seen,
        -- metrics to aggregate
        user_total_pageviews,
        user_total_engaged_time,
        user_total_videoviews,
        user_total_video_engaged_time
    from incoming_users

    union all

    select
        apikey,
        apikey_visitor_id,
        visitor_site_id,
        visitor_ip,
        --incoming users fields
        customer_apikey,
        -- dates and times
        last_timestamp,
        date_first_seen,
        date_last_seen,
        -- metrics to aggregate
        user_total_pageviews,
        user_total_engaged_time,
        user_total_videoviews,
        user_total_video_engaged_time
    from relevant_existing

),

merged as (

    select
        apikey,
        apikey_visitor_id,
        visitor_site_id,
        visitor_ip,
        --incoming users fields
        customer_apikey,
        -- dates and times
        max(last_timestamp) as last_timestamp,
        min(date_first_seen) as date_first_seen,
        max(date_last_seen) as date_last_seen,
        -- metrics
        sum(user_total_pageviews) as user_total_pageviews,
        sum(user_total_engaged_time) as user_total_engaged_time,
        sum(user_total_videoviews) as user_total_videoviews,
        sum(user_total_video_engaged_time) as user_total_video_engaged_time
    from unioned
    group by 1,2,3,4,5


)



select
    1 as user_counter,
    apikey,
    apikey_visitor_id,
    visitor_site_id,
    visitor_ip,
    customer_apikey,
    -- dates and times
    last_timestamp,
    date_first_seen,
    date_last_seen,
    -- metrics to aggregate
    user_total_pageviews,
    user_total_engaged_time,
    user_total_videoviews,
    user_total_video_engaged_time,
    -- derived fields
    case when date_first_seen < date(SYSDATE)
      then 'Returning'
      else 'New' end as user_type,
    case when user_total_pageviews>=30
      then 'Loyalty'
      else 'Non-Loyalty' end as user_engagement_level,
    DATEDIFF(day, last_timestamp, SYSDATE) as days_since_last_session
  from merged
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-11 21:50:33,558: SQL status: SELECT in 0.98 seconds
2017-12-11 21:50:33,559: Using redshift connection "parsely_users".
2017-12-11 21:50:33,559: On parsely_users: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_users__dbt_incremental_tmp'
2017-12-11 21:50:33,605: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:33,605: Using redshift connection "parsely_users".
2017-12-11 21:50:33,606: On parsely_users: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_users' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:50:33,652: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:33,652: Using redshift connection "parsely_users".
2017-12-11 21:50:33,652: On parsely_users: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_users' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:50:33,699: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:33,700: Writing runtime SQL for node "model.parsely.parsely_users"
2017-12-11 21:50:33,701: Using redshift connection "parsely_users".
2017-12-11 21:50:33,701: On parsely_users: 
       

       delete
  from "blog_dbt_dev"."parsely_users"
  where (apikey_visitor_id) in (
    select (apikey_visitor_id)
    from "parsely_users__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_users" ("days_since_last_session", "user_total_video_engaged_time", "user_total_videoviews", "user_total_engaged_time", "user_total_pageviews", "user_counter", "user_engagement_level", "user_type", "customer_apikey", "visitor_ip", "visitor_site_id", "apikey_visitor_id", "apikey", "date_last_seen", "date_first_seen", "last_timestamp")
       (
         select "days_since_last_session", "user_total_video_engaged_time", "user_total_videoviews", "user_total_engaged_time", "user_total_pageviews", "user_counter", "user_engagement_level", "user_type", "customer_apikey", "visitor_ip", "visitor_site_id", "apikey_visitor_id", "apikey", "date_last_seen", "date_first_seen", "last_timestamp"
         from "parsely_users__dbt_incremental_tmp"
       );
     
2017-12-11 21:50:33,876: SQL status: INSERT 0 1031 in 0.17 seconds
2017-12-11 21:50:33,876: On parsely_users: COMMIT
2017-12-11 21:50:33,876: Using redshift connection "parsely_users".
2017-12-11 21:50:33,877: On parsely_users: COMMIT
2017-12-11 21:50:34,276: SQL status: COMMIT in 0.40 seconds
2017-12-11 21:50:34,276: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc55edf5890>], 'label': '9aefddd8-ba63-4f0f-9df6-0b1e2bf3434d'}
2017-12-11 21:50:34,307: 21:50:34 | 17 of 18 OK created incremental model blog_dbt_dev.parsely_users..... [INSERT 0 1031 in 1.81s]
2017-12-11 21:50:34,307: 21:50:34 | 18 of 18 START incremental model blog_dbt_dev.parsely_sessions....... [RUN]
2017-12-11 21:50:34,308: Compiling model.parsely.parsely_sessions
2017-12-11 21:50:34,315: Writing injected SQL for node "model.parsely.parsely_sessions"
2017-12-11 21:50:34,316: Acquiring new redshift connection "parsely_sessions".
2017-12-11 21:50:34,316: Re-using an available connection from the pool.
2017-12-11 21:50:34,316: Using redshift connection "parsely_sessions".
2017-12-11 21:50:34,316: On parsely_sessions: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:34,334: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:34,334: Using redshift connection "parsely_sessions".
2017-12-11 21:50:34,334: On parsely_sessions: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:34,350: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:34,352: Using redshift connection "parsely_sessions".
2017-12-11 21:50:34,352: On parsely_sessions: BEGIN
2017-12-11 21:50:34,354: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:50:34,354: Using redshift connection "parsely_sessions".
2017-12-11 21:50:34,354: On parsely_sessions: create temporary table "parsely_sessions__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          -- 1 row per session
-- Join from the parsely_pageviews and parsely_videovideos
-- aggregated: pageviews, engaged time, videoviews, video engaged time
-- should also have session visitor type, returning, new, subscribers, etc (what was true at the time of the session)
-- metrics: sessions, pageviws, videoviews, engaged time, video watch time




with session_metrics as (
  select
      parsely_session_id,
      sum(pageview_counter) as pageviews,
      sum(engaged_time) as pageview_engaged_time,
      sum(videoviews) as videoviews,
      sum(video_engaged_time) as video_engaged_time
  from "blog_dbt_dev"."parsely_pageviews"
  group by parsely_session_id
),

users as (
    select
      apikey_visitor_id,
      user_type,
      user_engagement_level
    from "blog_dbt_dev"."parsely_users"
),

session_xf as (
  select  --add row number 1=1 here
  --  id
      parsely_session_id,
      apikey_visitor_id,
  --  session user dimensions
      user_type as session_user_type,
      user_engagement_level as session_user_engagement_level,
  --  counter field
      1 as session_counter,
  --  session time fields
      DATE_PART('day',ts_session_current) as session_day,
      DATE_PART('quarter',ts_session_current) as session_quarter,
      DATE_PART('month',ts_session_current) as session_month,
      DATE_PART('year',ts_session_current) as session_year,
      DATE_PART('week',ts_session_current) as session_week,
      session_date_id,
      pv.customer_apikey,
      apikey	,
      flags_is_amp	,
      ip_city	,
      ip_continent	,
      ip_country	,
      ip_lat::FLOAT8	,
      ip_lon	,
      ip_postal	,
      ip_subdivision	,
      ip_timezone	,
      ip_market_name	,
      ip_market_nielsen	,
      ip_market_doubleclick	,
      session	,
      session_id	,
      session_initial_referrer	,
      session_initial_url	,
      session_last_session_timestamp	,
      session_timestamp	,
      slot	,
      sref_category	,
      sref_clean	,
      sref_domain	,
      sref_fragment	,
      sref_netloc	,
      sref_params	,
      sref_path	,
      sref_query	,
      sref_scheme	,
      surl_clean	,
      surl_domain	,
      surl_fragment	,
      surl_netloc	,
      surl_params	,
      surl_path	,
      surl_query	,
      surl_scheme	,
      ua_browser	,
      ua_browserversion	,
      ua_device	,
      ua_devicebrand	,
      ua_devicemodel	,
      ua_devicetouchcapable	,
      ua_devicetype	,
      ua_os	,
      ua_osversion	,
      user_agent	,
      version	,
      visitor	,
      visitor_ip	,
      visitor_network_id	,
      visitor_site_id
  from "blog_dbt_dev"."parsely_pageviews" as pv
  left join users using (apikey_visitor_id)
)

select
  *
from session_xf
left join session_metrics using (parsely_session_id)
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-11 21:50:35,237: SQL status: SELECT in 0.88 seconds
2017-12-11 21:50:35,237: Using redshift connection "parsely_sessions".
2017-12-11 21:50:35,237: On parsely_sessions: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_sessions__dbt_incremental_tmp'
2017-12-11 21:50:35,285: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:35,286: Using redshift connection "parsely_sessions".
2017-12-11 21:50:35,286: On parsely_sessions: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_sessions' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:50:35,333: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:35,334: Using redshift connection "parsely_sessions".
2017-12-11 21:50:35,334: On parsely_sessions: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_sessions' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:50:35,381: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:35,384: Writing runtime SQL for node "model.parsely.parsely_sessions"
2017-12-11 21:50:35,384: Using redshift connection "parsely_sessions".
2017-12-11 21:50:35,384: On parsely_sessions: 
       

       delete
  from "blog_dbt_dev"."parsely_sessions"
  where (parsely_session_id) in (
    select (parsely_session_id)
    from "parsely_sessions__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_sessions" ("visitor", "ua_devicetouchcapable", "slot", "session", "flags_is_amp", "video_engaged_time", "videoviews", "pageview_engaged_time", "pageviews", "session_timestamp", "session_last_session_timestamp", "version", "session_id", "session_date_id", "session_counter", "ip_lon", "ip_lat", "session_week", "session_year", "session_month", "session_quarter", "session_day", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "apikey", "customer_apikey", "session_user_engagement_level", "session_user_type", "apikey_visitor_id", "parsely_session_id")
       (
         select "visitor", "ua_devicetouchcapable", "slot", "session", "flags_is_amp", "video_engaged_time", "videoviews", "pageview_engaged_time", "pageviews", "session_timestamp", "session_last_session_timestamp", "version", "session_id", "session_date_id", "session_counter", "ip_lon", "ip_lat", "session_week", "session_year", "session_month", "session_quarter", "session_day", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "apikey", "customer_apikey", "session_user_engagement_level", "session_user_type", "apikey_visitor_id", "parsely_session_id"
         from "parsely_sessions__dbt_incremental_tmp"
       );
     
2017-12-11 21:50:36,028: SQL status: INSERT 0 1261 in 0.64 seconds
2017-12-11 21:50:36,028: On parsely_sessions: COMMIT
2017-12-11 21:50:36,028: Using redshift connection "parsely_sessions".
2017-12-11 21:50:36,028: On parsely_sessions: COMMIT
2017-12-11 21:50:36,822: SQL status: COMMIT in 0.79 seconds
2017-12-11 21:50:36,822: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc55edf5890>], 'label': '9aefddd8-ba63-4f0f-9df6-0b1e2bf3434d'}
2017-12-11 21:50:36,849: 21:50:36 | 18 of 18 OK created incremental model blog_dbt_dev.parsely_sessions.. [INSERT 0 1261 in 2.51s]
2017-12-11 21:50:36,904: Using redshift connection "master".
2017-12-11 21:50:36,904: On master: BEGIN
2017-12-11 21:50:36,907: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:50:36,907: On master: COMMIT
2017-12-11 21:50:36,907: Using redshift connection "master".
2017-12-11 21:50:36,907: On master: COMMIT
2017-12-11 21:50:36,908: SQL status: COMMIT in 0.00 seconds
2017-12-11 21:50:36,909: Compiling operation.parsely.parsely-on-run-end-0
2017-12-11 21:50:36,913: Writing injected SQL for node "operation.parsely.parsely-on-run-end-0"
2017-12-11 21:50:36,914: Compiling operation.parsely.parsely-on-run-end-1
2017-12-11 21:50:36,919: Writing injected SQL for node "operation.parsely.parsely-on-run-end-1"
2017-12-11 21:50:36,920: Using redshift connection "master".
2017-12-11 21:50:36,920: On master:  select 1 
2017-12-11 21:50:36,922: SQL status: SELECT in 0.00 seconds
2017-12-11 21:50:36,922: Acquiring new redshift connection "master".
2017-12-11 21:50:36,922: Re-using an available connection from the pool.
2017-12-11 21:50:36,922: Using redshift connection "master".
2017-12-11 21:50:36,922: On master: truncate table parsely_blog_rawdata
2017-12-11 21:50:37,255: SQL status: TRUNCATE TABLE and COMMIT TRANSACTION in 0.33 seconds
2017-12-11 21:50:37,255: 21:50:37 | 
2017-12-11 21:50:37,256: 21:50:37 | Finished running 3 view models, 15 incremental models in 51.38s.
2017-12-11 21:50:37,256: 
2017-12-11 21:50:37,256: Completed successfully
2017-12-11 21:50:37,256: 
Done. PASS=18 ERROR=0 SKIP=0 TOTAL=18
2017-12-11 21:50:37,257: Sending event: {'category': 'dbt', 'action': 'invocation', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc55ee55190>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc55ee551d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc55ee26950>], 'label': 'end'}
2017-12-11 21:50:37,287: Flushing usage events
2017-12-11 21:50:44,902: Tracking: tracking
2017-12-11 21:50:44,903: Sending event: {'category': 'dbt', 'action': 'invocation', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9bf222a190>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9bf222a1d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9bf222a390>], 'label': 'start'}
2017-12-11 21:50:44,937: Loading dependency project from /data/virtualenvs/parsely-raw-data/local/lib/python2.7/site-packages/dbt/include
2017-12-11 21:50:44,952: Loading dependency project from /home/annelise/parsely_raw_data/dbt/parsely_dpl/dbt_modules
2017-12-11 21:50:44,954: Parsing core.sql
2017-12-11 21:50:44,965: Parsing etc/get_custom_schema.sql
2017-12-11 21:50:44,970: Parsing schema_tests/relationships.sql
2017-12-11 21:50:44,972: Parsing schema_tests/accepted_values.sql
2017-12-11 21:50:44,975: Parsing schema_tests/not_null.sql
2017-12-11 21:50:44,976: Parsing schema_tests/unique.sql
2017-12-11 21:50:44,978: Parsing materializations/wrapper.sql
2017-12-11 21:50:44,981: Parsing materializations/archive.sql
2017-12-11 21:50:45,008: Parsing materializations/table.sql
2017-12-11 21:50:45,025: Parsing materializations/helpers.sql
2017-12-11 21:50:45,040: Parsing materializations/bigquery.sql
2017-12-11 21:50:45,052: Parsing materializations/view.sql
2017-12-11 21:50:45,066: Parsing materializations/incremental.sql
2017-12-11 21:50:45,089: Parsing adapters/redshift.sql
2017-12-11 21:50:45,106: Parsing adapters/bigquery.sql
2017-12-11 21:50:45,110: Parsing adapters/postgres.sql
2017-12-11 21:50:45,113: Parsing adapters/common.sql
2017-12-11 21:50:45,130: Parsing model.parsely.parsely_audit
2017-12-11 21:50:45,131: Parsing model.parsely.parsely_video_content
2017-12-11 21:50:45,134: Parsing model.parsely.parsely_post_content
2017-12-11 21:50:45,137: Parsing model.parsely.parsely_parent_videostart_keys
2017-12-11 21:50:45,139: Parsing model.parsely.parsely_rawdata
2017-12-11 21:50:45,142: Parsing model.parsely.parsely_all_events
2017-12-11 21:50:45,147: Acquiring new redshift connection "parsely_all_events".
2017-12-11 21:50:45,147: Opening a new connection (0 currently allocated)
2017-12-11 21:50:45,217: Using redshift connection "parsely_all_events".
2017-12-11 21:50:45,217: On parsely_all_events: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:45,237: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:45,238: Parsing model.parsely.parsely_event_ids
2017-12-11 21:50:45,240: Parsing model.parsely.parsely_parent_pageview_keys
2017-12-11 21:50:45,242: Parsing model.parsely.parsely_base_events
2017-12-11 21:50:45,246: Acquiring new redshift connection "parsely_base_events".
2017-12-11 21:50:45,246: Re-using an available connection from the pool.
2017-12-11 21:50:45,246: Using redshift connection "parsely_base_events".
2017-12-11 21:50:45,246: On parsely_base_events: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:45,262: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:45,263: Parsing model.parsely.parsely_vhbs_no_vs
2017-12-11 21:50:45,265: Parsing model.parsely.parsely_match_vhbs
2017-12-11 21:50:45,268: Parsing model.parsely.parsely_match_hbs
2017-12-11 21:50:45,271: Parsing model.parsely.parsely_hbs_no_pvs
2017-12-11 21:50:45,273: Parsing model.parsely.parsely_pageview_engagedtime
2017-12-11 21:50:45,275: Parsing model.parsely.parsely_pageviews
2017-12-11 21:50:45,280: Parsing model.parsely.parsely_videoview_engagedtime
2017-12-11 21:50:45,282: Parsing model.parsely.parsely_videoviews
2017-12-11 21:50:45,286: Parsing model.parsely.parsely_incoming_users
2017-12-11 21:50:45,291: Parsing model.parsely.parsely_users
2017-12-11 21:50:45,299: Acquiring new redshift connection "parsely_users".
2017-12-11 21:50:45,299: Re-using an available connection from the pool.
2017-12-11 21:50:45,299: Using redshift connection "parsely_users".
2017-12-11 21:50:45,299: On parsely_users: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:45,316: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:45,319: Parsing model.parsely.parsely_errors
2017-12-11 21:50:45,323: Parsing model.parsely.parsely_bot_traffic
2017-12-11 21:50:45,326: Parsing model.parsely.parsely_custom_events
2017-12-11 21:50:45,331: Parsing model.parsely.parsely_sessions
2017-12-11 21:50:45,336: Parsing model.parsely.parsely_campaigns
2017-12-11 21:50:45,339: Acquiring new redshift connection "parsely_campaigns".
2017-12-11 21:50:45,339: Re-using an available connection from the pool.
2017-12-11 21:50:45,339: Using redshift connection "parsely_campaigns".
2017-12-11 21:50:45,339: On parsely_campaigns: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:45,356: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:45,360: Parsing operation.parsely.parsely-on-run-end-0
2017-12-11 21:50:45,362: Parsing operation.parsely.parsely-on-run-end-1
2017-12-11 21:50:45,366: Found 40 macros, 0 analyses, 0 archives, 0 tests, 24 models, 2 operations
2017-12-11 21:50:45,373: 
2017-12-11 21:50:45,375: Acquiring new redshift connection "master".
2017-12-11 21:50:45,375: Re-using an available connection from the pool.
2017-12-11 21:50:45,375: Using redshift connection "master".
2017-12-11 21:50:45,375: On master: select distinct nspname from pg_namespace
2017-12-11 21:50:45,378: SQL status: SELECT in 0.00 seconds
2017-12-11 21:50:45,380: Using redshift connection "master".
2017-12-11 21:50:45,380: On master: BEGIN
2017-12-11 21:50:45,382: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:50:45,382: On master: COMMIT
2017-12-11 21:50:45,382: Using redshift connection "master".
2017-12-11 21:50:45,382: On master: COMMIT
2017-12-11 21:50:45,383: SQL status: COMMIT in 0.00 seconds
2017-12-11 21:50:45,388: 21:50:45 | Concurrency: 1 threads (target='dev')
2017-12-11 21:50:45,389: 21:50:45 | 
2017-12-11 21:50:45,389: Using redshift connection "master".
2017-12-11 21:50:45,389: On master: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:45,405: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:45,462: 21:50:45 | 1 of 18 START incremental model blog_dbt_dev.parsely_rawdata......... [RUN]
2017-12-11 21:50:45,463: Compiling model.parsely.parsely_rawdata
2017-12-11 21:50:45,468: Writing injected SQL for node "model.parsely.parsely_rawdata"
2017-12-11 21:50:45,469: Acquiring new redshift connection "parsely_rawdata".
2017-12-11 21:50:45,469: Opening a new connection (1 currently allocated)
2017-12-11 21:50:45,481: Using redshift connection "parsely_rawdata".
2017-12-11 21:50:45,481: On parsely_rawdata: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:45,500: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:45,501: Using redshift connection "parsely_rawdata".
2017-12-11 21:50:45,501: On parsely_rawdata: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:45,517: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:45,518: Using redshift connection "parsely_rawdata".
2017-12-11 21:50:45,518: On parsely_rawdata: BEGIN
2017-12-11 21:50:45,519: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:50:45,519: Using redshift connection "parsely_rawdata".
2017-12-11 21:50:45,519: On parsely_rawdata: create temporary table "parsely_rawdata__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          

-- created to track event_ids for duplicate event_ids that do not need to be processed twice
-- how often should this truncate?
select
  *,
  CURRENT_TIMESTAMP as insert_timestamp
from parsely_blog_rawdata
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-11 21:50:46,304: SQL status: SELECT in 0.78 seconds
2017-12-11 21:50:46,304: Using redshift connection "parsely_rawdata".
2017-12-11 21:50:46,304: On parsely_rawdata: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_rawdata__dbt_incremental_tmp'
2017-12-11 21:50:46,355: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:46,355: Using redshift connection "parsely_rawdata".
2017-12-11 21:50:46,355: On parsely_rawdata: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_rawdata' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:50:46,403: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:46,404: Using redshift connection "parsely_rawdata".
2017-12-11 21:50:46,404: On parsely_rawdata: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_rawdata' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:50:46,452: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:46,455: Writing runtime SQL for node "model.parsely.parsely_rawdata"
2017-12-11 21:50:46,455: Using redshift connection "parsely_rawdata".
2017-12-11 21:50:46,455: On parsely_rawdata: 
       

       delete
  from "blog_dbt_dev"."parsely_rawdata"
  where (event_id) in (
    select (event_id)
    from "parsely_rawdata__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_rawdata" ("visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "ip_lon", "ip_lat", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "ts_session_last", "ts_session_current", "ts_action", "insert_timestamp")
       (
         select "visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "ip_lon", "ip_lat", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "ts_session_last", "ts_session_current", "ts_action", "insert_timestamp"
         from "parsely_rawdata__dbt_incremental_tmp"
       );
     
2017-12-11 21:50:49,210: SQL status: INSERT 0 4415 in 2.75 seconds
2017-12-11 21:50:49,210: On parsely_rawdata: COMMIT
2017-12-11 21:50:49,210: Using redshift connection "parsely_rawdata".
2017-12-11 21:50:49,210: On parsely_rawdata: COMMIT
2017-12-11 21:50:50,675: SQL status: COMMIT in 1.46 seconds
2017-12-11 21:50:50,675: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9bf21cbc10>], 'label': 'c00e34de-e456-44d5-9bd8-9ea2c4943fc5'}
2017-12-11 21:50:50,731: 21:50:50 | 1 of 18 OK created incremental model blog_dbt_dev.parsely_rawdata.... [INSERT 0 4415 in 5.21s]
2017-12-11 21:50:50,731: 21:50:50 | 2 of 18 START incremental model blog_dbt_dev.parsely_all_events...... [RUN]
2017-12-11 21:50:50,731: Compiling model.parsely.parsely_all_events
2017-12-11 21:50:50,736: Acquiring new redshift connection "parsely_all_events".
2017-12-11 21:50:50,737: Re-using an available connection from the pool.
2017-12-11 21:50:50,737: Using redshift connection "parsely_all_events".
2017-12-11 21:50:50,737: On parsely_all_events: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:50,753: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:50,757: Writing injected SQL for node "model.parsely.parsely_all_events"
2017-12-11 21:50:50,758: Using redshift connection "parsely_all_events".
2017-12-11 21:50:50,758: On parsely_all_events: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:50,775: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:50,775: Using redshift connection "parsely_all_events".
2017-12-11 21:50:50,775: On parsely_all_events: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:50,792: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:50,793: Using redshift connection "parsely_all_events".
2017-12-11 21:50:50,793: On parsely_all_events: BEGIN
2017-12-11 21:50:50,795: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:50:50,795: Using redshift connection "parsely_all_events".
2017-12-11 21:50:50,795: On parsely_all_events: create temporary table "parsely_all_events__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          

with new_events as (

    select *
    from "blog_dbt_dev"."parsely_rawdata"

    
    where insert_timestamp > (
        select coalesce(max(t.insert_timestamp), '0001-01-01') from "blog_dbt_dev"."parsely_all_events" as t
    )
    


),


dedupe as (
  select
      *,
  --  event action dates and times
      DATE_PART('day',ts_action) as day,
      DATE_PART('quarter',ts_action) as quarter,
      DATE_PART('month',ts_action) as month,
      DATE_PART('year',ts_action) as year,
      DATE_PART('week',ts_action) as week,
      (DATE_PART('y', ts_action)*10000+DATE_PART('mon', ts_action)*100+DATE_PART('day', ts_action))::int AS date_id,
  --    DATE_PART('h',ts_action) as hour,
  --    DATE_PART('m',ts_action) as minute,
  --    DATE_PART('s',ts_action) as second,
  --  other date IDs for joining to the calendar dimension
      (DATE_PART('y', ts_session_current)*10000+DATE_PART('mon', ts_session_current)*100+DATE_PART('day', ts_session_current))::int AS session_date_id,
  --  transformed fields
      coalesce(metadata_canonical_url,url) as pageview_post_id,
      json_extract_path_text(
          extra_data,
          '_customer_apikey')     as customer_apikey,
  --  dedupe field as we can receive duplicate event_ids that can be excluded
      row_number() over (partition by event_id order by ts_action) as n,
  --  hash identifier fields
      md5(
        coalesce(apikey,'') || '_' ||
        coalesce(session_id::text,'') || '_' ||
        coalesce(visitor_site_id,'') || '_' ||
        coalesce(url,'') || '_' ||
        coalesce(metadata_canonical_url,'') || '_' ||
        coalesce(referrer,'') || '_' ||
        coalesce(ts_session_current::text,''))         as videostart_key,
     md5(
        coalesce(apikey,'') || '_' ||
        coalesce(session_id::text,'') || '_' ||
        coalesce(visitor_site_id,'') || '_' ||
        coalesce(metadata_canonical_url,url) || '_' ||
        coalesce(referrer,'') || '_' ||
        coalesce(ts_session_current::text,''))         as pageview_key,
      md5(
        coalesce(apikey,'') || '_' ||
        coalesce(utm_campaign,'') || '_' ||
        coalesce(utm_medium,'') || '_' ||
        coalesce(utm_source ,'') || '_' ||
        coalesce(utm_term,'') || '_' ||
        coalesce(utm_content,'') )               as utm_id,
      md5(
        coalesce(apikey,'') || '_' ||
        coalesce(session_id::text,'') || '_' ||
        coalesce(visitor_site_id,'') || '_' ||
        coalesce(session_timestamp::text,''))            as parsely_session_id,
      md5(
        coalesce(apikey,'') || '_' ||
        coalesce(visitor_ip,'') || '_' ||
        coalesce(visitor_site_id,''))           as apikey_visitor_id
  from new_events
)

select
  *
from dedupe
where n = 1
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-11 21:50:52,345: SQL status: SELECT in 1.55 seconds
2017-12-11 21:50:52,345: Using redshift connection "parsely_all_events".
2017-12-11 21:50:52,345: On parsely_all_events: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_all_events__dbt_incremental_tmp'
2017-12-11 21:50:52,391: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:52,391: Using redshift connection "parsely_all_events".
2017-12-11 21:50:52,392: On parsely_all_events: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_all_events' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:50:52,440: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:52,441: Using redshift connection "parsely_all_events".
2017-12-11 21:50:52,441: On parsely_all_events: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_all_events' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:50:52,491: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:52,494: Writing runtime SQL for node "model.parsely.parsely_all_events"
2017-12-11 21:50:52,495: Using redshift connection "parsely_all_events".
2017-12-11 21:50:52,495: On parsely_all_events: 
       

       delete
  from "blog_dbt_dev"."parsely_all_events"
  where (event_id) in (
    select (event_id)
    from "parsely_all_events__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_all_events" ("visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "n", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "session_date_id", "date_id", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "week", "year", "month", "quarter", "day", "ip_lon", "ip_lat", "apikey_visitor_id", "parsely_session_id", "utm_id", "pageview_key", "videostart_key", "customer_apikey", "pageview_post_id", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "ts_session_last", "ts_session_current", "ts_action", "insert_timestamp")
       (
         select "visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "n", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "session_date_id", "date_id", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "week", "year", "month", "quarter", "day", "ip_lon", "ip_lat", "apikey_visitor_id", "parsely_session_id", "utm_id", "pageview_key", "videostart_key", "customer_apikey", "pageview_post_id", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "ts_session_last", "ts_session_current", "ts_action", "insert_timestamp"
         from "parsely_all_events__dbt_incremental_tmp"
       );
     
2017-12-11 21:50:52,872: SQL status: INSERT 0 4415 in 0.38 seconds
2017-12-11 21:50:52,873: On parsely_all_events: COMMIT
2017-12-11 21:50:52,873: Using redshift connection "parsely_all_events".
2017-12-11 21:50:52,873: On parsely_all_events: COMMIT
2017-12-11 21:50:53,874: SQL status: COMMIT in 1.00 seconds
2017-12-11 21:50:53,874: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9bf220e210>], 'label': 'c00e34de-e456-44d5-9bd8-9ea2c4943fc5'}
2017-12-11 21:50:53,907: 21:50:53 | 2 of 18 OK created incremental model blog_dbt_dev.parsely_all_events. [INSERT 0 4415 in 3.14s]
2017-12-11 21:50:53,907: 21:50:53 | 3 of 18 START incremental model blog_dbt_dev.parsely_bot_traffic..... [RUN]
2017-12-11 21:50:53,908: Compiling model.parsely.parsely_bot_traffic
2017-12-11 21:50:53,914: Writing injected SQL for node "model.parsely.parsely_bot_traffic"
2017-12-11 21:50:53,915: Acquiring new redshift connection "parsely_bot_traffic".
2017-12-11 21:50:53,915: Re-using an available connection from the pool.
2017-12-11 21:50:53,915: Using redshift connection "parsely_bot_traffic".
2017-12-11 21:50:53,915: On parsely_bot_traffic: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:53,934: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:53,934: Using redshift connection "parsely_bot_traffic".
2017-12-11 21:50:53,934: On parsely_bot_traffic: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:53,951: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:53,952: Using redshift connection "parsely_bot_traffic".
2017-12-11 21:50:53,952: On parsely_bot_traffic: BEGIN
2017-12-11 21:50:53,954: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:50:53,954: Using redshift connection "parsely_bot_traffic".
2017-12-11 21:50:53,955: On parsely_bot_traffic: create temporary table "parsely_bot_traffic__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          --
-- 1 row per null action event



with bot_traffic as (

    select * from "blog_dbt_dev"."parsely_all_events"
    where ua_browser = 'Googlebot' --to be updated to flag_is_bot_traffic

)


select

    -- metrics and counter fields
    1 as bot_traffic_counter,
    -- derived fields
    customer_apikey,
    pageview_post_id,
    -- standard fields
    action	,
    apikey	,
    campaign_id	,
    display,
    display_avail_height	,
    display_avail_width	,
    display_pixel_depth	,
    display_total_height	,
    display_total_width	,
    engaged_time_inc,
    event_id	,
    extra_data,
    flags_is_amp	,
    ip_city	,
    ip_continent	,
    ip_country	,
    ip_lat::FLOAT8	,
    ip_lon	,
    ip_postal	,
    ip_subdivision	,
    ip_timezone	,
    ip_market_name	,
    ip_market_nielsen	,
    ip_market_doubleclick	,
    metadata	,
    metadata_authors	,
    metadata_canonical_url	,
    metadata_custom_metadata	,
    metadata_duration	,
    metadata_data_source	,
    metadata_full_content_word_count	,
    metadata_image_url	,
    metadata_page_type	,
    metadata_post_id	,
    metadata_pub_date_tmsp	,
    metadata_save_date_tmsp	,
    metadata_section	,
    metadata_share_urls	,
    metadata_tags	,
    metadata_thumb_url	,
    metadata_title	,
    metadata_urls	,
    ref_category	,
    ref_clean	,
    ref_domain	,
    ref_fragment	,
    ref_netloc	,
    ref_params	,
    ref_path	,
    ref_query	,
    ref_scheme	,
    referrer	,
    session	,
    session_id	,
    session_initial_referrer	,
    session_initial_url	,
    session_last_session_timestamp	,
    session_timestamp	,
    slot	,
    sref_category	,
    sref_clean	,
    sref_domain	,
    sref_fragment	,
    sref_netloc	,
    sref_params	,
    sref_path	,
    sref_query	,
    sref_scheme	,
    surl_clean	,
    surl_domain	,
    surl_fragment	,
    surl_netloc	,
    surl_params	,
    surl_path	,
    surl_query	,
    surl_scheme	,
    timestamp_info	,
    timestamp_info_nginx_ms	,
    timestamp_info_override_ms	,
    timestamp_info_pixel_ms	,
    ts_action	,
    ts_session_current	,
    ts_session_last	,
    ua_browser	,
    ua_browserversion	,
    ua_device	,
    ua_devicebrand	,
    ua_devicemodel	,
    ua_devicetouchcapable	,
    ua_devicetype	,
    ua_os	,
    ua_osversion	,
    url	,
    url_clean	,
    url_domain	,
    url_fragment	,
    url_netloc	,
    url_params	,
    url_path	,
    url_query	,
    url_scheme	,
    utm_campaign	,
    utm_medium	,
    utm_source	,
    utm_term	,
    utm_content	,
    user_agent	,
    version	,
    visitor	,
    visitor_ip	,
    visitor_network_id	,
    visitor_site_id
  from bot_traffic
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-11 21:50:54,501: SQL status: SELECT in 0.55 seconds
2017-12-11 21:50:54,501: Using redshift connection "parsely_bot_traffic".
2017-12-11 21:50:54,502: On parsely_bot_traffic: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_bot_traffic__dbt_incremental_tmp'
2017-12-11 21:50:54,550: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:54,551: Using redshift connection "parsely_bot_traffic".
2017-12-11 21:50:54,551: On parsely_bot_traffic: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_bot_traffic' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:50:54,598: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:54,599: Using redshift connection "parsely_bot_traffic".
2017-12-11 21:50:54,599: On parsely_bot_traffic: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_bot_traffic' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:50:54,646: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:54,649: Writing runtime SQL for node "model.parsely.parsely_bot_traffic"
2017-12-11 21:50:54,650: Using redshift connection "parsely_bot_traffic".
2017-12-11 21:50:54,650: On parsely_bot_traffic: 
       

       delete
  from "blog_dbt_dev"."parsely_bot_traffic"
  where (event_id) in (
    select (event_id)
    from "parsely_bot_traffic__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_bot_traffic" ("visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "bot_traffic_counter", "ip_lon", "ip_lat", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "pageview_post_id", "customer_apikey", "ts_session_last", "ts_session_current", "ts_action")
       (
         select "visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "bot_traffic_counter", "ip_lon", "ip_lat", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "pageview_post_id", "customer_apikey", "ts_session_last", "ts_session_current", "ts_action"
         from "parsely_bot_traffic__dbt_incremental_tmp"
       );
     
2017-12-11 21:50:54,885: SQL status: INSERT 0 0 in 0.23 seconds
2017-12-11 21:50:54,885: On parsely_bot_traffic: COMMIT
2017-12-11 21:50:54,886: Using redshift connection "parsely_bot_traffic".
2017-12-11 21:50:54,886: On parsely_bot_traffic: COMMIT
2017-12-11 21:50:55,290: SQL status: COMMIT in 0.40 seconds
2017-12-11 21:50:55,291: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9bf220e150>], 'label': 'c00e34de-e456-44d5-9bd8-9ea2c4943fc5'}
2017-12-11 21:50:55,344: 21:50:55 | 3 of 18 OK created incremental model blog_dbt_dev.parsely_bot_traffic [INSERT 0 0 in 1.38s]
2017-12-11 21:50:55,345: 21:50:55 | 4 of 18 START incremental model blog_dbt_dev.parsely_custom_events... [RUN]
2017-12-11 21:50:55,345: Compiling model.parsely.parsely_custom_events
2017-12-11 21:50:55,353: Writing injected SQL for node "model.parsely.parsely_custom_events"
2017-12-11 21:50:55,354: Acquiring new redshift connection "parsely_custom_events".
2017-12-11 21:50:55,354: Re-using an available connection from the pool.
2017-12-11 21:50:55,354: Using redshift connection "parsely_custom_events".
2017-12-11 21:50:55,354: On parsely_custom_events: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:55,371: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:55,371: Using redshift connection "parsely_custom_events".
2017-12-11 21:50:55,371: On parsely_custom_events: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:55,388: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:55,389: Using redshift connection "parsely_custom_events".
2017-12-11 21:50:55,390: On parsely_custom_events: BEGIN
2017-12-11 21:50:55,391: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:50:55,391: Using redshift connection "parsely_custom_events".
2017-12-11 21:50:55,392: On parsely_custom_events: create temporary table "parsely_custom_events__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          -- 1 row per custom event

-- 1 row per pageview
-- sum engaged time for all heartbeats
-- metrics: pageviews, engaged time



with custom_events as (

    select * from "blog_dbt_dev"."parsely_all_events"
    where action not in ('pageview','heartbeat','videostart','vheartbeat') and action is not null

),

-- derived fields
custom_publish_read_time_xf as (
    select
        event_id,
        (TIMESTAMP 'epoch'
          + left(metadata_pub_date_tmsp,10)::bigint
          * INTERVAL '1 Second ') as publish_time,
        (TIMESTAMP 'epoch'
          + left(timestamp_info_nginx_ms,10)::bigint
          * INTERVAL '1 Second ') as event_time

    from custom_events

)


select

    -- metrics and counter fields
    1 as custom_event_counter,
    -- derived fields
    datediff(hour, publish_time, event_time) as hours_since_publish,
    datediff(day, publish_time, event_time) as days_since_publish,
    datediff(week, publish_time, event_time) as weeks_since_publish,
    publish_time,
    event_time,
    customer_apikey,
    pageview_post_id,
    -- standard fields
    action	,
    apikey	,
    campaign_id	,
    display,
    display_avail_height	,
    display_avail_width	,
    display_pixel_depth	,
    display_total_height	,
    display_total_width	,
    engaged_time_inc,
    event_id	,
    extra_data,
    flags_is_amp	,
    ip_city	,
    ip_continent	,
    ip_country	,
    ip_lat::FLOAT8	,
    ip_lon	,
    ip_postal	,
    ip_subdivision	,
    ip_timezone	,
    ip_market_name	,
    ip_market_nielsen	,
    ip_market_doubleclick	,
    metadata	,
    metadata_authors	,
    metadata_canonical_url	,
    metadata_custom_metadata	,
    metadata_duration	,
    metadata_data_source	,
    metadata_full_content_word_count	,
    metadata_image_url	,
    metadata_page_type	,
    metadata_post_id	,
    metadata_pub_date_tmsp	,
    metadata_save_date_tmsp	,
    metadata_section	,
    metadata_share_urls	,
    metadata_tags	,
    metadata_thumb_url	,
    metadata_title	,
    metadata_urls	,
    ref_category	,
    ref_clean	,
    ref_domain	,
    ref_fragment	,
    ref_netloc	,
    ref_params	,
    ref_path	,
    ref_query	,
    ref_scheme	,
    referrer	,
    session	,
    session_id	,
    session_initial_referrer	,
    session_initial_url	,
    session_last_session_timestamp	,
    session_timestamp	,
    slot	,
    sref_category	,
    sref_clean	,
    sref_domain	,
    sref_fragment	,
    sref_netloc	,
    sref_params	,
    sref_path	,
    sref_query	,
    sref_scheme	,
    surl_clean	,
    surl_domain	,
    surl_fragment	,
    surl_netloc	,
    surl_params	,
    surl_path	,
    surl_query	,
    surl_scheme	,
    timestamp_info	,
    timestamp_info_nginx_ms	,
    timestamp_info_override_ms	,
    timestamp_info_pixel_ms	,
    ts_action	,
    ts_session_current	,
    ts_session_last	,
    ua_browser	,
    ua_browserversion	,
    ua_device	,
    ua_devicebrand	,
    ua_devicemodel	,
    ua_devicetouchcapable	,
    ua_devicetype	,
    ua_os	,
    ua_osversion	,
    url	,
    url_clean	,
    url_domain	,
    url_fragment	,
    url_netloc	,
    url_params	,
    url_path	,
    url_query	,
    url_scheme	,
    utm_campaign	,
    utm_medium	,
    utm_source	,
    utm_term	,
    utm_content	,
    user_agent	,
    version	,
    visitor	,
    visitor_ip	,
    visitor_network_id	,
    visitor_site_id
  from custom_events
  left join custom_publish_read_time_xf using (event_id)
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-11 21:50:56,563: SQL status: SELECT in 1.17 seconds
2017-12-11 21:50:56,563: Using redshift connection "parsely_custom_events".
2017-12-11 21:50:56,563: On parsely_custom_events: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_custom_events__dbt_incremental_tmp'
2017-12-11 21:50:56,610: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:56,610: Using redshift connection "parsely_custom_events".
2017-12-11 21:50:56,610: On parsely_custom_events: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_custom_events' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:50:56,659: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:56,659: Using redshift connection "parsely_custom_events".
2017-12-11 21:50:56,659: On parsely_custom_events: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_custom_events' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:50:56,708: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:56,711: Writing runtime SQL for node "model.parsely.parsely_custom_events"
2017-12-11 21:50:56,711: Using redshift connection "parsely_custom_events".
2017-12-11 21:50:56,711: On parsely_custom_events: 
       

       delete
  from "blog_dbt_dev"."parsely_custom_events"
  where (event_id) in (
    select (event_id)
    from "parsely_custom_events__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_custom_events" ("visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "weeks_since_publish", "days_since_publish", "hours_since_publish", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "custom_event_counter", "ip_lon", "ip_lat", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "pageview_post_id", "customer_apikey", "ts_session_last", "ts_session_current", "ts_action", "event_time", "publish_time")
       (
         select "visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "weeks_since_publish", "days_since_publish", "hours_since_publish", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "custom_event_counter", "ip_lon", "ip_lat", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "pageview_post_id", "customer_apikey", "ts_session_last", "ts_session_current", "ts_action", "event_time", "publish_time"
         from "parsely_custom_events__dbt_incremental_tmp"
       );
     
2017-12-11 21:50:56,959: SQL status: INSERT 0 0 in 0.25 seconds
2017-12-11 21:50:56,959: On parsely_custom_events: COMMIT
2017-12-11 21:50:56,959: Using redshift connection "parsely_custom_events".
2017-12-11 21:50:56,959: On parsely_custom_events: COMMIT
2017-12-11 21:50:57,323: SQL status: COMMIT in 0.36 seconds
2017-12-11 21:50:57,324: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9bf220e150>], 'label': 'c00e34de-e456-44d5-9bd8-9ea2c4943fc5'}
2017-12-11 21:50:57,354: 21:50:57 | 4 of 18 OK created incremental model blog_dbt_dev.parsely_custom_events [INSERT 0 0 in 1.98s]
2017-12-11 21:50:57,354: 21:50:57 | 5 of 18 START incremental model blog_dbt_dev.parsely_errors.......... [RUN]
2017-12-11 21:50:57,354: Compiling model.parsely.parsely_errors
2017-12-11 21:50:57,361: Writing injected SQL for node "model.parsely.parsely_errors"
2017-12-11 21:50:57,362: Acquiring new redshift connection "parsely_errors".
2017-12-11 21:50:57,362: Re-using an available connection from the pool.
2017-12-11 21:50:57,363: Using redshift connection "parsely_errors".
2017-12-11 21:50:57,363: On parsely_errors: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:57,380: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:57,380: Using redshift connection "parsely_errors".
2017-12-11 21:50:57,380: On parsely_errors: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:57,397: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:57,399: Using redshift connection "parsely_errors".
2017-12-11 21:50:57,399: On parsely_errors: BEGIN
2017-12-11 21:50:57,401: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:50:57,401: Using redshift connection "parsely_errors".
2017-12-11 21:50:57,401: On parsely_errors: create temporary table "parsely_errors__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          -- 1 row per null action event



with error_events as (

    select * from "blog_dbt_dev"."parsely_all_events"
    where action is null

)


select

    -- metrics and counter fields
    1 as error_event_counter,
    -- derived fields
    customer_apikey,
    pageview_post_id,
    -- standard fields
    action	,
    apikey	,
    campaign_id	,
    display,
    display_avail_height	,
    display_avail_width	,
    display_pixel_depth	,
    display_total_height	,
    display_total_width	,
    engaged_time_inc,
    event_id	,
    extra_data,
    flags_is_amp	,
    ip_city	,
    ip_continent	,
    ip_country	,
    ip_lat::FLOAT8	,
    ip_lon	,
    ip_postal	,
    ip_subdivision	,
    ip_timezone	,
    ip_market_name	,
    ip_market_nielsen	,
    ip_market_doubleclick	,
    metadata	,
    metadata_authors	,
    metadata_canonical_url	,
    metadata_custom_metadata	,
    metadata_duration	,
    metadata_data_source	,
    metadata_full_content_word_count	,
    metadata_image_url	,
    metadata_page_type	,
    metadata_post_id	,
    metadata_pub_date_tmsp	,
    metadata_save_date_tmsp	,
    metadata_section	,
    metadata_share_urls	,
    metadata_tags	,
    metadata_thumb_url	,
    metadata_title	,
    metadata_urls	,
    ref_category	,
    ref_clean	,
    ref_domain	,
    ref_fragment	,
    ref_netloc	,
    ref_params	,
    ref_path	,
    ref_query	,
    ref_scheme	,
    referrer	,
    session	,
    session_id	,
    session_initial_referrer	,
    session_initial_url	,
    session_last_session_timestamp	,
    session_timestamp	,
    slot	,
    sref_category	,
    sref_clean	,
    sref_domain	,
    sref_fragment	,
    sref_netloc	,
    sref_params	,
    sref_path	,
    sref_query	,
    sref_scheme	,
    surl_clean	,
    surl_domain	,
    surl_fragment	,
    surl_netloc	,
    surl_params	,
    surl_path	,
    surl_query	,
    surl_scheme	,
    timestamp_info	,
    timestamp_info_nginx_ms	,
    timestamp_info_override_ms	,
    timestamp_info_pixel_ms	,
    ts_action	,
    ts_session_current	,
    ts_session_last	,
    ua_browser	,
    ua_browserversion	,
    ua_device	,
    ua_devicebrand	,
    ua_devicemodel	,
    ua_devicetouchcapable	,
    ua_devicetype	,
    ua_os	,
    ua_osversion	,
    url	,
    url_clean	,
    url_domain	,
    url_fragment	,
    url_netloc	,
    url_params	,
    url_path	,
    url_query	,
    url_scheme	,
    utm_campaign	,
    utm_medium	,
    utm_source	,
    utm_term	,
    utm_content	,
    user_agent	,
    version	,
    visitor	,
    visitor_ip	,
    visitor_network_id	,
    visitor_site_id
  from error_events
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-11 21:50:57,922: SQL status: SELECT in 0.52 seconds
2017-12-11 21:50:57,923: Using redshift connection "parsely_errors".
2017-12-11 21:50:57,923: On parsely_errors: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_errors__dbt_incremental_tmp'
2017-12-11 21:50:57,971: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:57,971: Using redshift connection "parsely_errors".
2017-12-11 21:50:57,971: On parsely_errors: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_errors' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:50:58,019: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:58,020: Using redshift connection "parsely_errors".
2017-12-11 21:50:58,020: On parsely_errors: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_errors' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:50:58,069: SQL status: SELECT in 0.05 seconds
2017-12-11 21:50:58,072: Writing runtime SQL for node "model.parsely.parsely_errors"
2017-12-11 21:50:58,072: Using redshift connection "parsely_errors".
2017-12-11 21:50:58,072: On parsely_errors: 
       

       delete
  from "blog_dbt_dev"."parsely_errors"
  where (event_id) in (
    select (event_id)
    from "parsely_errors__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_errors" ("visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "error_event_counter", "ip_lon", "ip_lat", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "pageview_post_id", "customer_apikey", "ts_session_last", "ts_session_current", "ts_action")
       (
         select "visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "error_event_counter", "ip_lon", "ip_lat", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "pageview_post_id", "customer_apikey", "ts_session_last", "ts_session_current", "ts_action"
         from "parsely_errors__dbt_incremental_tmp"
       );
     
2017-12-11 21:50:58,306: SQL status: INSERT 0 0 in 0.23 seconds
2017-12-11 21:50:58,306: On parsely_errors: COMMIT
2017-12-11 21:50:58,306: Using redshift connection "parsely_errors".
2017-12-11 21:50:58,306: On parsely_errors: COMMIT
2017-12-11 21:50:58,540: SQL status: COMMIT in 0.23 seconds
2017-12-11 21:50:58,541: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9bf220e150>], 'label': 'c00e34de-e456-44d5-9bd8-9ea2c4943fc5'}
2017-12-11 21:50:58,570: 21:50:58 | 5 of 18 OK created incremental model blog_dbt_dev.parsely_errors..... [INSERT 0 0 in 1.19s]
2017-12-11 21:50:58,570: 21:50:58 | 6 of 18 START view model blog_dbt_dev.parsely_base_events............ [RUN]
2017-12-11 21:50:58,571: Compiling model.parsely.parsely_base_events
2017-12-11 21:50:58,574: Acquiring new redshift connection "parsely_base_events".
2017-12-11 21:50:58,574: Re-using an available connection from the pool.
2017-12-11 21:50:58,575: Using redshift connection "parsely_base_events".
2017-12-11 21:50:58,575: On parsely_base_events: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:58,592: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:58,595: Writing injected SQL for node "model.parsely.parsely_base_events"
2017-12-11 21:50:58,596: Using redshift connection "parsely_base_events".
2017-12-11 21:50:58,597: On parsely_base_events: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:50:58,614: SQL status: SELECT in 0.02 seconds
2017-12-11 21:50:58,615: Writing runtime SQL for node "model.parsely.parsely_base_events"
2017-12-11 21:50:58,615: Using redshift connection "parsely_base_events".
2017-12-11 21:50:58,616: On parsely_base_events: BEGIN
2017-12-11 21:50:58,617: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:50:58,618: Using redshift connection "parsely_base_events".
2017-12-11 21:50:58,618: On parsely_base_events: create view "blog_dbt_dev"."parsely_base_events__dbt_tmp" as (
    
  select
      *
  from "blog_dbt_dev"."parsely_all_events"
  where action in ('pageview','heartbeat','videostart','vheartbeat')
  and event_id not in
    (select event_id from "blog_dbt_dev"."parsely_event_ids")
  and ua_browser <> 'Googlebot'
  --add in logic for custom:excludebottraffic== 'Yes'

  );
2017-12-11 21:50:58,842: SQL status: CREATE VIEW in 0.22 seconds
2017-12-11 21:50:58,843: On parsely_base_events: COMMIT
2017-12-11 21:50:58,843: Using redshift connection "parsely_base_events".
2017-12-11 21:50:58,843: On parsely_base_events: COMMIT
2017-12-11 21:50:59,284: SQL status: COMMIT in 0.44 seconds
2017-12-11 21:50:59,284: Using redshift connection "parsely_base_events".
2017-12-11 21:50:59,285: On parsely_base_events: BEGIN
2017-12-11 21:50:59,287: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:50:59,287: Using redshift connection "parsely_base_events".
2017-12-11 21:50:59,287: On parsely_base_events: drop view if exists "blog_dbt_dev"."parsely_base_events" cascade
2017-12-11 21:51:00,392: SQL status: DROP VIEW in 1.11 seconds
2017-12-11 21:51:00,393: On parsely_base_events: COMMIT
2017-12-11 21:51:00,393: Using redshift connection "parsely_base_events".
2017-12-11 21:51:00,393: On parsely_base_events: COMMIT
2017-12-11 21:51:00,584: SQL status: COMMIT in 0.19 seconds
2017-12-11 21:51:00,584: Using redshift connection "parsely_base_events".
2017-12-11 21:51:00,584: On parsely_base_events: BEGIN
2017-12-11 21:51:00,586: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:51:00,586: Using redshift connection "parsely_base_events".
2017-12-11 21:51:00,587: On parsely_base_events: alter table "blog_dbt_dev"."parsely_base_events__dbt_tmp" rename to "parsely_base_events"
2017-12-11 21:51:00,591: SQL status: ALTER TABLE in 0.00 seconds
2017-12-11 21:51:00,591: On parsely_base_events: COMMIT
2017-12-11 21:51:00,591: Using redshift connection "parsely_base_events".
2017-12-11 21:51:00,591: On parsely_base_events: COMMIT
2017-12-11 21:51:00,784: SQL status: COMMIT in 0.19 seconds
2017-12-11 21:51:00,785: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9bf2175810>], 'label': 'c00e34de-e456-44d5-9bd8-9ea2c4943fc5'}
2017-12-11 21:51:00,814: 21:51:00 | 6 of 18 OK created view model blog_dbt_dev.parsely_base_events....... [CREATE VIEW in 2.21s]
2017-12-11 21:51:00,814: 21:51:00 | 7 of 18 START incremental model blog_dbt_dev.parsely_event_ids....... [RUN]
2017-12-11 21:51:00,815: Compiling model.parsely.parsely_event_ids
2017-12-11 21:51:00,820: Writing injected SQL for node "model.parsely.parsely_event_ids"
2017-12-11 21:51:00,821: Acquiring new redshift connection "parsely_event_ids".
2017-12-11 21:51:00,821: Re-using an available connection from the pool.
2017-12-11 21:51:00,821: Using redshift connection "parsely_event_ids".
2017-12-11 21:51:00,821: On parsely_event_ids: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:51:00,838: SQL status: SELECT in 0.02 seconds
2017-12-11 21:51:00,839: Using redshift connection "parsely_event_ids".
2017-12-11 21:51:00,839: On parsely_event_ids: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:51:00,856: SQL status: SELECT in 0.02 seconds
2017-12-11 21:51:00,856: Using redshift connection "parsely_event_ids".
2017-12-11 21:51:00,856: On parsely_event_ids: BEGIN
2017-12-11 21:51:00,858: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:51:00,858: Using redshift connection "parsely_event_ids".
2017-12-11 21:51:00,859: On parsely_event_ids: create temporary table "parsely_event_ids__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          

-- created to track event_ids for duplicate event_ids that do not need to be processed twice
-- how often should this truncate?
select distinct
  event_id
from "blog_dbt_dev"."parsely_base_events"
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-11 21:51:01,481: SQL status: SELECT in 0.62 seconds
2017-12-11 21:51:01,481: Using redshift connection "parsely_event_ids".
2017-12-11 21:51:01,481: On parsely_event_ids: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_event_ids__dbt_incremental_tmp'
2017-12-11 21:51:01,526: SQL status: SELECT in 0.05 seconds
2017-12-11 21:51:01,527: Using redshift connection "parsely_event_ids".
2017-12-11 21:51:01,527: On parsely_event_ids: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_event_ids' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:51:01,572: SQL status: SELECT in 0.05 seconds
2017-12-11 21:51:01,573: Using redshift connection "parsely_event_ids".
2017-12-11 21:51:01,573: On parsely_event_ids: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_event_ids' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:51:01,619: SQL status: SELECT in 0.05 seconds
2017-12-11 21:51:01,620: Writing runtime SQL for node "model.parsely.parsely_event_ids"
2017-12-11 21:51:01,621: Using redshift connection "parsely_event_ids".
2017-12-11 21:51:01,621: On parsely_event_ids: 
       

       delete
  from "blog_dbt_dev"."parsely_event_ids"
  where (event_id) in (
    select (event_id)
    from "parsely_event_ids__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_event_ids" ("event_id")
       (
         select "event_id"
         from "parsely_event_ids__dbt_incremental_tmp"
       );
     
2017-12-11 21:51:01,790: SQL status: INSERT 0 4415 in 0.17 seconds
2017-12-11 21:51:01,791: On parsely_event_ids: COMMIT
2017-12-11 21:51:01,791: Using redshift connection "parsely_event_ids".
2017-12-11 21:51:01,791: On parsely_event_ids: COMMIT
2017-12-11 21:51:02,121: SQL status: COMMIT in 0.33 seconds
2017-12-11 21:51:02,122: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9bf217aad0>], 'label': 'c00e34de-e456-44d5-9bd8-9ea2c4943fc5'}
2017-12-11 21:51:02,153: 21:51:02 | 7 of 18 OK created incremental model blog_dbt_dev.parsely_event_ids.. [INSERT 0 4415 in 1.31s]
2017-12-11 21:51:02,154: Compiling model.parsely.parsely_parent_pageview_keys
2017-12-11 21:51:02,159: Writing injected SQL for node "model.parsely.parsely_parent_pageview_keys"
2017-12-11 21:51:02,160: 21:51:02 | 8 of 18 START incremental model blog_dbt_dev.parsely_post_content.... [RUN]
2017-12-11 21:51:02,160: Compiling model.parsely.parsely_post_content
2017-12-11 21:51:02,166: Writing injected SQL for node "model.parsely.parsely_post_content"
2017-12-11 21:51:02,167: Acquiring new redshift connection "parsely_post_content".
2017-12-11 21:51:02,167: Re-using an available connection from the pool.
2017-12-11 21:51:02,167: Using redshift connection "parsely_post_content".
2017-12-11 21:51:02,167: On parsely_post_content: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:51:02,185: SQL status: SELECT in 0.02 seconds
2017-12-11 21:51:02,185: Using redshift connection "parsely_post_content".
2017-12-11 21:51:02,185: On parsely_post_content: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:51:02,202: SQL status: SELECT in 0.02 seconds
2017-12-11 21:51:02,204: Using redshift connection "parsely_post_content".
2017-12-11 21:51:02,204: On parsely_post_content: BEGIN
2017-12-11 21:51:02,206: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:51:02,206: Using redshift connection "parsely_post_content".
2017-12-11 21:51:02,206: On parsely_post_content: create temporary table "parsely_post_content__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          -- 1 row per content with most recent metdata



with most_recent_incoming_posts as (
  select
    pageview_post_id,
    max(ts_action) as ts_action
  from "blog_dbt_dev"."parsely_base_events"
  group by pageview_post_id
),

dedupe as (
  select
    pageview_post_id,
    metadata	,
    metadata_authors	,
    metadata_canonical_url	,
    metadata_custom_metadata	,
    metadata_duration	,
    metadata_data_source	,
    metadata_full_content_word_count	,
    metadata_image_url	,
    metadata_page_type	,
    metadata_post_id	,
    metadata_pub_date_tmsp	,
    metadata_save_date_tmsp	,
    metadata_section	,
    metadata_share_urls	,
    metadata_tags	,
    metadata_thumb_url	,
    metadata_title	,
    metadata_urls	,
    url,
    row_number() over (partition by pageview_post_id order by ts_action) as n
  from "blog_dbt_dev"."parsely_base_events"
  inner join most_recent_incoming_posts using (pageview_post_id, ts_action)
)

select
  *
from dedupe
where n=1
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-11 21:51:03,234: SQL status: SELECT in 1.03 seconds
2017-12-11 21:51:03,235: Using redshift connection "parsely_post_content".
2017-12-11 21:51:03,235: On parsely_post_content: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_post_content__dbt_incremental_tmp'
2017-12-11 21:51:03,280: SQL status: SELECT in 0.05 seconds
2017-12-11 21:51:03,280: Using redshift connection "parsely_post_content".
2017-12-11 21:51:03,280: On parsely_post_content: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_post_content' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:51:03,328: SQL status: SELECT in 0.05 seconds
2017-12-11 21:51:03,328: Using redshift connection "parsely_post_content".
2017-12-11 21:51:03,328: On parsely_post_content: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_post_content' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:51:03,375: SQL status: SELECT in 0.05 seconds
2017-12-11 21:51:03,376: Writing runtime SQL for node "model.parsely.parsely_post_content"
2017-12-11 21:51:03,377: Using redshift connection "parsely_post_content".
2017-12-11 21:51:03,377: On parsely_post_content: 
       

       delete
  from "blog_dbt_dev"."parsely_post_content"
  where (pageview_post_id) in (
    select (pageview_post_id)
    from "parsely_post_content__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_post_content" ("metadata", "n", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "metadata_full_content_word_count", "metadata_duration", "url", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "pageview_post_id")
       (
         select "metadata", "n", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "metadata_full_content_word_count", "metadata_duration", "url", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "pageview_post_id"
         from "parsely_post_content__dbt_incremental_tmp"
       );
     
2017-12-11 21:51:03,879: SQL status: INSERT 0 0 in 0.50 seconds
2017-12-11 21:51:03,879: On parsely_post_content: COMMIT
2017-12-11 21:51:03,879: Using redshift connection "parsely_post_content".
2017-12-11 21:51:03,880: On parsely_post_content: COMMIT
2017-12-11 21:51:04,276: SQL status: COMMIT in 0.40 seconds
2017-12-11 21:51:04,276: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9bf2104c10>], 'label': 'c00e34de-e456-44d5-9bd8-9ea2c4943fc5'}
2017-12-11 21:51:04,303: 21:51:04 | 8 of 18 OK created incremental model blog_dbt_dev.parsely_post_content [INSERT 0 0 in 2.12s]
2017-12-11 21:51:04,303: 21:51:04 | 9 of 18 START incremental model blog_dbt_dev.parsely_video_content... [RUN]
2017-12-11 21:51:04,303: Compiling model.parsely.parsely_video_content
2017-12-11 21:51:04,309: Writing injected SQL for node "model.parsely.parsely_video_content"
2017-12-11 21:51:04,311: Acquiring new redshift connection "parsely_video_content".
2017-12-11 21:51:04,311: Re-using an available connection from the pool.
2017-12-11 21:51:04,311: Using redshift connection "parsely_video_content".
2017-12-11 21:51:04,311: On parsely_video_content: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:51:04,328: SQL status: SELECT in 0.02 seconds
2017-12-11 21:51:04,329: Using redshift connection "parsely_video_content".
2017-12-11 21:51:04,329: On parsely_video_content: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:51:04,346: SQL status: SELECT in 0.02 seconds
2017-12-11 21:51:04,347: Using redshift connection "parsely_video_content".
2017-12-11 21:51:04,347: On parsely_video_content: BEGIN
2017-12-11 21:51:04,349: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:51:04,349: Using redshift connection "parsely_video_content".
2017-12-11 21:51:04,349: On parsely_video_content: create temporary table "parsely_video_content__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          -- 1 row per content with most recent metdata



with most_recent_incoming_videos as (
  select
    metadata_canonical_url,
    max(ts_action) as ts_action
  from "blog_dbt_dev"."parsely_base_events"
  group by metadata_canonical_url
),

dedupe as (
  select
    metadata_canonical_url,
    metadata	,
    metadata_authors	,
    metadata_custom_metadata	,
    metadata_duration	,
    metadata_data_source	,
    metadata_full_content_word_count	,
    metadata_image_url	,
    metadata_page_type	,
    metadata_post_id	,
    metadata_pub_date_tmsp	,
    metadata_save_date_tmsp	,
    metadata_section	,
    metadata_share_urls	,
    metadata_tags	,
    metadata_thumb_url	,
    metadata_title	,
    metadata_urls	,
    url,
    row_number() over (partition by metadata_canonical_url order by ts_action) as n
  from "blog_dbt_dev"."parsely_base_events"
  inner join most_recent_incoming_videos using (metadata_canonical_url, ts_action)
)

select
  *
from dedupe
where n  = 1
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-11 21:51:04,819: SQL status: SELECT in 0.47 seconds
2017-12-11 21:51:04,820: Using redshift connection "parsely_video_content".
2017-12-11 21:51:04,820: On parsely_video_content: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_video_content__dbt_incremental_tmp'
2017-12-11 21:51:04,866: SQL status: SELECT in 0.05 seconds
2017-12-11 21:51:04,866: Using redshift connection "parsely_video_content".
2017-12-11 21:51:04,866: On parsely_video_content: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_video_content' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:51:04,913: SQL status: SELECT in 0.05 seconds
2017-12-11 21:51:04,913: Using redshift connection "parsely_video_content".
2017-12-11 21:51:04,914: On parsely_video_content: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_video_content' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:51:04,961: SQL status: SELECT in 0.05 seconds
2017-12-11 21:51:04,962: Writing runtime SQL for node "model.parsely.parsely_video_content"
2017-12-11 21:51:04,963: Using redshift connection "parsely_video_content".
2017-12-11 21:51:04,963: On parsely_video_content: 
       

       delete
  from "blog_dbt_dev"."parsely_video_content"
  where (metadata_canonical_url) in (
    select (metadata_canonical_url)
    from "parsely_video_content__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_video_content" ("metadata", "n", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "metadata_full_content_word_count", "metadata_duration", "url", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_authors", "metadata_canonical_url")
       (
         select "metadata", "n", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "metadata_full_content_word_count", "metadata_duration", "url", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_authors", "metadata_canonical_url"
         from "parsely_video_content__dbt_incremental_tmp"
       );
     
2017-12-11 21:51:05,351: SQL status: INSERT 0 0 in 0.39 seconds
2017-12-11 21:51:05,351: On parsely_video_content: COMMIT
2017-12-11 21:51:05,351: Using redshift connection "parsely_video_content".
2017-12-11 21:51:05,351: On parsely_video_content: COMMIT
2017-12-11 21:51:05,892: SQL status: COMMIT in 0.54 seconds
2017-12-11 21:51:05,893: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9bf20edad0>], 'label': 'c00e34de-e456-44d5-9bd8-9ea2c4943fc5'}
2017-12-11 21:51:05,929: 21:51:05 | 9 of 18 OK created incremental model blog_dbt_dev.parsely_video_content [INSERT 0 0 in 1.59s]
2017-12-11 21:51:05,929: 21:51:05 | 10 of 18 START incremental model blog_dbt_dev.parsely_hbs_no_pvs..... [RUN]
2017-12-11 21:51:05,929: Compiling model.parsely.parsely_hbs_no_pvs
2017-12-11 21:51:05,937: Writing injected SQL for node "model.parsely.parsely_hbs_no_pvs"
2017-12-11 21:51:05,938: Acquiring new redshift connection "parsely_hbs_no_pvs".
2017-12-11 21:51:05,938: Re-using an available connection from the pool.
2017-12-11 21:51:05,938: Using redshift connection "parsely_hbs_no_pvs".
2017-12-11 21:51:05,938: On parsely_hbs_no_pvs: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:51:05,956: SQL status: SELECT in 0.02 seconds
2017-12-11 21:51:05,956: Using redshift connection "parsely_hbs_no_pvs".
2017-12-11 21:51:05,956: On parsely_hbs_no_pvs: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:51:05,973: SQL status: SELECT in 0.02 seconds
2017-12-11 21:51:05,974: Using redshift connection "parsely_hbs_no_pvs".
2017-12-11 21:51:05,974: On parsely_hbs_no_pvs: BEGIN
2017-12-11 21:51:05,976: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:51:05,976: Using redshift connection "parsely_hbs_no_pvs".
2017-12-11 21:51:05,977: On parsely_hbs_no_pvs: create temporary table "parsely_hbs_no_pvs__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          

with __dbt__CTE__parsely_parent_pageview_keys as (


select
    apikey,
    session_id,
    visitor_site_id,
    pageview_post_id,
    pageview_post_id as url,
    referrer,
    ts_session_current,
    ts_action,
    event_id,
    LAG(ts_action, 1) OVER
      (PARTITION BY
         apikey,
         session_id,
         visitor_site_id,
         pageview_post_id,
         referrer,
         ts_session_current
       ORDER BY ts_action) AS previous_pageview_ts_action,
     LAG(ts_action, 1) OVER
       (PARTITION BY
         apikey,
         session_id,
         visitor_site_id,
         pageview_post_id,
         referrer,
         ts_session_current
      ORDER BY ts_action desc) AS next_pageview_ts_action,
--  hash keys
    pageview_key
from "blog_dbt_dev"."parsely_base_events"
where action in ('pageview')
)select
    *
from "blog_dbt_dev"."parsely_base_events"
where action = 'heartbeat'
and pageview_key not in
(select distinct pageview_key from __dbt__CTE__parsely_parent_pageview_keys)
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-11 21:51:07,127: SQL status: SELECT in 1.15 seconds
2017-12-11 21:51:07,127: Using redshift connection "parsely_hbs_no_pvs".
2017-12-11 21:51:07,128: On parsely_hbs_no_pvs: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_hbs_no_pvs__dbt_incremental_tmp'
2017-12-11 21:51:07,175: SQL status: SELECT in 0.05 seconds
2017-12-11 21:51:07,175: Using redshift connection "parsely_hbs_no_pvs".
2017-12-11 21:51:07,175: On parsely_hbs_no_pvs: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_hbs_no_pvs' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:51:07,223: SQL status: SELECT in 0.05 seconds
2017-12-11 21:51:07,224: Using redshift connection "parsely_hbs_no_pvs".
2017-12-11 21:51:07,224: On parsely_hbs_no_pvs: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_hbs_no_pvs' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:51:07,272: SQL status: SELECT in 0.05 seconds
2017-12-11 21:51:07,275: Writing runtime SQL for node "model.parsely.parsely_hbs_no_pvs"
2017-12-11 21:51:07,276: Using redshift connection "parsely_hbs_no_pvs".
2017-12-11 21:51:07,276: On parsely_hbs_no_pvs: 
       

       delete
  from "blog_dbt_dev"."parsely_hbs_no_pvs"
  where (event_id) in (
    select (event_id)
    from "parsely_hbs_no_pvs__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_hbs_no_pvs" ("visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "n", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "session_date_id", "date_id", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "week", "year", "month", "quarter", "day", "ip_lon", "ip_lat", "apikey_visitor_id", "parsely_session_id", "utm_id", "pageview_key", "videostart_key", "customer_apikey", "pageview_post_id", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "ts_session_last", "ts_session_current", "ts_action", "insert_timestamp")
       (
         select "visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "n", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "session_date_id", "date_id", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "week", "year", "month", "quarter", "day", "ip_lon", "ip_lat", "apikey_visitor_id", "parsely_session_id", "utm_id", "pageview_key", "videostart_key", "customer_apikey", "pageview_post_id", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "ts_session_last", "ts_session_current", "ts_action", "insert_timestamp"
         from "parsely_hbs_no_pvs__dbt_incremental_tmp"
       );
     
2017-12-11 21:51:08,879: SQL status: INSERT 0 0 in 1.60 seconds
2017-12-11 21:51:08,880: On parsely_hbs_no_pvs: COMMIT
2017-12-11 21:51:08,880: Using redshift connection "parsely_hbs_no_pvs".
2017-12-11 21:51:08,880: On parsely_hbs_no_pvs: COMMIT
2017-12-11 21:51:09,333: SQL status: COMMIT in 0.45 seconds
2017-12-11 21:51:09,333: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9bf21ca550>], 'label': 'c00e34de-e456-44d5-9bd8-9ea2c4943fc5'}
2017-12-11 21:51:09,360: 21:51:09 | 10 of 18 OK created incremental model blog_dbt_dev.parsely_hbs_no_pvs [INSERT 0 0 in 3.40s]
2017-12-11 21:51:09,360: Compiling model.parsely.parsely_parent_videostart_keys
2017-12-11 21:51:09,383: Writing injected SQL for node "model.parsely.parsely_parent_videostart_keys"
2017-12-11 21:51:09,383: Compiling model.parsely.parsely_match_hbs
2017-12-11 21:51:09,389: Writing injected SQL for node "model.parsely.parsely_match_hbs"
2017-12-11 21:51:09,389: 21:51:09 | 11 of 18 START incremental model blog_dbt_dev.parsely_vhbs_no_vs..... [RUN]
2017-12-11 21:51:09,390: Compiling model.parsely.parsely_vhbs_no_vs
2017-12-11 21:51:09,412: Writing injected SQL for node "model.parsely.parsely_vhbs_no_vs"
2017-12-11 21:51:09,413: Acquiring new redshift connection "parsely_vhbs_no_vs".
2017-12-11 21:51:09,413: Re-using an available connection from the pool.
2017-12-11 21:51:09,413: Using redshift connection "parsely_vhbs_no_vs".
2017-12-11 21:51:09,414: On parsely_vhbs_no_vs: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:51:09,430: SQL status: SELECT in 0.02 seconds
2017-12-11 21:51:09,431: Using redshift connection "parsely_vhbs_no_vs".
2017-12-11 21:51:09,431: On parsely_vhbs_no_vs: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:51:09,448: SQL status: SELECT in 0.02 seconds
2017-12-11 21:51:09,449: Using redshift connection "parsely_vhbs_no_vs".
2017-12-11 21:51:09,450: On parsely_vhbs_no_vs: BEGIN
2017-12-11 21:51:09,451: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:51:09,452: Using redshift connection "parsely_vhbs_no_vs".
2017-12-11 21:51:09,452: On parsely_vhbs_no_vs: create temporary table "parsely_vhbs_no_vs__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          

with __dbt__CTE__parsely_parent_pageview_keys as (


select
    apikey,
    session_id,
    visitor_site_id,
    pageview_post_id,
    pageview_post_id as url,
    referrer,
    ts_session_current,
    ts_action,
    event_id,
    LAG(ts_action, 1) OVER
      (PARTITION BY
         apikey,
         session_id,
         visitor_site_id,
         pageview_post_id,
         referrer,
         ts_session_current
       ORDER BY ts_action) AS previous_pageview_ts_action,
     LAG(ts_action, 1) OVER
       (PARTITION BY
         apikey,
         session_id,
         visitor_site_id,
         pageview_post_id,
         referrer,
         ts_session_current
      ORDER BY ts_action desc) AS next_pageview_ts_action,
--  hash keys
    pageview_key
from "blog_dbt_dev"."parsely_base_events"
where action in ('pageview')
),  __dbt__CTE__parsely_parent_videostart_keys as (


select
    apikey,
    session_id,
    visitor_site_id,
    metadata_canonical_url,
    url,
    referrer,
    ts_session_current,
    vs.event_id,
    vs.ts_action,
    LAG(vs.ts_action, 1) OVER
      (PARTITION BY
         apikey,
         session_id,
         visitor_site_id,
         metadata_canonical_url,
         url,
         referrer,
         ts_session_current
       ORDER BY vs.ts_action) AS previous_videostart_ts_action,
     LAG(vs.ts_action, 1) OVER
       (PARTITION BY
         apikey,
         session_id,
         visitor_site_id,
         metadata_canonical_url,
         url,
         referrer,
         ts_session_current
      ORDER BY vs.ts_action desc) AS next_videostart_ts_action,
--  hash keys
    pv.pageview_key,
    videostart_key
from "blog_dbt_dev"."parsely_base_events" vs
left join __dbt__CTE__parsely_parent_pageview_keys pv using (pageview_key, apikey, session_id, referrer, visitor_site_id, url, ts_session_current)
where action in ('videostart')
and vs.ts_action >= pv.ts_action and (case when pv.next_pageview_ts_action is not null then vs.ts_action < pv.next_pageview_ts_action else true end)
)select
    *
from "blog_dbt_dev"."parsely_base_events"
where action = 'vheartbeat'
and  videostart_key not in
(select distinct videostart_key from __dbt__CTE__parsely_parent_videostart_keys)
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-11 21:51:10,747: SQL status: SELECT in 1.30 seconds
2017-12-11 21:51:10,747: Using redshift connection "parsely_vhbs_no_vs".
2017-12-11 21:51:10,747: On parsely_vhbs_no_vs: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_vhbs_no_vs__dbt_incremental_tmp'
2017-12-11 21:51:10,801: SQL status: SELECT in 0.05 seconds
2017-12-11 21:51:10,801: Using redshift connection "parsely_vhbs_no_vs".
2017-12-11 21:51:10,801: On parsely_vhbs_no_vs: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_vhbs_no_vs' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:51:10,855: SQL status: SELECT in 0.05 seconds
2017-12-11 21:51:10,856: Using redshift connection "parsely_vhbs_no_vs".
2017-12-11 21:51:10,856: On parsely_vhbs_no_vs: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_vhbs_no_vs' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:51:10,910: SQL status: SELECT in 0.05 seconds
2017-12-11 21:51:10,913: Writing runtime SQL for node "model.parsely.parsely_vhbs_no_vs"
2017-12-11 21:51:10,914: Using redshift connection "parsely_vhbs_no_vs".
2017-12-11 21:51:10,914: On parsely_vhbs_no_vs: 
       

       delete
  from "blog_dbt_dev"."parsely_vhbs_no_vs"
  where (event_id) in (
    select (event_id)
    from "parsely_vhbs_no_vs__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_vhbs_no_vs" ("visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "n", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "session_date_id", "date_id", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "week", "year", "month", "quarter", "day", "ip_lon", "ip_lat", "apikey_visitor_id", "parsely_session_id", "utm_id", "pageview_key", "videostart_key", "customer_apikey", "pageview_post_id", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "ts_session_last", "ts_session_current", "ts_action", "insert_timestamp")
       (
         select "visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "n", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "session_date_id", "date_id", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "engaged_time_inc", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "week", "year", "month", "quarter", "day", "ip_lon", "ip_lat", "apikey_visitor_id", "parsely_session_id", "utm_id", "pageview_key", "videostart_key", "customer_apikey", "pageview_post_id", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "ts_session_last", "ts_session_current", "ts_action", "insert_timestamp"
         from "parsely_vhbs_no_vs__dbt_incremental_tmp"
       );
     
2017-12-11 21:51:11,551: SQL status: INSERT 0 0 in 0.64 seconds
2017-12-11 21:51:11,551: On parsely_vhbs_no_vs: COMMIT
2017-12-11 21:51:11,551: Using redshift connection "parsely_vhbs_no_vs".
2017-12-11 21:51:11,552: On parsely_vhbs_no_vs: COMMIT
2017-12-11 21:51:11,941: SQL status: COMMIT in 0.39 seconds
2017-12-11 21:51:11,941: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9bf220e250>], 'label': 'c00e34de-e456-44d5-9bd8-9ea2c4943fc5'}
2017-12-11 21:51:11,971: 21:51:11 | 11 of 18 OK created incremental model blog_dbt_dev.parsely_vhbs_no_vs [INSERT 0 0 in 2.55s]
2017-12-11 21:51:11,971: Compiling model.parsely.parsely_match_vhbs
2017-12-11 21:51:11,977: Writing injected SQL for node "model.parsely.parsely_match_vhbs"
2017-12-11 21:51:11,978: 21:51:11 | 12 of 18 START view model blog_dbt_dev.parsely_videoview_engagedtime. [RUN]
2017-12-11 21:51:11,978: Compiling model.parsely.parsely_videoview_engagedtime
2017-12-11 21:51:12,009: Writing injected SQL for node "model.parsely.parsely_videoview_engagedtime"
2017-12-11 21:51:12,010: Acquiring new redshift connection "parsely_videoview_engagedtime".
2017-12-11 21:51:12,010: Re-using an available connection from the pool.
2017-12-11 21:51:12,010: Using redshift connection "parsely_videoview_engagedtime".
2017-12-11 21:51:12,010: On parsely_videoview_engagedtime: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:51:12,030: SQL status: SELECT in 0.02 seconds
2017-12-11 21:51:12,032: Writing runtime SQL for node "model.parsely.parsely_videoview_engagedtime"
2017-12-11 21:51:12,033: Using redshift connection "parsely_videoview_engagedtime".
2017-12-11 21:51:12,033: On parsely_videoview_engagedtime: BEGIN
2017-12-11 21:51:12,035: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:51:12,035: Using redshift connection "parsely_videoview_engagedtime".
2017-12-11 21:51:12,035: On parsely_videoview_engagedtime: create view "blog_dbt_dev"."parsely_videoview_engagedtime__dbt_tmp" as (
    with  __dbt__CTE__parsely_match_vhbs as (


select
    *
from "blog_dbt_dev"."parsely_base_events"
where action in ('videostart','vheartbeat')
UNION all
select
  *
from "blog_dbt_dev"."parsely_vhbs_no_vs"
where videostart_key in
(select distinct videostart_key from "blog_dbt_dev"."parsely_base_events")
),  __dbt__CTE__parsely_parent_pageview_keys as (


select
    apikey,
    session_id,
    visitor_site_id,
    pageview_post_id,
    pageview_post_id as url,
    referrer,
    ts_session_current,
    ts_action,
    event_id,
    LAG(ts_action, 1) OVER
      (PARTITION BY
         apikey,
         session_id,
         visitor_site_id,
         pageview_post_id,
         referrer,
         ts_session_current
       ORDER BY ts_action) AS previous_pageview_ts_action,
     LAG(ts_action, 1) OVER
       (PARTITION BY
         apikey,
         session_id,
         visitor_site_id,
         pageview_post_id,
         referrer,
         ts_session_current
      ORDER BY ts_action desc) AS next_pageview_ts_action,
--  hash keys
    pageview_key
from "blog_dbt_dev"."parsely_base_events"
where action in ('pageview')
),  __dbt__CTE__parsely_parent_videostart_keys as (


select
    apikey,
    session_id,
    visitor_site_id,
    metadata_canonical_url,
    url,
    referrer,
    ts_session_current,
    vs.event_id,
    vs.ts_action,
    LAG(vs.ts_action, 1) OVER
      (PARTITION BY
         apikey,
         session_id,
         visitor_site_id,
         metadata_canonical_url,
         url,
         referrer,
         ts_session_current
       ORDER BY vs.ts_action) AS previous_videostart_ts_action,
     LAG(vs.ts_action, 1) OVER
       (PARTITION BY
         apikey,
         session_id,
         visitor_site_id,
         metadata_canonical_url,
         url,
         referrer,
         ts_session_current
      ORDER BY vs.ts_action desc) AS next_videostart_ts_action,
--  hash keys
    pv.pageview_key,
    videostart_key
from "blog_dbt_dev"."parsely_base_events" vs
left join __dbt__CTE__parsely_parent_pageview_keys pv using (pageview_key, apikey, session_id, referrer, visitor_site_id, url, ts_session_current)
where action in ('videostart')
and vs.ts_action >= pv.ts_action and (case when pv.next_pageview_ts_action is not null then vs.ts_action < pv.next_pageview_ts_action else true end)
),videostart_events as (

    select * from __dbt__CTE__parsely_match_vhbs

),

engaged_xf as (

  select
      vs.event_id,
      sum(vhb.engaged_time_inc) as engaged_time
  from videostart_events vhb
  left join __dbt__CTE__parsely_parent_videostart_keys vs using (videostart_key)
  where vhb.action = 'vheartbeat' and 
  vhb.ts_action >= vs.ts_action and
  (case when vs.next_videostart_ts_action is not null
    then vhb.ts_action < vs.next_videostart_ts_action
    else true end)
  group by vs.event_id
)

select
  *
from videostart_events
left join engaged_xf using (event_id)
where action = 'videostart'
  );
2017-12-11 21:51:12,211: SQL status: CREATE VIEW in 0.18 seconds
2017-12-11 21:51:12,212: Using redshift connection "parsely_videoview_engagedtime".
2017-12-11 21:51:12,215: On parsely_videoview_engagedtime: alter table "blog_dbt_dev"."parsely_videoview_engagedtime__dbt_tmp" rename to "parsely_videoview_engagedtime"
2017-12-11 21:51:12,221: SQL status: ALTER TABLE in 0.01 seconds
2017-12-11 21:51:12,221: On parsely_videoview_engagedtime: COMMIT
2017-12-11 21:51:12,222: Using redshift connection "parsely_videoview_engagedtime".
2017-12-11 21:51:12,222: On parsely_videoview_engagedtime: COMMIT
2017-12-11 21:51:12,399: SQL status: COMMIT in 0.18 seconds
2017-12-11 21:51:12,400: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9bf21ca550>], 'label': 'c00e34de-e456-44d5-9bd8-9ea2c4943fc5'}
2017-12-11 21:51:12,432: 21:51:12 | 12 of 18 OK created view model blog_dbt_dev.parsely_videoview_engagedtime [CREATE VIEW in 0.42s]
2017-12-11 21:51:12,433: 21:51:12 | 13 of 18 START incremental model blog_dbt_dev.parsely_videoviews..... [RUN]
2017-12-11 21:51:12,433: Compiling model.parsely.parsely_videoviews
2017-12-11 21:51:12,439: Writing injected SQL for node "model.parsely.parsely_videoviews"
2017-12-11 21:51:12,440: Acquiring new redshift connection "parsely_videoviews".
2017-12-11 21:51:12,441: Re-using an available connection from the pool.
2017-12-11 21:51:12,441: Using redshift connection "parsely_videoviews".
2017-12-11 21:51:12,441: On parsely_videoviews: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:51:12,458: SQL status: SELECT in 0.02 seconds
2017-12-11 21:51:12,458: Using redshift connection "parsely_videoviews".
2017-12-11 21:51:12,458: On parsely_videoviews: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:51:12,476: SQL status: SELECT in 0.02 seconds
2017-12-11 21:51:12,478: Using redshift connection "parsely_videoviews".
2017-12-11 21:51:12,478: On parsely_videoviews: BEGIN
2017-12-11 21:51:12,480: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:51:12,480: Using redshift connection "parsely_videoviews".
2017-12-11 21:51:12,480: On parsely_videoviews: create temporary table "parsely_videoviews__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          -- 1 row per videoview
-- sum engaged time for all heartbeats
-- metrics: videoviews, engaged time



with video_events as (

    select * from "blog_dbt_dev"."parsely_videoview_engagedtime"
),

-- derived fields
publish_watch_time_xf as (
    select
        event_id,
        (TIMESTAMP 'epoch'
          + left(metadata_pub_date_tmsp,10)::bigint
          * INTERVAL '1 Second ') as publish_time,
        (TIMESTAMP 'epoch'
          + left(timestamp_info_nginx_ms,10)::bigint
          * INTERVAL '1 Second ') as watch_time

    from video_events

)

select
    -- aggregated fields
    engaged_time as video_engaged_time,
    1 as videostart_counter,
    -- derived fields
    datediff(hour, publish_time, watch_time) as hours_since_publish,
    datediff(day, publish_time, watch_time) as days_since_publish,
    datediff(week, publish_time, watch_time) as weeks_since_publish,
    publish_time,
    watch_time,
    customer_apikey,
    pageview_key,
    videostart_key,
    parsely_session_id,
    utm_id,
    apikey_visitor_id,
    -- event time fields
    quarter,
    month,
    year,
    week,
    date_id,
    session_date_id,
    -- standard fields
    action	,
    apikey	,
    campaign_id	,
    display,
    display_avail_height	,
    display_avail_width	,
    display_pixel_depth	,
    display_total_height	,
    display_total_width	,
    event_id	,
    extra_data,
    flags_is_amp	,
    ip_city	,
    ip_continent	,
    ip_country	,
    ip_lat::FLOAT8	,
    ip_lon	,
    ip_postal	,
    ip_subdivision	,
    ip_timezone	,
    ip_market_name	,
    ip_market_nielsen	,
    ip_market_doubleclick	,
    metadata	,
    metadata_authors	,
    metadata_canonical_url	,
    metadata_custom_metadata	,
    metadata_duration	,
    metadata_data_source	,
    metadata_full_content_word_count	,
    metadata_image_url	,
    metadata_page_type	,
    metadata_post_id	,
    metadata_pub_date_tmsp	,
    metadata_save_date_tmsp	,
    metadata_section	,
    metadata_share_urls	,
    metadata_tags	,
    metadata_thumb_url	,
    metadata_title	,
    metadata_urls	,
    ref_category	,
    ref_clean	,
    ref_domain	,
    ref_fragment	,
    ref_netloc	,
    ref_params	,
    ref_path	,
    ref_query	,
    ref_scheme	,
    referrer	,
    session	,
    session_id	,
    session_initial_referrer	,
    session_initial_url	,
    session_last_session_timestamp	,
    session_timestamp	,
    slot	,
    sref_category	,
    sref_clean	,
    sref_domain	,
    sref_fragment	,
    sref_netloc	,
    sref_params	,
    sref_path	,
    sref_query	,
    sref_scheme	,
    surl_clean	,
    surl_domain	,
    surl_fragment	,
    surl_netloc	,
    surl_params	,
    surl_path	,
    surl_query	,
    surl_scheme	,
    timestamp_info	,
    timestamp_info_nginx_ms	,
    timestamp_info_override_ms	,
    timestamp_info_pixel_ms	,
    ts_action	,
    ts_session_current	,
    ts_session_last	,
    ua_browser	,
    ua_browserversion	,
    ua_device	,
    ua_devicebrand	,
    ua_devicemodel	,
    ua_devicetouchcapable	,
    ua_devicetype	,
    ua_os	,
    ua_osversion	,
    url	,
    url_clean	,
    url_domain	,
    url_fragment	,
    url_netloc	,
    url_params	,
    url_path	,
    url_query	,
    url_scheme	,
    utm_campaign	,
    utm_medium	,
    utm_source	,
    utm_term	,
    utm_content	,
    user_agent	,
    version	,
    visitor	,
    visitor_ip	,
    visitor_network_id	,
    visitor_site_id
  from video_events
  left join publish_watch_time_xf using (event_id)
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-11 21:51:14,810: SQL status: SELECT in 2.33 seconds
2017-12-11 21:51:14,811: Using redshift connection "parsely_videoviews".
2017-12-11 21:51:14,811: On parsely_videoviews: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_videoviews__dbt_incremental_tmp'
2017-12-11 21:51:14,857: SQL status: SELECT in 0.05 seconds
2017-12-11 21:51:14,858: Using redshift connection "parsely_videoviews".
2017-12-11 21:51:14,858: On parsely_videoviews: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_videoviews' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:51:14,906: SQL status: SELECT in 0.05 seconds
2017-12-11 21:51:14,907: Using redshift connection "parsely_videoviews".
2017-12-11 21:51:14,907: On parsely_videoviews: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_videoviews' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:51:14,955: SQL status: SELECT in 0.05 seconds
2017-12-11 21:51:14,959: Writing runtime SQL for node "model.parsely.parsely_videoviews"
2017-12-11 21:51:14,959: Using redshift connection "parsely_videoviews".
2017-12-11 21:51:14,959: On parsely_videoviews: 
       

       delete
  from "blog_dbt_dev"."parsely_videoviews"
  where (event_id) in (
    select (event_id)
    from "parsely_videoviews__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_videoviews" ("visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "weeks_since_publish", "days_since_publish", "hours_since_publish", "video_engaged_time", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "session_date_id", "date_id", "videostart_counter", "ip_lon", "ip_lat", "week", "year", "month", "quarter", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "apikey_visitor_id", "utm_id", "parsely_session_id", "videostart_key", "pageview_key", "customer_apikey", "ts_session_last", "ts_session_current", "ts_action", "watch_time", "publish_time")
       (
         select "visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "weeks_since_publish", "days_since_publish", "hours_since_publish", "video_engaged_time", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "session_date_id", "date_id", "videostart_counter", "ip_lon", "ip_lat", "week", "year", "month", "quarter", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "apikey_visitor_id", "utm_id", "parsely_session_id", "videostart_key", "pageview_key", "customer_apikey", "ts_session_last", "ts_session_current", "ts_action", "watch_time", "publish_time"
         from "parsely_videoviews__dbt_incremental_tmp"
       );
     
2017-12-11 21:51:15,165: SQL status: INSERT 0 0 in 0.21 seconds
2017-12-11 21:51:15,166: On parsely_videoviews: COMMIT
2017-12-11 21:51:15,166: Using redshift connection "parsely_videoviews".
2017-12-11 21:51:15,166: On parsely_videoviews: COMMIT
2017-12-11 21:51:15,598: SQL status: COMMIT in 0.43 seconds
2017-12-11 21:51:15,599: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9bf217af50>], 'label': 'c00e34de-e456-44d5-9bd8-9ea2c4943fc5'}
2017-12-11 21:51:15,628: 21:51:15 | 13 of 18 OK created incremental model blog_dbt_dev.parsely_videoviews [INSERT 0 0 in 3.17s]
2017-12-11 21:51:15,629: 21:51:15 | 14 of 18 START view model blog_dbt_dev.parsely_pageview_engagedtime.. [RUN]
2017-12-11 21:51:15,629: Compiling model.parsely.parsely_pageview_engagedtime
2017-12-11 21:51:15,646: Writing injected SQL for node "model.parsely.parsely_pageview_engagedtime"
2017-12-11 21:51:15,647: Acquiring new redshift connection "parsely_pageview_engagedtime".
2017-12-11 21:51:15,647: Re-using an available connection from the pool.
2017-12-11 21:51:15,647: Using redshift connection "parsely_pageview_engagedtime".
2017-12-11 21:51:15,647: On parsely_pageview_engagedtime: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:51:15,665: SQL status: SELECT in 0.02 seconds
2017-12-11 21:51:15,667: Writing runtime SQL for node "model.parsely.parsely_pageview_engagedtime"
2017-12-11 21:51:15,668: Using redshift connection "parsely_pageview_engagedtime".
2017-12-11 21:51:15,668: On parsely_pageview_engagedtime: BEGIN
2017-12-11 21:51:15,670: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:51:15,670: Using redshift connection "parsely_pageview_engagedtime".
2017-12-11 21:51:15,670: On parsely_pageview_engagedtime: create view "blog_dbt_dev"."parsely_pageview_engagedtime__dbt_tmp" as (
    with  __dbt__CTE__parsely_match_hbs as (


select
    *
from "blog_dbt_dev"."parsely_base_events"
where action in ('pageview','heartbeat')
UNION all
select
  *
from "blog_dbt_dev"."parsely_hbs_no_pvs"
where pageview_key in
(select distinct pageview_key from "blog_dbt_dev"."parsely_base_events")
),  __dbt__CTE__parsely_parent_pageview_keys as (


select
    apikey,
    session_id,
    visitor_site_id,
    pageview_post_id,
    pageview_post_id as url,
    referrer,
    ts_session_current,
    ts_action,
    event_id,
    LAG(ts_action, 1) OVER
      (PARTITION BY
         apikey,
         session_id,
         visitor_site_id,
         pageview_post_id,
         referrer,
         ts_session_current
       ORDER BY ts_action) AS previous_pageview_ts_action,
     LAG(ts_action, 1) OVER
       (PARTITION BY
         apikey,
         session_id,
         visitor_site_id,
         pageview_post_id,
         referrer,
         ts_session_current
      ORDER BY ts_action desc) AS next_pageview_ts_action,
--  hash keys
    pageview_key
from "blog_dbt_dev"."parsely_base_events"
where action in ('pageview')
),pageview_events as (

    select * from __dbt__CTE__parsely_match_hbs

),

engaged_xf as (

  select
      pv.event_id,
      sum(hb.engaged_time_inc) as engaged_time
  from pageview_events hb
  left join __dbt__CTE__parsely_parent_pageview_keys pv using (pageview_key)
  where hb.action = 'heartbeat' and
    hb.ts_action >= pv.ts_action and
    (case when pv.next_pageview_ts_action is not null
      then hb.ts_action < pv.next_pageview_ts_action
      else true end)
  group by pv.event_id
),

video_xf as (
  select
    pageview_key,
    sum(video_engaged_time) as video_engaged_time,
    sum(videostart_counter) as videoviews
  from "blog_dbt_dev"."parsely_videoviews"
  group by pageview_key
)

select
  *
from pageview_events
left join engaged_xf using (event_id)
left join video_xf using (pageview_key)
where action = 'pageview'
  );
2017-12-11 21:51:15,812: SQL status: CREATE VIEW in 0.14 seconds
2017-12-11 21:51:15,813: Using redshift connection "parsely_pageview_engagedtime".
2017-12-11 21:51:15,813: On parsely_pageview_engagedtime: alter table "blog_dbt_dev"."parsely_pageview_engagedtime__dbt_tmp" rename to "parsely_pageview_engagedtime"
2017-12-11 21:51:15,863: SQL status: ALTER TABLE in 0.05 seconds
2017-12-11 21:51:15,863: On parsely_pageview_engagedtime: COMMIT
2017-12-11 21:51:15,863: Using redshift connection "parsely_pageview_engagedtime".
2017-12-11 21:51:15,864: On parsely_pageview_engagedtime: COMMIT
2017-12-11 21:51:16,042: SQL status: COMMIT in 0.18 seconds
2017-12-11 21:51:16,043: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9bf2113390>], 'label': 'c00e34de-e456-44d5-9bd8-9ea2c4943fc5'}
2017-12-11 21:51:16,070: 21:51:16 | 14 of 18 OK created view model blog_dbt_dev.parsely_pageview_engagedtime [CREATE VIEW in 0.41s]
2017-12-11 21:51:16,070: 21:51:16 | 15 of 18 START incremental model blog_dbt_dev.parsely_pageviews...... [RUN]
2017-12-11 21:51:16,070: Compiling model.parsely.parsely_pageviews
2017-12-11 21:51:16,077: Writing injected SQL for node "model.parsely.parsely_pageviews"
2017-12-11 21:51:16,078: Acquiring new redshift connection "parsely_pageviews".
2017-12-11 21:51:16,078: Re-using an available connection from the pool.
2017-12-11 21:51:16,079: Using redshift connection "parsely_pageviews".
2017-12-11 21:51:16,079: On parsely_pageviews: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:51:16,096: SQL status: SELECT in 0.02 seconds
2017-12-11 21:51:16,097: Using redshift connection "parsely_pageviews".
2017-12-11 21:51:16,097: On parsely_pageviews: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:51:16,114: SQL status: SELECT in 0.02 seconds
2017-12-11 21:51:16,116: Using redshift connection "parsely_pageviews".
2017-12-11 21:51:16,116: On parsely_pageviews: BEGIN
2017-12-11 21:51:16,118: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:51:16,118: Using redshift connection "parsely_pageviews".
2017-12-11 21:51:16,118: On parsely_pageviews: create temporary table "parsely_pageviews__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          -- 1 row per pageview
-- sum engaged time for all heartbeats
-- metrics: pageviews, engaged time



with pageview_events as (

    select * from "blog_dbt_dev"."parsely_pageview_engagedtime"
),

-- derived fields
publish_read_time_xf as (
    select
        event_id,
        (TIMESTAMP 'epoch'
          + left(metadata_pub_date_tmsp,10)::bigint
          * INTERVAL '1 Second ') as publish_time,
        (TIMESTAMP 'epoch'
          + left(timestamp_info_nginx_ms,10)::bigint
          * INTERVAL '1 Second ') as read_time
    from pageview_events

)

select
    -- aggregated fields
    engaged_time,
    1 as pageview_counter,
    video_engaged_time,
    videoviews,
    -- derived fields
    datediff(hour, publish_time, read_time) as hours_since_publish,
    datediff(day, publish_time, read_time) as days_since_publish,
    datediff(week, publish_time, read_time) as weeks_since_publish,
    publish_time,
    read_time,
    customer_apikey,
    pageview_post_id,
    -- event time fields
    day,
    quarter,
    month,
    year,
    week,
    date_id,
    session_date_id,
    -- keys
    pageview_key,
    parsely_session_id,
    utm_id,
    apikey_visitor_id,
    -- standard fields
    action	,
    apikey	,
    campaign_id	,
    display,
    display_avail_height	,
    display_avail_width	,
    display_pixel_depth	,
    display_total_height	,
    display_total_width	,
    event_id	,
    extra_data,
    flags_is_amp	,
    ip_city	,
    ip_continent	,
    ip_country	,
    ip_lat::FLOAT8	,
    ip_lon	,
    ip_postal	,
    ip_subdivision	,
    ip_timezone	,
    ip_market_name	,
    ip_market_nielsen	,
    ip_market_doubleclick	,
    metadata	,
    metadata_authors	,
    metadata_canonical_url	,
    metadata_custom_metadata	,
    metadata_duration	,
    metadata_data_source	,
    metadata_full_content_word_count	,
    metadata_image_url	,
    metadata_page_type	,
    metadata_post_id	,
    metadata_pub_date_tmsp	,
    metadata_save_date_tmsp	,
    metadata_section	,
    metadata_share_urls	,
    metadata_tags	,
    metadata_thumb_url	,
    metadata_title	,
    metadata_urls	,
    ref_category	,
    ref_clean	,
    ref_domain	,
    ref_fragment	,
    ref_netloc	,
    ref_params	,
    ref_path	,
    ref_query	,
    ref_scheme	,
    referrer	,
    session	,
    session_id	,
    session_initial_referrer	,
    session_initial_url	,
    session_last_session_timestamp	,
    session_timestamp	,
    slot	,
    sref_category	,
    sref_clean	,
    sref_domain	,
    sref_fragment	,
    sref_netloc	,
    sref_params	,
    sref_path	,
    sref_query	,
    sref_scheme	,
    surl_clean	,
    surl_domain	,
    surl_fragment	,
    surl_netloc	,
    surl_params	,
    surl_path	,
    surl_query	,
    surl_scheme	,
    timestamp_info	,
    timestamp_info_nginx_ms	,
    timestamp_info_override_ms	,
    timestamp_info_pixel_ms	,
    ts_action	,
    ts_session_current	,
    ts_session_last	,
    ua_browser	,
    ua_browserversion	,
    ua_device	,
    ua_devicebrand	,
    ua_devicemodel	,
    ua_devicetouchcapable	,
    ua_devicetype	,
    ua_os	,
    ua_osversion	,
    url	,
    url_clean	,
    url_domain	,
    url_fragment	,
    url_netloc	,
    url_params	,
    url_path	,
    url_query	,
    url_scheme	,
    utm_campaign	,
    utm_medium	,
    utm_source	,
    utm_term	,
    utm_content	,
    user_agent	,
    version	,
    visitor	,
    visitor_ip	,
    visitor_network_id	,
    visitor_site_id
  from pageview_events
  left join publish_read_time_xf using (event_id)
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-11 21:51:19,396: SQL status: SELECT in 3.28 seconds
2017-12-11 21:51:19,396: Using redshift connection "parsely_pageviews".
2017-12-11 21:51:19,396: On parsely_pageviews: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_pageviews__dbt_incremental_tmp'
2017-12-11 21:51:19,441: SQL status: SELECT in 0.04 seconds
2017-12-11 21:51:19,442: Using redshift connection "parsely_pageviews".
2017-12-11 21:51:19,442: On parsely_pageviews: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_pageviews' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:51:19,491: SQL status: SELECT in 0.05 seconds
2017-12-11 21:51:19,492: Using redshift connection "parsely_pageviews".
2017-12-11 21:51:19,492: On parsely_pageviews: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_pageviews' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:51:19,542: SQL status: SELECT in 0.05 seconds
2017-12-11 21:51:19,545: Writing runtime SQL for node "model.parsely.parsely_pageviews"
2017-12-11 21:51:19,546: Using redshift connection "parsely_pageviews".
2017-12-11 21:51:19,546: On parsely_pageviews: 
       

       delete
  from "blog_dbt_dev"."parsely_pageviews"
  where (event_id) in (
    select (event_id)
    from "parsely_pageviews__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_pageviews" ("visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "weeks_since_publish", "days_since_publish", "hours_since_publish", "videoviews", "video_engaged_time", "engaged_time", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "session_date_id", "date_id", "pageview_counter", "ip_lon", "ip_lat", "week", "year", "month", "quarter", "day", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "apikey_visitor_id", "utm_id", "parsely_session_id", "pageview_key", "pageview_post_id", "customer_apikey", "ts_session_last", "ts_session_current", "ts_action", "read_time", "publish_time")
       (
         select "visitor", "ua_devicetouchcapable", "timestamp_info", "slot", "session", "metadata", "flags_is_amp", "display", "timestamp_info_pixel_ms", "timestamp_info_override_ms", "timestamp_info_nginx_ms", "session_timestamp", "session_last_session_timestamp", "metadata_save_date_tmsp", "metadata_pub_date_tmsp", "weeks_since_publish", "days_since_publish", "hours_since_publish", "videoviews", "video_engaged_time", "engaged_time", "version", "session_id", "metadata_full_content_word_count", "metadata_duration", "display_total_width", "display_total_height", "display_pixel_depth", "display_avail_width", "display_avail_height", "session_date_id", "date_id", "pageview_counter", "ip_lon", "ip_lat", "week", "year", "month", "quarter", "day", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "url_scheme", "url_query", "url_path", "url_params", "url_netloc", "url_fragment", "url_domain", "url_clean", "url", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "referrer", "ref_scheme", "ref_query", "ref_path", "ref_params", "ref_netloc", "ref_fragment", "ref_domain", "ref_clean", "ref_category", "metadata_urls", "metadata_title", "metadata_thumb_url", "metadata_tags", "metadata_share_urls", "metadata_section", "metadata_post_id", "metadata_page_type", "metadata_image_url", "metadata_data_source", "metadata_custom_metadata", "metadata_canonical_url", "metadata_authors", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "extra_data", "event_id", "campaign_id", "apikey", "action", "apikey_visitor_id", "utm_id", "parsely_session_id", "pageview_key", "pageview_post_id", "customer_apikey", "ts_session_last", "ts_session_current", "ts_action", "read_time", "publish_time"
         from "parsely_pageviews__dbt_incremental_tmp"
       );
     
2017-12-11 21:51:20,784: SQL status: INSERT 0 0 in 1.24 seconds
2017-12-11 21:51:20,784: On parsely_pageviews: COMMIT
2017-12-11 21:51:20,784: Using redshift connection "parsely_pageviews".
2017-12-11 21:51:20,784: On parsely_pageviews: COMMIT
2017-12-11 21:51:21,415: SQL status: COMMIT in 0.63 seconds
2017-12-11 21:51:21,416: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9bf217af50>], 'label': 'c00e34de-e456-44d5-9bd8-9ea2c4943fc5'}
2017-12-11 21:51:21,445: 21:51:21 | 15 of 18 OK created incremental model blog_dbt_dev.parsely_pageviews. [INSERT 0 0 in 5.35s]
2017-12-11 21:51:21,445: 21:51:21 | 16 of 18 START incremental model blog_dbt_dev.parsely_campaigns...... [RUN]
2017-12-11 21:51:21,446: Compiling model.parsely.parsely_campaigns
2017-12-11 21:51:21,449: Acquiring new redshift connection "parsely_campaigns".
2017-12-11 21:51:21,449: Re-using an available connection from the pool.
2017-12-11 21:51:21,450: Using redshift connection "parsely_campaigns".
2017-12-11 21:51:21,450: On parsely_campaigns: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:51:21,468: SQL status: SELECT in 0.02 seconds
2017-12-11 21:51:21,471: Writing injected SQL for node "model.parsely.parsely_campaigns"
2017-12-11 21:51:21,472: Using redshift connection "parsely_campaigns".
2017-12-11 21:51:21,472: On parsely_campaigns: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:51:21,489: SQL status: SELECT in 0.02 seconds
2017-12-11 21:51:21,490: Using redshift connection "parsely_campaigns".
2017-12-11 21:51:21,490: On parsely_campaigns: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:51:21,507: SQL status: SELECT in 0.02 seconds
2017-12-11 21:51:21,508: Using redshift connection "parsely_campaigns".
2017-12-11 21:51:21,508: On parsely_campaigns: BEGIN
2017-12-11 21:51:21,510: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:51:21,510: Using redshift connection "parsely_campaigns".
2017-12-11 21:51:21,511: On parsely_campaigns: create temporary table "parsely_campaigns__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          -- 1 row per campaign
-- metrics: pageviews, engaged time, videostarts, video engaged time, visitors



with incoming_campaigns as (
  select
    utm_id,
    utm_campaign,
    utm_medium,
    utm_source,
    utm_term,
    utm_content,
    engaged_time,
    pageview_counter,
    video_engaged_time,
    videoviews,
--  dedupe field
    row_number() over (partition by utm_id order by ts_action) as n
  from "blog_dbt_dev"."parsely_pageviews"
),



relevant_existing as (

    select
        *
    from "blog_dbt_dev"."parsely_campaigns"
    where utm_id in (select utm_id from incoming_campaigns)

),

-- left join fields from old data: min_tstamp
unioned as (

    select
      *
    from incoming_campaigns

    union all

    select
        *
    from relevant_existing

),

merged as (

    select
      n,
      utm_id,
      utm_campaign,
      utm_medium,
      utm_source,
      utm_term,
      utm_content,
      sum(engaged_time) as engaged_time,
      sum(pageview_counter) as pageview_counter,
      sum(video_engaged_time) as video_engaged_time,
      sum(videoviews) as videoviews
    from unioned
    group by n, utm_id, utm_campaign, utm_medium, utm_source, utm_term, utm_content

),



dedupe as (
    select
      *
    from merged
)

select
  *
from dedupe
where n = 1
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-11 21:51:22,130: SQL status: SELECT in 0.62 seconds
2017-12-11 21:51:22,131: Using redshift connection "parsely_campaigns".
2017-12-11 21:51:22,131: On parsely_campaigns: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_campaigns__dbt_incremental_tmp'
2017-12-11 21:51:22,177: SQL status: SELECT in 0.05 seconds
2017-12-11 21:51:22,177: Using redshift connection "parsely_campaigns".
2017-12-11 21:51:22,177: On parsely_campaigns: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_campaigns' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:51:22,224: SQL status: SELECT in 0.05 seconds
2017-12-11 21:51:22,224: Using redshift connection "parsely_campaigns".
2017-12-11 21:51:22,224: On parsely_campaigns: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_campaigns' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:51:22,273: SQL status: SELECT in 0.05 seconds
2017-12-11 21:51:22,274: Writing runtime SQL for node "model.parsely.parsely_campaigns"
2017-12-11 21:51:22,274: Using redshift connection "parsely_campaigns".
2017-12-11 21:51:22,275: On parsely_campaigns: 
       

       delete
  from "blog_dbt_dev"."parsely_campaigns"
  where (utm_id) in (
    select (utm_id)
    from "parsely_campaigns__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_campaigns" ("n", "videoviews", "video_engaged_time", "engaged_time", "pageview_counter", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "utm_id")
       (
         select "n", "videoviews", "video_engaged_time", "engaged_time", "pageview_counter", "utm_content", "utm_term", "utm_source", "utm_medium", "utm_campaign", "utm_id"
         from "parsely_campaigns__dbt_incremental_tmp"
       );
     
2017-12-11 21:51:22,414: SQL status: INSERT 0 6 in 0.14 seconds
2017-12-11 21:51:22,414: On parsely_campaigns: COMMIT
2017-12-11 21:51:22,414: Using redshift connection "parsely_campaigns".
2017-12-11 21:51:22,414: On parsely_campaigns: COMMIT
2017-12-11 21:51:23,252: SQL status: COMMIT in 0.84 seconds
2017-12-11 21:51:23,253: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9bf2113290>], 'label': 'c00e34de-e456-44d5-9bd8-9ea2c4943fc5'}
2017-12-11 21:51:23,278: 21:51:23 | 16 of 18 OK created incremental model blog_dbt_dev.parsely_campaigns. [INSERT 0 6 in 1.81s]
2017-12-11 21:51:23,278: Compiling model.parsely.parsely_incoming_users
2017-12-11 21:51:23,289: Writing injected SQL for node "model.parsely.parsely_incoming_users"
2017-12-11 21:51:23,290: 21:51:23 | 17 of 18 START incremental model blog_dbt_dev.parsely_users.......... [RUN]
2017-12-11 21:51:23,290: Compiling model.parsely.parsely_users
2017-12-11 21:51:23,298: Acquiring new redshift connection "parsely_users".
2017-12-11 21:51:23,299: Re-using an available connection from the pool.
2017-12-11 21:51:23,299: Using redshift connection "parsely_users".
2017-12-11 21:51:23,299: On parsely_users: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:51:23,317: SQL status: SELECT in 0.02 seconds
2017-12-11 21:51:23,361: Writing injected SQL for node "model.parsely.parsely_users"
2017-12-11 21:51:23,362: Using redshift connection "parsely_users".
2017-12-11 21:51:23,362: On parsely_users: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:51:23,380: SQL status: SELECT in 0.02 seconds
2017-12-11 21:51:23,380: Using redshift connection "parsely_users".
2017-12-11 21:51:23,380: On parsely_users: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:51:23,398: SQL status: SELECT in 0.02 seconds
2017-12-11 21:51:23,400: Using redshift connection "parsely_users".
2017-12-11 21:51:23,400: On parsely_users: BEGIN
2017-12-11 21:51:23,402: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:51:23,402: Using redshift connection "parsely_users".
2017-12-11 21:51:23,402: On parsely_users: create temporary table "parsely_users__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          -- 1 row per visitor_site_Id
-- includes visitor type, returning, new, subscribers, etc
-- first login, last login, etc



-- second time: builds temp table; deletes duplicates by unique key, inserts new data
--


with  __dbt__CTE__parsely_incoming_users as (
-- 1 row per visitor_site_Id
-- includes visitor type, returning, new, subscribers, etc
-- first login, last login, etc



with incoming_users_pageviews as (
  select
      apikey,
      visitor_site_id,
      visitor_ip,
      --custom fields
      apikey_visitor_id,
      customer_apikey,
      -- metrics
      max(ts_action) as last_timestamp,
      sum(pageview_counter) as user_total_pageviews,
      sum(engaged_time) as user_total_engaged_time,
      0 as user_total_videoviews,
      0 as user_total_video_engaged_time
  from "blog_dbt_dev"."parsely_pageviews"
  group by apikey, visitor_site_id, visitor_ip, apikey_visitor_id, customer_apikey
),

incoming_users_videostarts as (
  select
      apikey,
      visitor_site_id,
      visitor_ip,
      --custom fields
      apikey_visitor_id,
      customer_apikey,
      -- metrics
      max(ts_action) as last_timestamp,
      0 as user_total_pageviews,
      0 as user_total_engaged_time,
      sum(videostart_counter) as user_total_videoviews,
      sum(video_engaged_time) as user_total_video_engaged_time
  from "blog_dbt_dev"."parsely_videoviews"
  group by apikey, visitor_site_id, visitor_ip,   apikey_visitor_id, customer_apikey
)

select * from incoming_users_pageviews
union all
select * from incoming_users_videostarts
),incoming_users as (
  select
      apikey,
      apikey_visitor_id,
      visitor_site_id,
      visitor_ip,
      customer_apikey,
      -- dates and times
      max(last_timestamp) as last_timestamp,
      date(min(last_timestamp)) as date_first_seen,
      date(max(last_timestamp)) as date_last_seen,
      -- metrics to aggregate
      sum(user_total_pageviews) as user_total_pageviews,
      sum(user_total_engaged_time) as user_total_engaged_time,
      sum(user_total_videoviews) as user_total_videoviews,
      sum(user_total_video_engaged_time) as user_total_video_engaged_time
  from __dbt__CTE__parsely_incoming_users
  group by 1,2,3,4,5
),



relevant_existing as (

    select
        apikey,
        apikey_visitor_id,
        visitor_site_id,
        visitor_ip,
        -- current user type
        iu.customer_apikey,
        -- dates and times
        eu.last_timestamp,
        eu.date_first_seen,
        eu.date_last_seen,
        -- metrics to aggregate
        eu.user_total_pageviews,
        eu.user_total_engaged_time,
        eu.user_total_videoviews,
        eu.user_total_video_engaged_time
    from "blog_dbt_dev"."parsely_users" as eu
    left join incoming_users as iu using
      (apikey_visitor_id, apikey, visitor_site_id, visitor_ip)

),

unioned as (

    -- combined pageviews and videostarts
    select
        apikey,
        apikey_visitor_id,
        visitor_site_id,
        visitor_ip,
        customer_apikey,
        -- dates and times
        last_timestamp,
        date_first_seen,
        date_last_seen,
        -- metrics to aggregate
        user_total_pageviews,
        user_total_engaged_time,
        user_total_videoviews,
        user_total_video_engaged_time
    from incoming_users

    union all

    select
        apikey,
        apikey_visitor_id,
        visitor_site_id,
        visitor_ip,
        --incoming users fields
        customer_apikey,
        -- dates and times
        last_timestamp,
        date_first_seen,
        date_last_seen,
        -- metrics to aggregate
        user_total_pageviews,
        user_total_engaged_time,
        user_total_videoviews,
        user_total_video_engaged_time
    from relevant_existing

),

merged as (

    select
        apikey,
        apikey_visitor_id,
        visitor_site_id,
        visitor_ip,
        --incoming users fields
        customer_apikey,
        -- dates and times
        max(last_timestamp) as last_timestamp,
        min(date_first_seen) as date_first_seen,
        max(date_last_seen) as date_last_seen,
        -- metrics
        sum(user_total_pageviews) as user_total_pageviews,
        sum(user_total_engaged_time) as user_total_engaged_time,
        sum(user_total_videoviews) as user_total_videoviews,
        sum(user_total_video_engaged_time) as user_total_video_engaged_time
    from unioned
    group by 1,2,3,4,5


)



select
    1 as user_counter,
    apikey,
    apikey_visitor_id,
    visitor_site_id,
    visitor_ip,
    customer_apikey,
    -- dates and times
    last_timestamp,
    date_first_seen,
    date_last_seen,
    -- metrics to aggregate
    user_total_pageviews,
    user_total_engaged_time,
    user_total_videoviews,
    user_total_video_engaged_time,
    -- derived fields
    case when date_first_seen < date(SYSDATE)
      then 'Returning'
      else 'New' end as user_type,
    case when user_total_pageviews>=30
      then 'Loyalty'
      else 'Non-Loyalty' end as user_engagement_level,
    DATEDIFF(day, last_timestamp, SYSDATE) as days_since_last_session
  from merged
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-11 21:51:24,678: SQL status: SELECT in 1.28 seconds
2017-12-11 21:51:24,678: Using redshift connection "parsely_users".
2017-12-11 21:51:24,678: On parsely_users: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_users__dbt_incremental_tmp'
2017-12-11 21:51:24,726: SQL status: SELECT in 0.05 seconds
2017-12-11 21:51:24,726: Using redshift connection "parsely_users".
2017-12-11 21:51:24,726: On parsely_users: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_users' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:51:24,773: SQL status: SELECT in 0.05 seconds
2017-12-11 21:51:24,773: Using redshift connection "parsely_users".
2017-12-11 21:51:24,773: On parsely_users: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_users' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:51:24,821: SQL status: SELECT in 0.05 seconds
2017-12-11 21:51:24,822: Writing runtime SQL for node "model.parsely.parsely_users"
2017-12-11 21:51:24,823: Using redshift connection "parsely_users".
2017-12-11 21:51:24,823: On parsely_users: 
       

       delete
  from "blog_dbt_dev"."parsely_users"
  where (apikey_visitor_id) in (
    select (apikey_visitor_id)
    from "parsely_users__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_users" ("days_since_last_session", "user_total_video_engaged_time", "user_total_videoviews", "user_total_engaged_time", "user_total_pageviews", "user_counter", "user_engagement_level", "user_type", "customer_apikey", "visitor_ip", "visitor_site_id", "apikey_visitor_id", "apikey", "date_last_seen", "date_first_seen", "last_timestamp")
       (
         select "days_since_last_session", "user_total_video_engaged_time", "user_total_videoviews", "user_total_engaged_time", "user_total_pageviews", "user_counter", "user_engagement_level", "user_type", "customer_apikey", "visitor_ip", "visitor_site_id", "apikey_visitor_id", "apikey", "date_last_seen", "date_first_seen", "last_timestamp"
         from "parsely_users__dbt_incremental_tmp"
       );
     
2017-12-11 21:51:25,000: SQL status: INSERT 0 1031 in 0.18 seconds
2017-12-11 21:51:25,000: On parsely_users: COMMIT
2017-12-11 21:51:25,001: Using redshift connection "parsely_users".
2017-12-11 21:51:25,001: On parsely_users: COMMIT
2017-12-11 21:51:25,448: SQL status: COMMIT in 0.45 seconds
2017-12-11 21:51:25,448: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9bf21cbd50>], 'label': 'c00e34de-e456-44d5-9bd8-9ea2c4943fc5'}
2017-12-11 21:51:25,478: 21:51:25 | 17 of 18 OK created incremental model blog_dbt_dev.parsely_users..... [INSERT 0 1031 in 2.16s]
2017-12-11 21:51:25,479: 21:51:25 | 18 of 18 START incremental model blog_dbt_dev.parsely_sessions....... [RUN]
2017-12-11 21:51:25,479: Compiling model.parsely.parsely_sessions
2017-12-11 21:51:25,486: Writing injected SQL for node "model.parsely.parsely_sessions"
2017-12-11 21:51:25,488: Acquiring new redshift connection "parsely_sessions".
2017-12-11 21:51:25,488: Re-using an available connection from the pool.
2017-12-11 21:51:25,488: Using redshift connection "parsely_sessions".
2017-12-11 21:51:25,488: On parsely_sessions: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:51:25,506: SQL status: SELECT in 0.02 seconds
2017-12-11 21:51:25,506: Using redshift connection "parsely_sessions".
2017-12-11 21:51:25,506: On parsely_sessions: select tablename as name, 'table' as type from pg_tables
        where schemaname in ('blog_dbt_dev')
        union all
        select viewname as name, 'view' as type from pg_views
        where schemaname in ('blog_dbt_dev')
2017-12-11 21:51:25,523: SQL status: SELECT in 0.02 seconds
2017-12-11 21:51:25,525: Using redshift connection "parsely_sessions".
2017-12-11 21:51:25,525: On parsely_sessions: BEGIN
2017-12-11 21:51:25,527: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:51:25,527: Using redshift connection "parsely_sessions".
2017-12-11 21:51:25,527: On parsely_sessions: create temporary table "parsely_sessions__dbt_incremental_tmp" as (
        with dbt_incr_sbq as (
          -- 1 row per session
-- Join from the parsely_pageviews and parsely_videovideos
-- aggregated: pageviews, engaged time, videoviews, video engaged time
-- should also have session visitor type, returning, new, subscribers, etc (what was true at the time of the session)
-- metrics: sessions, pageviws, videoviews, engaged time, video watch time




with session_metrics as (
  select
      parsely_session_id,
      sum(pageview_counter) as pageviews,
      sum(engaged_time) as pageview_engaged_time,
      sum(videoviews) as videoviews,
      sum(video_engaged_time) as video_engaged_time
  from "blog_dbt_dev"."parsely_pageviews"
  group by parsely_session_id
),

users as (
    select
      apikey_visitor_id,
      user_type,
      user_engagement_level
    from "blog_dbt_dev"."parsely_users"
),

session_xf as (
  select  --add row number 1=1 here
  --  id
      parsely_session_id,
      apikey_visitor_id,
  --  session user dimensions
      user_type as session_user_type,
      user_engagement_level as session_user_engagement_level,
  --  counter field
      1 as session_counter,
  --  session time fields
      DATE_PART('day',ts_session_current) as session_day,
      DATE_PART('quarter',ts_session_current) as session_quarter,
      DATE_PART('month',ts_session_current) as session_month,
      DATE_PART('year',ts_session_current) as session_year,
      DATE_PART('week',ts_session_current) as session_week,
      session_date_id,
      pv.customer_apikey,
      apikey	,
      flags_is_amp	,
      ip_city	,
      ip_continent	,
      ip_country	,
      ip_lat::FLOAT8	,
      ip_lon	,
      ip_postal	,
      ip_subdivision	,
      ip_timezone	,
      ip_market_name	,
      ip_market_nielsen	,
      ip_market_doubleclick	,
      session	,
      session_id	,
      session_initial_referrer	,
      session_initial_url	,
      session_last_session_timestamp	,
      session_timestamp	,
      slot	,
      sref_category	,
      sref_clean	,
      sref_domain	,
      sref_fragment	,
      sref_netloc	,
      sref_params	,
      sref_path	,
      sref_query	,
      sref_scheme	,
      surl_clean	,
      surl_domain	,
      surl_fragment	,
      surl_netloc	,
      surl_params	,
      surl_path	,
      surl_query	,
      surl_scheme	,
      ua_browser	,
      ua_browserversion	,
      ua_device	,
      ua_devicebrand	,
      ua_devicemodel	,
      ua_devicetouchcapable	,
      ua_devicetype	,
      ua_os	,
      ua_osversion	,
      user_agent	,
      version	,
      visitor	,
      visitor_ip	,
      visitor_network_id	,
      visitor_site_id
  from "blog_dbt_dev"."parsely_pageviews" as pv
  left join users using (apikey_visitor_id)
)

select
  *
from session_xf
left join session_metrics using (parsely_session_id)
        )
        select * from dbt_incr_sbq
        where (TRUE)
          or (TRUE) is null
        );
2017-12-11 21:51:26,335: SQL status: SELECT in 0.81 seconds
2017-12-11 21:51:26,335: Using redshift connection "parsely_sessions".
2017-12-11 21:51:26,336: On parsely_sessions: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_sessions__dbt_incremental_tmp'
2017-12-11 21:51:26,383: SQL status: SELECT in 0.05 seconds
2017-12-11 21:51:26,384: Using redshift connection "parsely_sessions".
2017-12-11 21:51:26,384: On parsely_sessions: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_sessions' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:51:26,433: SQL status: SELECT in 0.05 seconds
2017-12-11 21:51:26,433: Using redshift connection "parsely_sessions".
2017-12-11 21:51:26,433: On parsely_sessions: select column_name, data_type, character_maximum_length
        from information_schema.columns
        where table_name = 'parsely_sessions' AND table_schema = 'blog_dbt_dev'
2017-12-11 21:51:26,482: SQL status: SELECT in 0.05 seconds
2017-12-11 21:51:26,484: Writing runtime SQL for node "model.parsely.parsely_sessions"
2017-12-11 21:51:26,485: Using redshift connection "parsely_sessions".
2017-12-11 21:51:26,485: On parsely_sessions: 
       

       delete
  from "blog_dbt_dev"."parsely_sessions"
  where (parsely_session_id) in (
    select (parsely_session_id)
    from "parsely_sessions__dbt_incremental_tmp"
  );

       insert into "blog_dbt_dev"."parsely_sessions" ("visitor", "ua_devicetouchcapable", "slot", "session", "flags_is_amp", "video_engaged_time", "videoviews", "pageview_engaged_time", "pageviews", "session_timestamp", "session_last_session_timestamp", "version", "session_id", "session_date_id", "session_counter", "ip_lon", "ip_lat", "session_week", "session_year", "session_month", "session_quarter", "session_day", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "apikey", "customer_apikey", "session_user_engagement_level", "session_user_type", "apikey_visitor_id", "parsely_session_id")
       (
         select "visitor", "ua_devicetouchcapable", "slot", "session", "flags_is_amp", "video_engaged_time", "videoviews", "pageview_engaged_time", "pageviews", "session_timestamp", "session_last_session_timestamp", "version", "session_id", "session_date_id", "session_counter", "ip_lon", "ip_lat", "session_week", "session_year", "session_month", "session_quarter", "session_day", "visitor_site_id", "visitor_network_id", "visitor_ip", "user_agent", "ua_osversion", "ua_os", "ua_devicetype", "ua_devicemodel", "ua_devicebrand", "ua_device", "ua_browserversion", "ua_browser", "surl_scheme", "surl_query", "surl_path", "surl_params", "surl_netloc", "surl_fragment", "surl_domain", "surl_clean", "sref_scheme", "sref_query", "sref_path", "sref_params", "sref_netloc", "sref_fragment", "sref_domain", "sref_clean", "sref_category", "session_initial_url", "session_initial_referrer", "ip_market_doubleclick", "ip_market_nielsen", "ip_market_name", "ip_timezone", "ip_subdivision", "ip_postal", "ip_country", "ip_continent", "ip_city", "apikey", "customer_apikey", "session_user_engagement_level", "session_user_type", "apikey_visitor_id", "parsely_session_id"
         from "parsely_sessions__dbt_incremental_tmp"
       );
     
2017-12-11 21:51:27,661: SQL status: INSERT 0 1261 in 1.18 seconds
2017-12-11 21:51:27,661: On parsely_sessions: COMMIT
2017-12-11 21:51:27,661: Using redshift connection "parsely_sessions".
2017-12-11 21:51:27,661: On parsely_sessions: COMMIT
2017-12-11 21:51:28,405: SQL status: COMMIT in 0.74 seconds
2017-12-11 21:51:28,406: Sending event: {'category': 'dbt', 'action': 'run_model', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9bf20eddd0>], 'label': 'c00e34de-e456-44d5-9bd8-9ea2c4943fc5'}
2017-12-11 21:51:28,497: 21:51:28 | 18 of 18 OK created incremental model blog_dbt_dev.parsely_sessions.. [INSERT 0 1261 in 2.93s]
2017-12-11 21:51:28,544: Using redshift connection "master".
2017-12-11 21:51:28,544: On master: BEGIN
2017-12-11 21:51:28,547: SQL status: BEGIN in 0.00 seconds
2017-12-11 21:51:28,547: On master: COMMIT
2017-12-11 21:51:28,547: Using redshift connection "master".
2017-12-11 21:51:28,547: On master: COMMIT
2017-12-11 21:51:28,548: SQL status: COMMIT in 0.00 seconds
2017-12-11 21:51:28,548: Compiling operation.parsely.parsely-on-run-end-0
2017-12-11 21:51:28,553: Writing injected SQL for node "operation.parsely.parsely-on-run-end-0"
2017-12-11 21:51:28,554: Compiling operation.parsely.parsely-on-run-end-1
2017-12-11 21:51:28,559: Writing injected SQL for node "operation.parsely.parsely-on-run-end-1"
2017-12-11 21:51:28,559: Using redshift connection "master".
2017-12-11 21:51:28,559: On master:  select 1 
2017-12-11 21:51:28,562: SQL status: SELECT in 0.00 seconds
2017-12-11 21:51:28,562: Acquiring new redshift connection "master".
2017-12-11 21:51:28,562: Re-using an available connection from the pool.
2017-12-11 21:51:28,562: Using redshift connection "master".
2017-12-11 21:51:28,562: On master: truncate table parsely_blog_rawdata
2017-12-11 21:51:29,064: SQL status: TRUNCATE TABLE and COMMIT TRANSACTION in 0.50 seconds
2017-12-11 21:51:29,064: 21:51:29 | 
2017-12-11 21:51:29,064: 21:51:29 | Finished running 3 view models, 15 incremental models in 43.16s.
2017-12-11 21:51:29,065: 
2017-12-11 21:51:29,065: Completed successfully
2017-12-11 21:51:29,065: 
Done. PASS=18 ERROR=0 SKIP=0 TOTAL=18
2017-12-11 21:51:29,065: Sending event: {'category': 'dbt', 'action': 'invocation', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9bf222a190>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9bf222a1d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9bf21fb950>], 'label': 'end'}
2017-12-11 21:51:29,094: Flushing usage events
